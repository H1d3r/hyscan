/*************************************************************/
/* Copyright (C) 2021 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: dasdas (Trial), License 84426Z 84426Z. */
/* Abstract syntax: kekeo_asn1 */
/* Created: Wed Dec 15 21:28:41 2021 */
/* ASN.1 compiler version: 11.1 */
/* Code generated for runtime version 11.1 or later */
/* Compiler operating system: Windows */
/* Compiler machine type: Intel x86 */
/* Target operating system: Windows */
/* Target machine type: Intel x86 */
/* C compiler options required: -Zp4 (Microsoft) */
/* ASN.1 compiler options and file names specified:
 * -controlfile kull_m_kerberos_oss_asn1_internal_Win32.c -headerfile
 * kull_m_kerberos_oss_asn1_internal.h -prefix KULL_M_ASN1_ -externalname
 * kekeo_asn1 -verbose -der -root -noSampleCode -messageFormat msvc
 * -cstylecomments -allow universaltags
 * D:\Program Files (x86)\OSS Nokalva\ossasn1\win32.trial\11.1.0\asn1dflt\asn1dflt.ms.zp4
 * KerberosV5Spec2.asn KerberosV5-PK-INIT-SPEC.asn PKIX1Explicit88.asn
 * PKINIT.asn MS-SFU-KILE.asn
 */


#ifndef OSS_kekeo_asn1
#define OSS_kekeo_asn1

#include "ossasn1.h"

#define          KULL_M_ASN1_Ticket_PDU 1
#define          KULL_M_ASN1_EncTicketPart_PDU 2
#define          KULL_M_ASN1_AS_REQ_PDU 3
#define          KULL_M_ASN1_TGS_REQ_PDU 4
#define          KULL_M_ASN1_KDC_REQ_BODY_PDU 5
#define          KULL_M_ASN1_AS_REP_PDU 6
#define          KULL_M_ASN1_TGS_REP_PDU 7
#define          KULL_M_ASN1_EncASRepPart_PDU 8
#define          KULL_M_ASN1_EncTGSRepPart_PDU 9
#define          KULL_M_ASN1_AP_REQ_PDU 10
#define          KULL_M_ASN1_Authenticator_PDU 11
#define          KULL_M_ASN1_AP_REP_PDU 12
#define          KULL_M_ASN1_EncAPRepPart_PDU 13
#define          KULL_M_ASN1_KRB_SAFE_PDU 14
#define          KULL_M_ASN1_KRB_PRIV_PDU 15
#define          KULL_M_ASN1_EncKrbPrivPart_PDU 16
#define          KULL_M_ASN1_KRB_CRED_PDU 17
#define          KULL_M_ASN1_EncKrbCredPart_PDU 18
#define          KULL_M_ASN1_KRB_ERROR_PDU 19
#define          KULL_M_ASN1_METHOD_DATA_PDU 20
#define          KULL_M_ASN1_TYPED_DATA_PDU 21
#define          KULL_M_ASN1_PA_ENC_TIMESTAMP_PDU 22
#define          KULL_M_ASN1_PA_ENC_TS_ENC_PDU 23
#define          KULL_M_ASN1_ETYPE_INFO_PDU 24
#define          KULL_M_ASN1_ETYPE_INFO2_PDU 25
#define          KULL_M_ASN1_AD_IF_RELEVANT_PDU 26
#define          KULL_M_ASN1_AD_KDCIssued_PDU 27
#define          KULL_M_ASN1_AD_AND_OR_PDU 28
#define          KULL_M_ASN1_AD_MANDATORY_FOR_KDC_PDU 29
#define          KULL_M_ASN1_ChangePasswdData_PDU 30
#define          KULL_M_ASN1_PA_PK_AS_REQ_PDU 31
#define          KULL_M_ASN1_AuthPack_PDU 32
#define          KULL_M_ASN1_TD_TRUSTED_CERTIFIERS_PDU 33
#define          KULL_M_ASN1_TD_INVALID_CERTIFICATES_PDU 34
#define          KULL_M_ASN1_KRB5PrincipalName_PDU 35
#define          KULL_M_ASN1_AD_INITIAL_VERIFIED_CAS_PDU 36
#define          KULL_M_ASN1_PA_PK_AS_REP_PDU 37
#define          KULL_M_ASN1_KDCDHKeyInfo_PDU 38
#define          KULL_M_ASN1_ReplyKeyPack_PDU 39
#define          KULL_M_ASN1_TD_DH_PARAMETERS_PDU 40
#define          KULL_M_ASN1_Attribute_PDU 41
#define          KULL_M_ASN1_X520name_PDU 42
#define          KULL_M_ASN1_X520CommonName_PDU 43
#define          KULL_M_ASN1_X520LocalityName_PDU 44
#define          KULL_M_ASN1_X520StateOrProvinceName_PDU 45
#define          KULL_M_ASN1_X520OrganizationName_PDU 46
#define          KULL_M_ASN1_X520OrganizationalUnitName_PDU 47
#define          KULL_M_ASN1_X520Title_PDU 48
#define          KULL_M_ASN1_X520dnQualifier_PDU 49
#define          KULL_M_ASN1_X520countryName_PDU 50
#define          KULL_M_ASN1_X520SerialNumber_PDU 51
#define          KULL_M_ASN1_X520Pseudonym_PDU 52
#define          KULL_M_ASN1_DomainComponent_PDU 53
#define          KULL_M_ASN1_EmailAddress_PDU 54
#define          KULL_M_ASN1_DistinguishedName_PDU 55
#define          KULL_M_ASN1_DirectoryString_PDU 56
#define          KULL_M_ASN1_Certificate_PDU 57
#define          KULL_M_ASN1_CertificateList_PDU 58
#define          KULL_M_ASN1_ORAddress_PDU 59
#define          KULL_M_ASN1_CommonName_PDU 60
#define          KULL_M_ASN1_TeletexCommonName_PDU 61
#define          KULL_M_ASN1_TeletexOrganizationName_PDU 62
#define          KULL_M_ASN1_TeletexPersonalName_PDU 63
#define          KULL_M_ASN1_TeletexOrganizationalUnitNames_PDU 64
#define          KULL_M_ASN1_PDSName_PDU 65
#define          KULL_M_ASN1_PhysicalDeliveryCountryName_PDU 66
#define          KULL_M_ASN1_PostalCode_PDU 67
#define          KULL_M_ASN1_PhysicalDeliveryOfficeName_PDU 68
#define          KULL_M_ASN1_PhysicalDeliveryOfficeNumber_PDU 69
#define          KULL_M_ASN1_ExtensionORAddressComponents_PDU 70
#define          KULL_M_ASN1_PhysicalDeliveryPersonalName_PDU 71
#define          KULL_M_ASN1_PhysicalDeliveryOrganizationName_PDU 72
#define          KULL_M_ASN1_ExtensionPhysicalDeliveryAddressComponents_PDU 73
#define          KULL_M_ASN1_UnformattedPostalAddress_PDU 74
#define          KULL_M_ASN1_StreetAddress_PDU 75
#define          KULL_M_ASN1_PostOfficeBoxAddress_PDU 76
#define          KULL_M_ASN1_PosteRestanteAddress_PDU 77
#define          KULL_M_ASN1_UniquePostalName_PDU 78
#define          KULL_M_ASN1_LocalPostalAttributes_PDU 79
#define          KULL_M_ASN1_ExtendedNetworkAddress_PDU 80
#define          KULL_M_ASN1_TerminalType_PDU 81
#define          KULL_M_ASN1_TeletexDomainDefinedAttributes_PDU 82
#define          KULL_M_ASN1_AuthPack_OLD_PDU 83
#define          KULL_M_ASN1_KERB_REPLY_KEY_PACKAGE_PDU 84
#define          KULL_M_ASN1_PA_FOR_USER_ENC_PDU 85
#define          KULL_M_ASN1_PA_S4U_X509_USER_PDU 86
#define          KULL_M_ASN1_PA_PAC_OPTIONS_PDU 87
#define          KULL_M_ASN1_KERB_PA_PAC_REQUEST_PDU 88
#define          KULL_M_ASN1_KERB_LOCAL_PDU 89
#define          KULL_M_ASN1_KERB_AD_RESTRICTION_ENTRY_PDU 90
#define          KULL_M_ASN1_PA_SUPPORTED_ENCTYPES_PDU 91

typedef struct KULL_M_ASN1__ObjectID {
    unsigned short  length;
    unsigned char   *value;
} KULL_M_ASN1__ObjectID;

typedef struct KULL_M_ASN1__Any {
    unsigned long   length;
    unsigned char   *value;
} KULL_M_ASN1__Any;

typedef int             KULL_M_ASN1_Int32;

                    /* signed values representable in 32 bits */
typedef unsigned int    KULL_M_ASN1_UInt32;

                    /* unsigned 32 bit values */
typedef unsigned int    KULL_M_ASN1_Microseconds;

                    /* microseconds */
typedef char            *KULL_M_ASN1_KerberosString;

typedef KULL_M_ASN1_KerberosString KULL_M_ASN1_Realm;

typedef struct KULL_M_ASN1__seqof1 {
    struct KULL_M_ASN1__seqof1 *next;
    KULL_M_ASN1_KerberosString value;
} *KULL_M_ASN1__seqof1;

typedef struct KULL_M_ASN1_PrincipalName {
    KULL_M_ASN1_Int32 name_type;
    struct KULL_M_ASN1__seqof1 *name_string;
} KULL_M_ASN1_PrincipalName;

typedef GeneralizedTime KULL_M_ASN1_KerberosTime; /* with no fractional seconds */

typedef struct KULL_M_ASN1__octet1 {
    unsigned int    length;
    unsigned char   *value;
} KULL_M_ASN1__octet1;

typedef struct KULL_M_ASN1_HostAddress {
    KULL_M_ASN1_Int32 addr_type;
    KULL_M_ASN1__octet1 address;
} KULL_M_ASN1_HostAddress;

/* NOTE: HostAddresses is always used as an OPTIONAL field and */
/* should not be empty. */
/* NOTE: subtly different from rfc1510, */
/* but has a value mapping and encodes the same */
typedef struct KULL_M_ASN1_HostAddresses {
    struct KULL_M_ASN1_HostAddresses *next;
    KULL_M_ASN1_HostAddress value;
} *KULL_M_ASN1_HostAddresses;

/* NOTE: AuthorizationData is always used as an OPTIONAL field and */
/* should not be empty. */
typedef struct KULL_M_ASN1_AuthorizationData {
    struct KULL_M_ASN1_AuthorizationData *next;
    struct {
        KULL_M_ASN1_Int32 ad_type;
        KULL_M_ASN1__octet1 ad_data;
    } value;
} *KULL_M_ASN1_AuthorizationData;

typedef struct KULL_M_ASN1_PA_DATA {
        /* NOTE: first tag is [1], not [0] */
    KULL_M_ASN1_Int32 padata_type;
    KULL_M_ASN1__octet1 padata_value; /* might be encoded AP-REQ */
} KULL_M_ASN1_PA_DATA;

typedef struct KULL_M_ASN1_KerberosFlags {
    unsigned int    length;  /* number of significant bits */
    unsigned char   *value;
} KULL_M_ASN1_KerberosFlags;

                    /* minimum number of bits shall be sent, */
                    /* but no fewer than 32 */
typedef struct KULL_M_ASN1_EncryptedData {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_kvno_present 0x80
    KULL_M_ASN1_Int32 etype; /* EncryptionType */
    KULL_M_ASN1_UInt32 kvno;  /* optional; set in bit_mask
                               * KULL_M_ASN1_kvno_present if present */
    KULL_M_ASN1__octet1 cipher; /* ciphertext */
} KULL_M_ASN1_EncryptedData;

typedef struct KULL_M_ASN1_EncryptionKey {
    KULL_M_ASN1_Int32 keytype; /* actually encryption type */
    KULL_M_ASN1__octet1 keyvalue;
} KULL_M_ASN1_EncryptionKey;

typedef struct KULL_M_ASN1_Checksum {
    KULL_M_ASN1_Int32 cksumtype;
    KULL_M_ASN1__octet1 checksum;
} KULL_M_ASN1_Checksum;

typedef struct KULL_M_ASN1_Ticket {
    unsigned short  tkt_vno;
    KULL_M_ASN1_Realm realm;
    KULL_M_ASN1_PrincipalName sname;
    KULL_M_ASN1_EncryptedData enc_part; /* EncTicketPart */
} KULL_M_ASN1_Ticket;

typedef KULL_M_ASN1_KerberosFlags KULL_M_ASN1_TicketFlags;

/* encoded Transited field */
typedef struct KULL_M_ASN1_TransitedEncoding {
    KULL_M_ASN1_Int32 tr_type; /* must be registered */
    KULL_M_ASN1__octet1 contents;
} KULL_M_ASN1_TransitedEncoding;

/* Encrypted part of ticket */
typedef struct KULL_M_ASN1_EncTicketPart {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_EncTicketPart_starttime_present 0x80
#       define      KULL_M_ASN1_EncTicketPart_renew_till_present 0x40
#       define      KULL_M_ASN1_EncTicketPart_caddr_present 0x20
#       define      KULL_M_ASN1_EncTicketPart_authorization_data_present 0x10
    KULL_M_ASN1_TicketFlags flags;
    KULL_M_ASN1_EncryptionKey key;
    KULL_M_ASN1_Realm crealm;
    KULL_M_ASN1_PrincipalName cname;
    KULL_M_ASN1_TransitedEncoding transited;
    KULL_M_ASN1_KerberosTime authtime;
    KULL_M_ASN1_KerberosTime starttime;  /* optional; set in bit_mask
                               * KULL_M_ASN1_EncTicketPart_starttime_present if
                               * present */
    KULL_M_ASN1_KerberosTime endtime;
    KULL_M_ASN1_KerberosTime renew_till;  /* optional; set in bit_mask
                              * KULL_M_ASN1_EncTicketPart_renew_till_present if
                              * present */
    struct KULL_M_ASN1_HostAddresses *caddr;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_EncTicketPart_caddr_present if
                                   * present */
    struct KULL_M_ASN1_AuthorizationData *authorization_data;  /* optional; set
                                   * in bit_mask
                      * KULL_M_ASN1_EncTicketPart_authorization_data_present if
                      * present */
} KULL_M_ASN1_EncTicketPart;

typedef KULL_M_ASN1_KerberosFlags KULL_M_ASN1_KDCOptions;

typedef struct KULL_M_ASN1__seqof2 {
    struct KULL_M_ASN1__seqof2 *next;
    KULL_M_ASN1_Int32 value;
} *KULL_M_ASN1__seqof2;

typedef struct KULL_M_ASN1__seqof3 {
    struct KULL_M_ASN1__seqof3 *next;
    KULL_M_ASN1_Ticket value;
} *KULL_M_ASN1__seqof3;

typedef struct KULL_M_ASN1_KDC_REQ_BODY {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_KDC_REQ_BODY_cname_present 0x80
#       define      KULL_M_ASN1_KDC_REQ_BODY_sname_present 0x40
#       define      KULL_M_ASN1_from_present 0x20
#       define      KULL_M_ASN1_rtime_present 0x10
#       define      KULL_M_ASN1_addresses_present 0x08
#       define      KULL_M_ASN1_enc_authorization_data_present 0x04
#       define      KULL_M_ASN1_additional_tickets_present 0x02
    KULL_M_ASN1_KDCOptions kdc_options;
    KULL_M_ASN1_PrincipalName cname;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_KDC_REQ_BODY_cname_present
                                       * if present */
                                    /* Used only in AS-REQ */
    KULL_M_ASN1_Realm realm;
                                    /* Server's realm */
                                    /* Also client's in AS-REQ */
    KULL_M_ASN1_PrincipalName sname;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_KDC_REQ_BODY_sname_present
                                       * if present */
    KULL_M_ASN1_KerberosTime from;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_from_present if present */
    KULL_M_ASN1_KerberosTime till;
    KULL_M_ASN1_KerberosTime rtime;  /* optional; set in bit_mask
                                      * KULL_M_ASN1_rtime_present if present */
    KULL_M_ASN1_UInt32 nonce;
    struct KULL_M_ASN1__seqof2 *etype; /* EncryptionType */
                                    /* in preference order */
    struct KULL_M_ASN1_HostAddresses *addresses;  /* optional; set in bit_mask
                                             * KULL_M_ASN1_addresses_present if
                                             * present */
    KULL_M_ASN1_EncryptedData enc_authorization_data;  /* optional; set in
                                   * bit_mask
                                   * KULL_M_ASN1_enc_authorization_data_present
                                   * if present */
                                    /* AuthorizationData */
    struct KULL_M_ASN1__seqof3 *additional_tickets;  /* optional; set in
                                   * bit_mask
                                   * KULL_M_ASN1_additional_tickets_present if
                                   * present */
                                        /* NOTE: not empty */
} KULL_M_ASN1_KDC_REQ_BODY;

typedef struct KULL_M_ASN1__seqof4 {
    struct KULL_M_ASN1__seqof4 *next;
    KULL_M_ASN1_PA_DATA value;
} *KULL_M_ASN1__seqof4;

typedef struct KULL_M_ASN1_KDC_REQ {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_KDC_REQ_padata_present 0x80
        /* NOTE: first tag is [1], not [0] */
    unsigned short  pvno;
    unsigned short  msg_type; /* AS */ /* TGS */
    struct KULL_M_ASN1__seqof4 *padata;  /* optional; set in bit_mask
                                          * KULL_M_ASN1_KDC_REQ_padata_present
                                          * if present */
                            /* NOTE: not empty */
    KULL_M_ASN1_KDC_REQ_BODY req_body;
} KULL_M_ASN1_KDC_REQ;

        /* reserved(0), */
        /* forwardable(1), */
        /* forwarded(2), */
        /* proxiable(3), */
        /* proxy(4), */
        /* may-postdate(5), */
        /* postdated(6), */
        /* invalid(7), */
        /* renewable(8), */
        /* initial(9), */
        /* pre-authent(10), */
        /* hw-authent(11), */
/* the following are new since 1510 */
        /* transited-policy-checked(12), */
        /* ok-as-delegate(13) */
typedef KULL_M_ASN1_KDC_REQ KULL_M_ASN1_AS_REQ;

typedef KULL_M_ASN1_KDC_REQ KULL_M_ASN1_TGS_REQ;

typedef struct KULL_M_ASN1_KDC_REP {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_KDC_REP_padata_present 0x80
    unsigned short  pvno;
    unsigned short  msg_type; /* AS */ /* TGS */
    struct KULL_M_ASN1__seqof4 *padata;  /* optional; set in bit_mask
                                          * KULL_M_ASN1_KDC_REP_padata_present
                                          * if present */
                                /* NOTE: not empty */
    KULL_M_ASN1_Realm crealm;
    KULL_M_ASN1_PrincipalName cname;
    KULL_M_ASN1_Ticket ticket;
    KULL_M_ASN1_EncryptedData enc_part;
                                /* EncASRepPart or EncTGSRepPart, */
                                /* as appropriate */
} KULL_M_ASN1_KDC_REP;

        /* reserved(0), */
        /* forwardable(1), */
        /* forwarded(2), */
        /* proxiable(3), */
        /* proxy(4), */
        /* allow-postdate(5), */
        /* postdated(6), */
        /* unused7(7), */
        /* renewable(8), */
        /* unused9(9), */
        /* unused10(10), */
        /* opt-hardware-auth(11), */
        /* unused12(12), */
        /* unused13(13), */
/* 15 is reserved for canonicalize */
        /* unused15(15), */
/* 26 was unused in 1510 */
        /* disable-transited-check(26), */
/**/
        /* renewable-ok(27), */
        /* enc-tkt-in-skey(28), */
        /* renew(30), */
        /* validate(31) */
typedef KULL_M_ASN1_KDC_REP KULL_M_ASN1_AS_REP;

typedef KULL_M_ASN1_KDC_REP KULL_M_ASN1_TGS_REP;

typedef struct KULL_M_ASN1_EncKDCRepPart {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_key_expiration_present 0x80
#       define      KULL_M_ASN1_EncKDCRepPart_starttime_present 0x40
#       define      KULL_M_ASN1_EncKDCRepPart_renew_till_present 0x20
#       define      KULL_M_ASN1_EncKDCRepPart_caddr_present 0x10
#       define      KULL_M_ASN1_encrypted_pa_data_present 0x08
    KULL_M_ASN1_EncryptionKey key;
    struct KULL_M_ASN1_LastReq *last_req;
    KULL_M_ASN1_UInt32 nonce;
    KULL_M_ASN1_KerberosTime key_expiration;  /* optional; set in bit_mask
                                        * KULL_M_ASN1_key_expiration_present if
                                        * present */
    KULL_M_ASN1_TicketFlags flags;
    KULL_M_ASN1_KerberosTime authtime;
    KULL_M_ASN1_KerberosTime starttime;  /* optional; set in bit_mask
                               * KULL_M_ASN1_EncKDCRepPart_starttime_present if
                               * present */
    KULL_M_ASN1_KerberosTime endtime;
    KULL_M_ASN1_KerberosTime renew_till;  /* optional; set in bit_mask
                              * KULL_M_ASN1_EncKDCRepPart_renew_till_present if
                              * present */
    KULL_M_ASN1_Realm srealm;
    KULL_M_ASN1_PrincipalName sname;
    struct KULL_M_ASN1_HostAddresses *caddr;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_EncKDCRepPart_caddr_present if
                                   * present */
    struct KULL_M_ASN1__seqof4 *encrypted_pa_data;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_encrypted_pa_data_present if
                                     * present */
} KULL_M_ASN1_EncKDCRepPart;

typedef KULL_M_ASN1_EncKDCRepPart KULL_M_ASN1_EncASRepPart;

typedef KULL_M_ASN1_EncKDCRepPart KULL_M_ASN1_EncTGSRepPart;

typedef struct KULL_M_ASN1_LastReq {
    struct KULL_M_ASN1_LastReq *next;
    struct {
        KULL_M_ASN1_Int32 lr_type;
        KULL_M_ASN1_KerberosTime lr_value;
    } value;
} *KULL_M_ASN1_LastReq;

typedef KULL_M_ASN1_KerberosFlags KULL_M_ASN1_APOptions;

typedef struct KULL_M_ASN1_AP_REQ {
    unsigned short  pvno;
    unsigned short  msg_type;
    KULL_M_ASN1_APOptions ap_options;
    KULL_M_ASN1_Ticket ticket;
    KULL_M_ASN1_EncryptedData authenticator; /* Authenticator */
} KULL_M_ASN1_AP_REQ;

        /* reserved(0), */
        /* use-session-key(1), */
        /* mutual-required(2) */

/* Unencrypted authenticator */
typedef struct KULL_M_ASN1_Authenticator {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_cksum_present 0x80
#       define      KULL_M_ASN1_Authenticator_subkey_present 0x40
#       define      KULL_M_ASN1_Authenticator_seq_number_present 0x20
#       define      KULL_M_ASN1_Authenticator_authorization_data_present 0x10
    unsigned short  authenticator_vno;
    KULL_M_ASN1_Realm crealm;
    KULL_M_ASN1_PrincipalName cname;
    KULL_M_ASN1_Checksum cksum;  /* optional; set in bit_mask
                                  * KULL_M_ASN1_cksum_present if present */
    KULL_M_ASN1_Microseconds cusec;
    KULL_M_ASN1_KerberosTime ctime;
    KULL_M_ASN1_EncryptionKey subkey;  /* optional; set in bit_mask
                                  * KULL_M_ASN1_Authenticator_subkey_present if
                                  * present */
    KULL_M_ASN1_UInt32 seq_number;  /* optional; set in bit_mask
                              * KULL_M_ASN1_Authenticator_seq_number_present if
                              * present */
    struct KULL_M_ASN1_AuthorizationData *authorization_data;  /* optional; set
                                   * in bit_mask
                      * KULL_M_ASN1_Authenticator_authorization_data_present if
                      * present */
} KULL_M_ASN1_Authenticator;

typedef struct KULL_M_ASN1_AP_REP {
    unsigned short  pvno;
    unsigned short  msg_type;
    KULL_M_ASN1_EncryptedData enc_part; /* EncAPRepPart */
} KULL_M_ASN1_AP_REP;

typedef struct KULL_M_ASN1_EncAPRepPart {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_EncAPRepPart_subkey_present 0x80
#       define      KULL_M_ASN1_EncAPRepPart_seq_number_present 0x40
    KULL_M_ASN1_KerberosTime ctime;
    KULL_M_ASN1_Microseconds cusec;
    KULL_M_ASN1_EncryptionKey subkey;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_EncAPRepPart_subkey_present if
                                   * present */
    KULL_M_ASN1_UInt32 seq_number;  /* optional; set in bit_mask
                               * KULL_M_ASN1_EncAPRepPart_seq_number_present if
                               * present */
} KULL_M_ASN1_EncAPRepPart;

typedef struct KULL_M_ASN1_KRB_SAFE_BODY {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_KRB_SAFE_BODY_timestamp_present 0x80
#       define      KULL_M_ASN1_KRB_SAFE_BODY_usec_present 0x40
#       define      KULL_M_ASN1_KRB_SAFE_BODY_seq_number_present 0x20
#       define      KULL_M_ASN1_KRB_SAFE_BODY_r_address_present 0x10
    KULL_M_ASN1__octet1 user_data;
    KULL_M_ASN1_KerberosTime timestamp;  /* optional; set in bit_mask
                               * KULL_M_ASN1_KRB_SAFE_BODY_timestamp_present if
                               * present */
    KULL_M_ASN1_Microseconds usec;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_KRB_SAFE_BODY_usec_present if
                                     * present */
    KULL_M_ASN1_UInt32 seq_number;  /* optional; set in bit_mask
                              * KULL_M_ASN1_KRB_SAFE_BODY_seq_number_present if
                              * present */
    KULL_M_ASN1_HostAddress s_address;
    KULL_M_ASN1_HostAddress r_address;  /* optional; set in bit_mask
                               * KULL_M_ASN1_KRB_SAFE_BODY_r_address_present if
                               * present */
} KULL_M_ASN1_KRB_SAFE_BODY;

typedef struct KULL_M_ASN1_KRB_SAFE {
    unsigned short  pvno;
    unsigned short  msg_type;
    KULL_M_ASN1_KRB_SAFE_BODY safe_body;
    KULL_M_ASN1_Checksum cksum;
} KULL_M_ASN1_KRB_SAFE;

typedef struct KULL_M_ASN1_KRB_PRIV {
    unsigned short  pvno;
    unsigned short  msg_type;
                        /* NOTE: there is no [2] tag */
    KULL_M_ASN1_EncryptedData enc_part; /* EncKrbPrivPart */
} KULL_M_ASN1_KRB_PRIV;

typedef struct KULL_M_ASN1_EncKrbPrivPart {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_EncKrbPrivPart_timestamp_present 0x80
#       define      KULL_M_ASN1_EncKrbPrivPart_usec_present 0x40
#       define      KULL_M_ASN1_EncKrbPrivPart_seq_number_present 0x20
#       define      KULL_M_ASN1_EncKrbPrivPart_r_address_present 0x10
    KULL_M_ASN1__octet1 user_data;
    KULL_M_ASN1_KerberosTime timestamp;  /* optional; set in bit_mask
                              * KULL_M_ASN1_EncKrbPrivPart_timestamp_present if
                              * present */
    KULL_M_ASN1_Microseconds usec;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_EncKrbPrivPart_usec_present
                                     * if present */
    KULL_M_ASN1_UInt32 seq_number;  /* optional; set in bit_mask
                             * KULL_M_ASN1_EncKrbPrivPart_seq_number_present if
                             * present */
    KULL_M_ASN1_HostAddress s_address; /* sender's addr */
    KULL_M_ASN1_HostAddress r_address;  /* optional; set in bit_mask
                              * KULL_M_ASN1_EncKrbPrivPart_r_address_present if
                              * present */
                                        /* recip's addr */
} KULL_M_ASN1_EncKrbPrivPart;

typedef struct KULL_M_ASN1_KRB_CRED {
    unsigned short  pvno;
    unsigned short  msg_type;
    struct KULL_M_ASN1__seqof3 *tickets;
    KULL_M_ASN1_EncryptedData enc_part; /* EncKrbCredPart */
} KULL_M_ASN1_KRB_CRED;

typedef struct KULL_M_ASN1_KrbCredInfo {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_pname_present 0x80
#       define      KULL_M_ASN1_flags_present 0x40
#       define      KULL_M_ASN1_authtime_present 0x20
#       define      KULL_M_ASN1_KrbCredInfo_starttime_present 0x10
#       define      KULL_M_ASN1_endtime_present 0x08
#       define      KULL_M_ASN1_KrbCredInfo_renew_till_present 0x04
#       define      KULL_M_ASN1_KrbCredInfo_sname_present 0x02
#       define      KULL_M_ASN1_KrbCredInfo_caddr_present 0x01
    KULL_M_ASN1_EncryptionKey key;
    KULL_M_ASN1_Realm prealm;  /* NULL for not present */
    KULL_M_ASN1_PrincipalName pname;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_pname_present if present */
    KULL_M_ASN1_TicketFlags flags;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_flags_present if present */
    KULL_M_ASN1_KerberosTime authtime;  /* optional; set in bit_mask
                                         * KULL_M_ASN1_authtime_present if
                                         * present */
    KULL_M_ASN1_KerberosTime starttime;  /* optional; set in bit_mask
                                 * KULL_M_ASN1_KrbCredInfo_starttime_present if
                                 * present */
    KULL_M_ASN1_KerberosTime endtime;  /* optional; set in bit_mask
                                        * KULL_M_ASN1_endtime_present if
                                        * present */
    KULL_M_ASN1_KerberosTime renew_till;  /* optional; set in bit_mask
                                * KULL_M_ASN1_KrbCredInfo_renew_till_present if
                                * present */
    KULL_M_ASN1_Realm srealm;  /* NULL for not present */
    KULL_M_ASN1_PrincipalName sname;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_KrbCredInfo_sname_present
                                       * if present */
    struct KULL_M_ASN1_HostAddresses *caddr;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_KrbCredInfo_caddr_present if
                                     * present */
} KULL_M_ASN1_KrbCredInfo;

typedef struct KULL_M_ASN1__seqof5 {
    struct KULL_M_ASN1__seqof5 *next;
    KULL_M_ASN1_KrbCredInfo value;
} *KULL_M_ASN1__seqof5;

typedef struct KULL_M_ASN1_EncKrbCredPart {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_nonce_present 0x80
#       define      KULL_M_ASN1_EncKrbCredPart_timestamp_present 0x40
#       define      KULL_M_ASN1_EncKrbCredPart_usec_present 0x20
#       define      KULL_M_ASN1_s_address_present 0x10
#       define      KULL_M_ASN1_EncKrbCredPart_r_address_present 0x08
    struct KULL_M_ASN1__seqof5 *ticket_info;
    KULL_M_ASN1_UInt32 nonce;  /* optional; set in bit_mask
                                * KULL_M_ASN1_nonce_present if present */
    KULL_M_ASN1_KerberosTime timestamp;  /* optional; set in bit_mask
                              * KULL_M_ASN1_EncKrbCredPart_timestamp_present if
                              * present */
    KULL_M_ASN1_Microseconds usec;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_EncKrbCredPart_usec_present
                                     * if present */
    KULL_M_ASN1_HostAddress s_address;  /* optional; set in bit_mask
                                         * KULL_M_ASN1_s_address_present if
                                         * present */
    KULL_M_ASN1_HostAddress r_address;  /* optional; set in bit_mask
                              * KULL_M_ASN1_EncKrbCredPart_r_address_present if
                              * present */
} KULL_M_ASN1_EncKrbCredPart;

typedef struct KULL_M_ASN1_KRB_ERROR {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_ctime_present 0x80
#       define      KULL_M_ASN1_cusec_present 0x40
#       define      KULL_M_ASN1_KRB_ERROR_cname_present 0x20
#       define      KULL_M_ASN1_e_data_present 0x10
    unsigned short  pvno;
    unsigned short  msg_type;
    KULL_M_ASN1_KerberosTime ctime;  /* optional; set in bit_mask
                                      * KULL_M_ASN1_ctime_present if present */
    KULL_M_ASN1_Microseconds cusec;  /* optional; set in bit_mask
                                      * KULL_M_ASN1_cusec_present if present */
    KULL_M_ASN1_KerberosTime stime;
    KULL_M_ASN1_Microseconds susec;
    KULL_M_ASN1_Int32 error_code;
    KULL_M_ASN1_Realm crealm;  /* NULL for not present */
    KULL_M_ASN1_PrincipalName cname;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_KRB_ERROR_cname_present if
                                       * present */
    KULL_M_ASN1_Realm realm; /* service realm */
    KULL_M_ASN1_PrincipalName sname; /* service name */
    KULL_M_ASN1_KerberosString e_text;  /* NULL for not present */
    KULL_M_ASN1__octet1 e_data;  /* optional; set in bit_mask
                                  * KULL_M_ASN1_e_data_present if present */
} KULL_M_ASN1_KRB_ERROR;

typedef struct KULL_M_ASN1_METHOD_DATA {
    struct KULL_M_ASN1_METHOD_DATA *next;
    KULL_M_ASN1_PA_DATA value;
} *KULL_M_ASN1_METHOD_DATA;

typedef struct KULL_M_ASN1_TYPED_DATA {
    struct KULL_M_ASN1_TYPED_DATA *next;
    struct {
        unsigned char   bit_mask;
#           define      KULL_M_ASN1_data_value_present 0x80
        KULL_M_ASN1_Int32 data_type;
        KULL_M_ASN1__octet1 data_value;  /* optional; set in bit_mask
                                          * KULL_M_ASN1_data_value_present if
                                          * present */
    } value;
} *KULL_M_ASN1_TYPED_DATA;

/* preauth stuff follows */
typedef KULL_M_ASN1_EncryptedData KULL_M_ASN1_PA_ENC_TIMESTAMP; /* PA-ENC-TS-ENC */

typedef struct KULL_M_ASN1_PA_ENC_TS_ENC {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_pausec_present 0x80
    KULL_M_ASN1_KerberosTime patimestamp; /* client's time */
    KULL_M_ASN1_Microseconds pausec;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_pausec_present if
                                       * present */
} KULL_M_ASN1_PA_ENC_TS_ENC;

typedef struct KULL_M_ASN1_ETYPE_INFO_ENTRY {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_salt_present 0x80
    KULL_M_ASN1_Int32 etype;
    KULL_M_ASN1__octet1 salt;  /* optional; set in bit_mask
                                * KULL_M_ASN1_salt_present if present */
} KULL_M_ASN1_ETYPE_INFO_ENTRY;

typedef struct KULL_M_ASN1_ETYPE_INFO {
    struct KULL_M_ASN1_ETYPE_INFO *next;
    KULL_M_ASN1_ETYPE_INFO_ENTRY value;
} *KULL_M_ASN1_ETYPE_INFO;

typedef struct KULL_M_ASN1_ETYPE_INFO2_ENTRY {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_s2kparams_present 0x80
    KULL_M_ASN1_Int32 etype;
    KULL_M_ASN1_KerberosString salt;  /* NULL for not present */
    KULL_M_ASN1__octet1 s2kparams;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_s2kparams_present if
                                     * present */
} KULL_M_ASN1_ETYPE_INFO2_ENTRY;

typedef struct KULL_M_ASN1_ETYPE_INFO2 {
    struct KULL_M_ASN1_ETYPE_INFO2 *next;
    KULL_M_ASN1_ETYPE_INFO2_ENTRY value;
} *KULL_M_ASN1_ETYPE_INFO2;

typedef struct KULL_M_ASN1_AuthorizationData *KULL_M_ASN1_AD_IF_RELEVANT;

typedef struct KULL_M_ASN1_AD_KDCIssued {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_i_sname_present 0x80
    KULL_M_ASN1_Checksum ad_checksum;
    KULL_M_ASN1_Realm i_realm;  /* NULL for not present */
    KULL_M_ASN1_PrincipalName i_sname;  /* optional; set in bit_mask
                                         * KULL_M_ASN1_i_sname_present if
                                         * present */
    struct KULL_M_ASN1_AuthorizationData *elements;
} KULL_M_ASN1_AD_KDCIssued;

typedef struct KULL_M_ASN1_AD_AND_OR {
    KULL_M_ASN1_Int32 condition_count;
    struct KULL_M_ASN1_AuthorizationData *elements;
} KULL_M_ASN1_AD_AND_OR;

typedef struct KULL_M_ASN1_AuthorizationData *KULL_M_ASN1_AD_MANDATORY_FOR_KDC;

typedef struct KULL_M_ASN1_ChangePasswdData {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_targname_present 0x80
    KULL_M_ASN1__octet1 newpasswd;
    KULL_M_ASN1_PrincipalName targname;  /* optional; set in bit_mask
                                          * KULL_M_ASN1_targname_present if
                                          * present */
    KULL_M_ASN1_Realm targrealm;  /* NULL for not present */
} KULL_M_ASN1_ChangePasswdData;

typedef struct KULL_M_ASN1_ExternalPrincipalIdentifier {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_subjectName_present 0x80
#       define      KULL_M_ASN1_issuerAndSerialNumber_present 0x40
#       define      KULL_M_ASN1_subjectKeyIdentifier_present 0x20
    KULL_M_ASN1__octet1 subjectName;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_subjectName_present if
                                       * present */
                   /* Contains a PKIX type Name encoded according to */
                   /* [RFC3280]. */
                   /* Identifies the certificate subject by the */
                   /* distinguished subject name. */
                   /* REQUIRED when there is a distinguished subject */
                   /* name present in the certificate. */
    KULL_M_ASN1__octet1 issuerAndSerialNumber;  /* optional; set in bit_mask
                                 * KULL_M_ASN1_issuerAndSerialNumber_present if
                                 * present */
                   /* Contains a CMS type IssuerAndSerialNumber encoded */
                   /* according to [RFC3852]. */
                   /* Identifies a certificate of the subject. */
                   /* REQUIRED for TD-INVALID-CERTIFICATES and */
                   /* TD-TRUSTED-CERTIFIERS. */
    KULL_M_ASN1__octet1 subjectKeyIdentifier;  /* optional; set in bit_mask
                                  * KULL_M_ASN1_subjectKeyIdentifier_present if
                                  * present */
                   /* Identifies the subject's public key by a key */
                   /* identifier.  When an X.509 certificate is */
                   /* referenced, this key identifier matches the X.509 */
                   /* subjectKeyIdentifier extension value.  When other */
                   /* certificate formats are referenced, the documents */
                   /* that specify the certificate format and their use */
                   /* with the CMS must include details on matching the */
                   /* key identifier to the appropriate certificate */
                   /* field. */
                   /* RECOMMENDED for TD-TRUSTED-CERTIFIERS. */
} KULL_M_ASN1_ExternalPrincipalIdentifier;

typedef struct KULL_M_ASN1_PA_PK_AS_REQ {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_trustedCertifiers_present 0x80
#       define      KULL_M_ASN1_kdcPkId_present 0x40
    KULL_M_ASN1__octet1 signedAuthPack;
                   /* Contains a CMS type ContentInfo encoded */
                   /* according to [RFC3852]. */
                   /* The contentType field of the type ContentInfo */
                   /* is id-signedData (1.2.840.113549.1.7.2), */
                   /* and the content field is a SignedData. */
                   /* The eContentType field for the type SignedData is */
                   /* id-pkinit-authData (1.3.6.1.5.2.3.1), and the */
                   /* eContent field contains the DER encoding of the */
                   /* type AuthPack. */
                   /* AuthPack is defined below. */
    struct KULL_M_ASN1__seqof6 {
        struct KULL_M_ASN1__seqof6 *next;
        KULL_M_ASN1_ExternalPrincipalIdentifier value;
    } *trustedCertifiers;  /* optional; set in bit_mask
                            * KULL_M_ASN1_trustedCertifiers_present if
                            * present */
                   /* Contains a list of CAs, trusted by the client, */
                   /* that can be used to certify the KDC. */
                   /* Each ExternalPrincipalIdentifier identifies a CA */
                   /* or a CA certificate (thereby its public key). */
                   /* The information contained in the */
                   /* trustedCertifiers SHOULD be used by the KDC as */
                   /* hints to guide its selection of an appropriate */
                   /* certificate chain to return to the client. */
    KULL_M_ASN1__octet1 kdcPkId;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_kdcPkId_present if present */
                   /* Contains a CMS type SignerIdentifier encoded */
                   /* according to [RFC3852]. */
                   /* Identifies, if present, a particular KDC */
                   /* public key that the client already has. */
} KULL_M_ASN1_PA_PK_AS_REQ;

typedef struct KULL_M_ASN1_DHNonce {
    unsigned int    length;
    unsigned char   *value;
} KULL_M_ASN1_DHNonce;

typedef struct KULL_M_ASN1_PKAuthenticator {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_paChecksum_present 0x80
    unsigned int    cusec;
    KULL_M_ASN1_KerberosTime ctime;
                   /* cusec and ctime are used as in [RFC4120], for */
                   /* replay prevention. */
    unsigned int    nonce;
                   /* Chosen randomly; this nonce does not need to */
                   /* match with the nonce in the KDC-REQ-BODY. */
    KULL_M_ASN1__octet1 paChecksum;  /* optional; set in bit_mask
                                      * KULL_M_ASN1_paChecksum_present if
                                      * present */
                   /* MUST be present. */
                   /* Contains the SHA1 checksum, performed over */
                   /* KDC-REQ-BODY. */
} KULL_M_ASN1_PKAuthenticator;

                                         /* if present, MUST be v2 */
/* Version, Time, CertificateSerialNumber, and Extensions were */
/* defined earlier for use in the certificate structure */
typedef struct KULL_M_ASN1_AlgorithmIdentifier {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_parameters_present 0x80
    KULL_M_ASN1__ObjectID algorithm;
    KULL_M_ASN1__Any parameters;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_parameters_present if
                                   * present */
} KULL_M_ASN1_AlgorithmIdentifier;

typedef struct KULL_M_ASN1__bit1 {
    unsigned int    length;  /* number of significant bits */
    unsigned char   *value;
} KULL_M_ASN1__bit1;

typedef struct KULL_M_ASN1_SubjectPublicKeyInfo {
    KULL_M_ASN1_AlgorithmIdentifier algorithm;
    KULL_M_ASN1__bit1 subjectPublicKey;
} KULL_M_ASN1_SubjectPublicKeyInfo;

typedef struct KULL_M_ASN1_AuthPack {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_clientPublicValue_present 0x80
#       define      KULL_M_ASN1_supportedCMSTypes_present 0x40
#       define      KULL_M_ASN1_clientDHNonce_present 0x20
    KULL_M_ASN1_PKAuthenticator pkAuthenticator;
    KULL_M_ASN1_SubjectPublicKeyInfo clientPublicValue;  /* optional; set in
                                   * bit_mask
                                   * KULL_M_ASN1_clientPublicValue_present if
                                   * present */
                   /* Type SubjectPublicKeyInfo is defined in */
                   /* [RFC3280]. */
                   /* Specifies Diffie-Hellman domain parameters */
                   /* and the client's public key value [IEEE1363]. */
                   /* The DH public key value is encoded as a BIT */
                   /* STRING according to [RFC3279]. */
                   /* This field is present only if the client wishes */
                   /* to use the Diffie-Hellman key agreement method. */
    struct KULL_M_ASN1__seqof7 {
        struct KULL_M_ASN1__seqof7 *next;
        KULL_M_ASN1_AlgorithmIdentifier value;
    } *supportedCMSTypes;  /* optional; set in bit_mask
                            * KULL_M_ASN1_supportedCMSTypes_present if
                            * present */
                   /* Type AlgorithmIdentifier is defined in */
                   /* [RFC3280]. */
                   /* List of CMS algorithm [RFC3370] identifiers */
                   /* that identify key transport algorithms, or */
                   /* content encryption algorithms, or signature */
                   /* algorithms supported by the client in order of */
                   /* (decreasing) preference. */
    KULL_M_ASN1_DHNonce clientDHNonce;  /* optional; set in bit_mask
                                         * KULL_M_ASN1_clientDHNonce_present if
                                         * present */
                   /* Present only if the client indicates that it */
                   /* wishes to reuse DH keys or to allow the KDC to */
                   /* do so. */
} KULL_M_ASN1_AuthPack;

typedef struct KULL_M_ASN1_TD_TRUSTED_CERTIFIERS {
    struct KULL_M_ASN1_TD_TRUSTED_CERTIFIERS *next;
    KULL_M_ASN1_ExternalPrincipalIdentifier value;
} *KULL_M_ASN1_TD_TRUSTED_CERTIFIERS;

                   /* Identifies a list of CAs trusted by the KDC. */
                   /* Each ExternalPrincipalIdentifier identifies a CA */
                   /* or a CA certificate (thereby its public key). */
typedef struct KULL_M_ASN1_TD_INVALID_CERTIFICATES {
    struct KULL_M_ASN1_TD_INVALID_CERTIFICATES *next;
    KULL_M_ASN1_ExternalPrincipalIdentifier value;
} *KULL_M_ASN1_TD_INVALID_CERTIFICATES;

                   /* Each ExternalPrincipalIdentifier identifies a */
                   /* certificate (sent by the client) with an invalid */
                   /* signature. */
typedef struct KULL_M_ASN1_KRB5PrincipalName {
    KULL_M_ASN1_Realm realm;
    KULL_M_ASN1_PrincipalName principalName;
} KULL_M_ASN1_KRB5PrincipalName;

typedef struct KULL_M_ASN1_AD_INITIAL_VERIFIED_CAS {
    struct KULL_M_ASN1_AD_INITIAL_VERIFIED_CAS *next;
    KULL_M_ASN1_ExternalPrincipalIdentifier value;
} *KULL_M_ASN1_AD_INITIAL_VERIFIED_CAS;

typedef struct KULL_M_ASN1_DHRepInfo {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_serverDHNonce_present 0x80
    KULL_M_ASN1__octet1 dhSignedData;
                   /* Contains a CMS type ContentInfo encoded according */
                   /* to [RFC3852]. */
                   /* The contentType field of the type ContentInfo is */
                   /* id-signedData (1.2.840.113549.1.7.2), and the */
                   /* content field is a SignedData. */
                   /* The eContentType field for the type SignedData is */
                   /* id-pkinit-DHKeyData (1.3.6.1.5.2.3.2), and the */
                   /* eContent field contains the DER encoding of the */
                   /* type KDCDHKeyInfo. */
                   /* KDCDHKeyInfo is defined below. */
    KULL_M_ASN1_DHNonce serverDHNonce;  /* optional; set in bit_mask
                                         * KULL_M_ASN1_serverDHNonce_present if
                                         * present */
                   /* Present if and only if dhKeyExpiration is */
                   /* present. */
} KULL_M_ASN1_DHRepInfo;

                   /* Identifies the certification path based on which */
                   /* the client certificate was validated. */
                   /* Each ExternalPrincipalIdentifier identifies a CA */
                   /* or a CA certificate (thereby its public key). */
typedef struct KULL_M_ASN1_PA_PK_AS_REP {
    unsigned short  choice;
#       define      KULL_M_ASN1_dhInfo_chosen 1
#       define      KULL_M_ASN1_encKeyPack_chosen 2
    union {
        KULL_M_ASN1_DHRepInfo dhInfo;  /* to choose, set choice to
                                        * KULL_M_ASN1_dhInfo_chosen */
                   /* Selected when Diffie-Hellman key exchange is */
                   /* used. */
        KULL_M_ASN1__octet1 encKeyPack;  /* to choose, set choice to
                                          * KULL_M_ASN1_encKeyPack_chosen */
                   /* Selected when public key encryption is used. */
                   /* Contains a CMS type ContentInfo encoded */
                   /* according to [RFC3852]. */
                   /* The contentType field of the type ContentInfo is */
                   /* id-envelopedData (1.2.840.113549.1.7.3). */
                   /* The content field is an EnvelopedData. */
                   /* The contentType field for the type EnvelopedData */
                   /* is id-signedData (1.2.840.113549.1.7.2). */
                   /* The eContentType field for the inner type */
                   /* SignedData (when unencrypted) is */
                   /* id-pkinit-rkeyData (1.3.6.1.5.2.3.3) and the */
                   /* eContent field contains the DER encoding of the */
                   /* type ReplyKeyPack. */
                   /* ReplyKeyPack is defined below. */
    } u;
} KULL_M_ASN1_PA_PK_AS_REP;

typedef struct KULL_M_ASN1_KDCDHKeyInfo {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_dhKeyExpiration_present 0x80
    KULL_M_ASN1__bit1 subjectPublicKey;
                   /* The KDC's DH public key. */
                   /* The DH public key value is encoded as a BIT */
                   /* STRING according to [RFC3279]. */
    unsigned int    nonce;
                   /* Contains the nonce in the pkAuthenticator field */
                   /* in the request if the DH keys are NOT reused, */
                   /* 0 otherwise. */
    KULL_M_ASN1_KerberosTime dhKeyExpiration;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_dhKeyExpiration_present if
                                       * present */
                   /* Expiration time for KDC's key pair, */
                   /* present if and only if the DH keys are reused. */
                   /* If present, the KDC's DH public key MUST not be */
                   /* used past the point of this expiration time. */
                   /* If this field is omitted then the serverDHNonce */
                   /* field MUST also be omitted. */
} KULL_M_ASN1_KDCDHKeyInfo;

typedef struct KULL_M_ASN1_ReplyKeyPack {
    KULL_M_ASN1_EncryptionKey replyKey;
                   /* Contains the session key used to encrypt the */
                   /* enc-part field in the AS-REP, i.e., the */
                   /* AS reply key. */
    KULL_M_ASN1_Checksum asChecksum;
                  /* Contains the checksum of the AS-REQ */
                  /* corresponding to the containing AS-REP. */
                  /* The checksum is performed over the type AS-REQ. */
                  /* The protocol key [RFC3961] of the checksum is the */
                  /* replyKey and the key usage number is 6. */
                  /* If the replyKey's enctype is "newer" [RFC4120] */
                  /* [RFC4121], the checksum is the required */
                  /* checksum operation [RFC3961] for that enctype. */
                  /* The client MUST verify this checksum upon receipt */
                  /* of the AS-REP. */
} KULL_M_ASN1_ReplyKeyPack;

typedef struct KULL_M_ASN1_TD_DH_PARAMETERS {
    struct KULL_M_ASN1_TD_DH_PARAMETERS *next;
    KULL_M_ASN1_AlgorithmIdentifier value;
} *KULL_M_ASN1_TD_DH_PARAMETERS;
                   /* Each AlgorithmIdentifier specifies a set of */
                   /* Diffie-Hellman domain parameters [IEEE1363]. */
                   /* This list is in decreasing preference order. */

            /* at least one value is required */
typedef KULL_M_ASN1__ObjectID KULL_M_ASN1_AttributeType;

typedef KULL_M_ASN1__Any KULL_M_ASN1_AttributeValue;

/* attribute data types */
typedef struct KULL_M_ASN1_Attribute {
    KULL_M_ASN1_AttributeType type;
    struct KULL_M_ASN1__setof1 {
        struct KULL_M_ASN1__setof1 *next;
        KULL_M_ASN1_AttributeValue value;
    } *values;
} KULL_M_ASN1_Attribute;

typedef struct KULL_M_ASN1_AttributeTypeAndValue {
    KULL_M_ASN1_AttributeType type;
    KULL_M_ASN1_AttributeValue value;
} KULL_M_ASN1_AttributeTypeAndValue;

typedef struct KULL_M_ASN1__char1 {
    unsigned short  length;
    char            *value;
} KULL_M_ASN1__char1;

typedef struct KULL_M_ASN1__char2 {
    unsigned short  length;
    int             *value;
} KULL_M_ASN1__char2;

typedef struct KULL_M_ASN1__char4 {
    unsigned short  length;
    unsigned short  *value;
} KULL_M_ASN1__char4;

typedef struct KULL_M_ASN1_X520name {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520name_teletexString_chosen 1
#       define      KULL_M_ASN1_X520name_printableString_chosen 2
#       define      KULL_M_ASN1_X520name_universalString_chosen 3
#       define      KULL_M_ASN1_X520name_utf8String_chosen 4
#       define      KULL_M_ASN1_X520name_bmpString_chosen 5
    union {
        KULL_M_ASN1__char1 teletexString;  /* to choose, set choice to
                                 * KULL_M_ASN1_X520name_teletexString_chosen */
        KULL_M_ASN1__char1 printableString;  /* to choose, set choice to
                               * KULL_M_ASN1_X520name_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
                               * KULL_M_ASN1_X520name_universalString_chosen */
        struct KULL_M_ASN1__char3 {
            unsigned short  length;
            unsigned char   *value;
        } utf8String;  /* to choose, set choice to
                        * KULL_M_ASN1_X520name_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                                     * KULL_M_ASN1_X520name_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520name;

typedef struct KULL_M_ASN1_X520CommonName {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520CommonName_teletexString_chosen 1
#       define      KULL_M_ASN1_X520CommonName_printableString_chosen 2
#       define      KULL_M_ASN1_X520CommonName_universalString_chosen 3
#       define      KULL_M_ASN1_X520CommonName_utf8String_chosen 4
#       define      KULL_M_ASN1_X520CommonName_bmpString_chosen 5
    union {
        char            teletexString[65];  /* to choose, set choice to
                           * KULL_M_ASN1_X520CommonName_teletexString_chosen */
        char            printableString[65];  /* to choose, set choice to
                         * KULL_M_ASN1_X520CommonName_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
                         * KULL_M_ASN1_X520CommonName_universalString_chosen */
        unsigned char   utf8String[385];  /* to choose, set choice to
                              * KULL_M_ASN1_X520CommonName_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                               * KULL_M_ASN1_X520CommonName_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520CommonName;

typedef struct KULL_M_ASN1_X520LocalityName {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520LocalityName_teletexString_chosen 1
#       define      KULL_M_ASN1_X520LocalityName_printableString_chosen 2
#       define      KULL_M_ASN1_X520LocalityName_universalString_chosen 3
#       define      KULL_M_ASN1_X520LocalityName_utf8String_chosen 4
#       define      KULL_M_ASN1_X520LocalityName_bmpString_chosen 5
    union {
        char            teletexString[129];  /* to choose, set choice to
                         * KULL_M_ASN1_X520LocalityName_teletexString_chosen */
        char            printableString[129];  /* to choose, set choice to
                       * KULL_M_ASN1_X520LocalityName_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
                       * KULL_M_ASN1_X520LocalityName_universalString_chosen */
        unsigned char   utf8String[769];  /* to choose, set choice to
                            * KULL_M_ASN1_X520LocalityName_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                             * KULL_M_ASN1_X520LocalityName_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520LocalityName;

typedef struct KULL_M_ASN1_X520StateOrProvinceName {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520StateOrProvinceName_teletexString_chosen 1
#       define      KULL_M_ASN1_X520StateOrProvinceName_printableString_chosen 2
#       define      KULL_M_ASN1_X520StateOrProvinceName_universalString_chosen 3
#       define      KULL_M_ASN1_X520StateOrProvinceName_utf8String_chosen 4
#       define      KULL_M_ASN1_X520StateOrProvinceName_bmpString_chosen 5
    union {
        char            teletexString[129];  /* to choose, set choice to
                  * KULL_M_ASN1_X520StateOrProvinceName_teletexString_chosen */
        char            printableString[129];  /* to choose, set choice to
                * KULL_M_ASN1_X520StateOrProvinceName_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
                * KULL_M_ASN1_X520StateOrProvinceName_universalString_chosen */
        unsigned char   utf8String[769];  /* to choose, set choice to
                     * KULL_M_ASN1_X520StateOrProvinceName_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                      * KULL_M_ASN1_X520StateOrProvinceName_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520StateOrProvinceName;

typedef struct KULL_M_ASN1_X520OrganizationName {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520OrganizationName_teletexString_chosen 1
#       define      KULL_M_ASN1_X520OrganizationName_printableString_chosen 2
#       define      KULL_M_ASN1_X520OrganizationName_universalString_chosen 3
#       define      KULL_M_ASN1_X520OrganizationName_utf8String_chosen 4
#       define      KULL_M_ASN1_X520OrganizationName_bmpString_chosen 5
    union {
        char            teletexString[65];  /* to choose, set choice to
                     * KULL_M_ASN1_X520OrganizationName_teletexString_chosen */
        char            printableString[65];  /* to choose, set choice to
                   * KULL_M_ASN1_X520OrganizationName_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
                   * KULL_M_ASN1_X520OrganizationName_universalString_chosen */
        unsigned char   utf8String[385];  /* to choose, set choice to
                        * KULL_M_ASN1_X520OrganizationName_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                         * KULL_M_ASN1_X520OrganizationName_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520OrganizationName;

typedef struct KULL_M_ASN1_X520OrganizationalUnitName {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520OrganizationalUnitName_teletexString_chosen 1
#       define      KULL_M_ASN1_X520OrganizationalUnitName_printableString_chosen 2
#       define      KULL_M_ASN1_X520OrganizationalUnitName_universalString_chosen 3
#       define      KULL_M_ASN1_X520OrganizationalUnitName_utf8String_chosen 4
#       define      KULL_M_ASN1_X520OrganizationalUnitName_bmpString_chosen 5
    union {
        char            teletexString[65];  /* to choose, set choice to
               * KULL_M_ASN1_X520OrganizationalUnitName_teletexString_chosen */
        char            printableString[65];  /* to choose, set choice to
             * KULL_M_ASN1_X520OrganizationalUnitName_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
             * KULL_M_ASN1_X520OrganizationalUnitName_universalString_chosen */
        unsigned char   utf8String[385];  /* to choose, set choice to
                  * KULL_M_ASN1_X520OrganizationalUnitName_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                   * KULL_M_ASN1_X520OrganizationalUnitName_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520OrganizationalUnitName;

typedef struct KULL_M_ASN1_X520Title {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520Title_teletexString_chosen 1
#       define      KULL_M_ASN1_X520Title_printableString_chosen 2
#       define      KULL_M_ASN1_X520Title_universalString_chosen 3
#       define      KULL_M_ASN1_X520Title_utf8String_chosen 4
#       define      KULL_M_ASN1_X520Title_bmpString_chosen 5
    union {
        char            teletexString[65];  /* to choose, set choice to
                                * KULL_M_ASN1_X520Title_teletexString_chosen */
        char            printableString[65];  /* to choose, set choice to
                              * KULL_M_ASN1_X520Title_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
                              * KULL_M_ASN1_X520Title_universalString_chosen */
        unsigned char   utf8String[385];  /* to choose, set choice to
                                   * KULL_M_ASN1_X520Title_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                                    * KULL_M_ASN1_X520Title_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520Title;

typedef char            *KULL_M_ASN1_X520dnQualifier;

typedef char            KULL_M_ASN1_X520countryName[3];

typedef char            KULL_M_ASN1_X520SerialNumber[65];

typedef struct KULL_M_ASN1_X520Pseudonym {
    unsigned short  choice;
#       define      KULL_M_ASN1_X520Pseudonym_teletexString_chosen 1
#       define      KULL_M_ASN1_X520Pseudonym_printableString_chosen 2
#       define      KULL_M_ASN1_X520Pseudonym_universalString_chosen 3
#       define      KULL_M_ASN1_X520Pseudonym_utf8String_chosen 4
#       define      KULL_M_ASN1_X520Pseudonym_bmpString_chosen 5
    union {
        char            teletexString[129];  /* to choose, set choice to
                            * KULL_M_ASN1_X520Pseudonym_teletexString_chosen */
        char            printableString[129];  /* to choose, set choice to
                          * KULL_M_ASN1_X520Pseudonym_printableString_chosen */
        KULL_M_ASN1__char2 universalString;  /* to choose, set choice to
                          * KULL_M_ASN1_X520Pseudonym_universalString_chosen */
        unsigned char   utf8String[769];  /* to choose, set choice to
                               * KULL_M_ASN1_X520Pseudonym_utf8String_chosen */
        KULL_M_ASN1__char4 bmpString;  /* to choose, set choice to
                                * KULL_M_ASN1_X520Pseudonym_bmpString_chosen */
    } u;
} KULL_M_ASN1_X520Pseudonym;

typedef char            *KULL_M_ASN1_DomainComponent;

typedef char            KULL_M_ASN1_EmailAddress[129];

/* naming data types */
typedef struct KULL_M_ASN1_Name { /* only one possibility for now */
    unsigned short  choice;
#       define      KULL_M_ASN1_rdnSequence_chosen 1
    union {
        struct KULL_M_ASN1_RDNSequence *rdnSequence;  /* to choose, set choice
                                         * to KULL_M_ASN1_rdnSequence_chosen */
    } u;
} KULL_M_ASN1_Name;

typedef struct KULL_M_ASN1_RDNSequence {
    struct KULL_M_ASN1_RDNSequence *next;
    struct KULL_M_ASN1_RelativeDistinguishedName *value;
} *KULL_M_ASN1_RDNSequence;

typedef struct KULL_M_ASN1_RDNSequence *KULL_M_ASN1_DistinguishedName;

typedef struct KULL_M_ASN1_RelativeDistinguishedName {
    struct KULL_M_ASN1_RelativeDistinguishedName *next;
    KULL_M_ASN1_AttributeTypeAndValue value;
} *KULL_M_ASN1_RelativeDistinguishedName;

/* Directory string type */
typedef struct KULL_M_ASN1_DirectoryString {
    unsigned short  choice;
#       define      KULL_M_ASN1_DirectoryString_teletexString_chosen 1
#       define      KULL_M_ASN1_DirectoryString_printableString_chosen 2
#       define      KULL_M_ASN1_DirectoryString_universalString_chosen 3
#       define      KULL_M_ASN1_DirectoryString_utf8String_chosen 4
#       define      KULL_M_ASN1_DirectoryString_bmpString_chosen 5
    union {
        char            *teletexString;  /* to choose, set choice to
                          * KULL_M_ASN1_DirectoryString_teletexString_chosen */
        char            *printableString;  /* to choose, set choice to
                        * KULL_M_ASN1_DirectoryString_printableString_chosen */
        struct KULL_M_ASN1__char5 {
            unsigned int    length;
            int             *value;
        } universalString;  /* to choose, set choice to
                        * KULL_M_ASN1_DirectoryString_universalString_chosen */
        unsigned char   *utf8String;  /* to choose, set choice to
                             * KULL_M_ASN1_DirectoryString_utf8String_chosen */
        struct KULL_M_ASN1__char6 {
            unsigned int    length;
            unsigned short  *value;
        } bmpString;  /* to choose, set choice to
                       * KULL_M_ASN1_DirectoryString_bmpString_chosen */
    } u;
} KULL_M_ASN1_DirectoryString;

typedef int             KULL_M_ASN1_Version;
#define                     KULL_M_ASN1_v1 0
#define                     KULL_M_ASN1_v2 1
#define                     KULL_M_ASN1_v3 2

typedef int             KULL_M_ASN1_CertificateSerialNumber;

typedef struct KULL_M_ASN1_Time {
    unsigned short  choice;
#       define      KULL_M_ASN1_utcTime_chosen 1
#       define      KULL_M_ASN1_generalTime_chosen 2
    union {
        UTCTime         utcTime;  /* to choose, set choice to
                                   * KULL_M_ASN1_utcTime_chosen */
        GeneralizedTime generalTime;  /* to choose, set choice to
                                       * KULL_M_ASN1_generalTime_chosen */
    } u;
} KULL_M_ASN1_Time;

typedef struct KULL_M_ASN1_Validity {
    KULL_M_ASN1_Time notBefore;
    KULL_M_ASN1_Time notAfter;
} KULL_M_ASN1_Validity;

typedef struct KULL_M_ASN1_UniqueIdentifier {
    unsigned int    length;  /* number of significant bits */
    unsigned char   *value;
} KULL_M_ASN1_UniqueIdentifier;

typedef struct KULL_M_ASN1_TBSCertificate {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_TBSCertificate_version_present 0x80
#       define      KULL_M_ASN1_issuerUniqueID_present 0x40
#       define      KULL_M_ASN1_subjectUniqueID_present 0x20
#       define      KULL_M_ASN1_extensions_present 0x10
    KULL_M_ASN1_Version version;  /* KULL_M_ASN1_TBSCertificate_version_present
                                   * not set in bit_mask implies value is v1 */
    KULL_M_ASN1_CertificateSerialNumber serialNumber;
    KULL_M_ASN1_AlgorithmIdentifier signature;
    KULL_M_ASN1_Name issuer;
    KULL_M_ASN1_Validity validity;
    KULL_M_ASN1_Name subject;
    KULL_M_ASN1_SubjectPublicKeyInfo subjectPublicKeyInfo;
    KULL_M_ASN1_UniqueIdentifier issuerUniqueID;  /* optional; set in bit_mask
                                        * KULL_M_ASN1_issuerUniqueID_present if
                                        * present */
                          /* If present, version MUST be v2 or v3 */
    KULL_M_ASN1_UniqueIdentifier subjectUniqueID;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_subjectUniqueID_present if
                                       * present */
                          /* If present, version MUST be v2 or v3 */
    struct KULL_M_ASN1_Extensions *extensions;  /* optional; set in bit_mask
                                            * KULL_M_ASN1_extensions_present if
                                            * present */
                          /* If present, version MUST be v3 */
} KULL_M_ASN1_TBSCertificate;

/* certificate and CRL specific structures begin here */
typedef struct KULL_M_ASN1_Certificate {
    KULL_M_ASN1_TBSCertificate tbsCertificate;
    KULL_M_ASN1_AlgorithmIdentifier signatureAlgorithm;
    KULL_M_ASN1__bit1 signature;
} KULL_M_ASN1_Certificate;

typedef struct KULL_M_ASN1_Extension {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_critical_present 0x80
    KULL_M_ASN1__ObjectID extnID;
    ossBoolean      critical;  /* KULL_M_ASN1_critical_present not set in
                                * bit_mask implies value is FALSE */
    KULL_M_ASN1__octet1 extnValue;
} KULL_M_ASN1_Extension;

typedef struct KULL_M_ASN1_Extensions {
    struct KULL_M_ASN1_Extensions *next;
    KULL_M_ASN1_Extension value;
} *KULL_M_ASN1_Extensions;

typedef struct KULL_M_ASN1_TBSCertList {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_TBSCertList_version_present 0x80
#       define      KULL_M_ASN1_nextUpdate_present 0x40
#       define      KULL_M_ASN1_revokedCertificates_present 0x20
#       define      KULL_M_ASN1_crlExtensions_present 0x10
    KULL_M_ASN1_Version version;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_TBSCertList_version_present if
                                   * present */
                                  /* if present, MUST be v2 */
    KULL_M_ASN1_AlgorithmIdentifier signature;
    KULL_M_ASN1_Name issuer;
    KULL_M_ASN1_Time thisUpdate;
    KULL_M_ASN1_Time nextUpdate;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_nextUpdate_present if
                                   * present */
    struct KULL_M_ASN1__seqof8 {
        struct KULL_M_ASN1__seqof8 *next;
        struct {
            unsigned char   bit_mask;
#               define      KULL_M_ASN1_crlEntryExtensions_present 0x80
            KULL_M_ASN1_CertificateSerialNumber userCertificate;
            KULL_M_ASN1_Time revocationDate;
            struct KULL_M_ASN1_Extensions *crlEntryExtensions;  /* optional; set
                                   * in bit_mask
                                   * KULL_M_ASN1_crlEntryExtensions_present if
                                   * present */
                                         /* if present, MUST be v2 */
        } value;
    } *revokedCertificates;  /* optional; set in bit_mask
                              * KULL_M_ASN1_revokedCertificates_present if
                              * present */
    struct KULL_M_ASN1_Extensions *crlExtensions;  /* optional; set in bit_mask
                                         * KULL_M_ASN1_crlExtensions_present if
                                         * present */
} KULL_M_ASN1_TBSCertList;

/* CRL structures */
typedef struct KULL_M_ASN1_CertificateList {
    KULL_M_ASN1_TBSCertList tbsCertList;
    KULL_M_ASN1_AlgorithmIdentifier signatureAlgorithm;
    KULL_M_ASN1__bit1 signature;
} KULL_M_ASN1_CertificateList;

     /* see also teletex-organizational-unit-names */
typedef struct KULL_M_ASN1_CountryName {
    unsigned short  choice;
#       define      KULL_M_ASN1_CountryName_x121_dcc_code_chosen 1
#       define      KULL_M_ASN1_CountryName_iso_3166_alpha2_code_chosen 2
    union {
        char            x121_dcc_code[4];  /* to choose, set choice to
                              * KULL_M_ASN1_CountryName_x121_dcc_code_chosen */
        char            iso_3166_alpha2_code[3];  /* to choose, set choice to
                       * KULL_M_ASN1_CountryName_iso_3166_alpha2_code_chosen */
    } u;
} KULL_M_ASN1_CountryName;

typedef struct KULL_M_ASN1_AdministrationDomainName {
    unsigned short  choice;
#       define      KULL_M_ASN1_AdministrationDomainName_numeric_chosen 1
#       define      KULL_M_ASN1_AdministrationDomainName_printable_chosen 2
    union {
        char            numeric[17];  /* to choose, set choice to
                       * KULL_M_ASN1_AdministrationDomainName_numeric_chosen */
        char            printable[17];  /* to choose, set choice to
                     * KULL_M_ASN1_AdministrationDomainName_printable_chosen */
    } u;
} KULL_M_ASN1_AdministrationDomainName;

typedef char            KULL_M_ASN1_X121Address[17];

typedef KULL_M_ASN1_X121Address KULL_M_ASN1_NetworkAddress;  /* see also extended-network-address */

typedef char            KULL_M_ASN1_TerminalIdentifier[25];

typedef struct KULL_M_ASN1_PrivateDomainName {
    unsigned short  choice;
#       define      KULL_M_ASN1_PrivateDomainName_numeric_chosen 1
#       define      KULL_M_ASN1_PrivateDomainName_printable_chosen 2
    union {
        char            numeric[17];  /* to choose, set choice to
                              * KULL_M_ASN1_PrivateDomainName_numeric_chosen */
        char            printable[17];  /* to choose, set choice to
                            * KULL_M_ASN1_PrivateDomainName_printable_chosen */
    } u;
} KULL_M_ASN1_PrivateDomainName;

typedef char            KULL_M_ASN1_OrganizationName[65];

  /* see also teletex-organization-name */
typedef char            KULL_M_ASN1_NumericUserIdentifier[33];

typedef struct KULL_M_ASN1_PersonalName {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_PersonalName_given_name_present 0x80
#       define      KULL_M_ASN1_PersonalName_initials_present 0x40
#       define      KULL_M_ASN1_PersonalName_generation_qualifier_present 0x20
    char            surname[41];
    char            given_name[17];  /* optional; set in bit_mask
                               * KULL_M_ASN1_PersonalName_given_name_present if
                               * present */
    char            initials[6];  /* optional; set in bit_mask
                                   * KULL_M_ASN1_PersonalName_initials_present
                                   * if present */
    char            generation_qualifier[4];  /* optional; set in bit_mask
                     * KULL_M_ASN1_PersonalName_generation_qualifier_present if
                     * present */
} KULL_M_ASN1_PersonalName;

/* Built-in Standard Attributes */
typedef struct KULL_M_ASN1_BuiltInStandardAttributes {
    unsigned short  bit_mask;
#       define      KULL_M_ASN1_country_name_present 0x8000
#       define      KULL_M_ASN1_administration_domain_name_present 0x4000
#       define      KULL_M_ASN1_network_address_present 0x2000
#       define      KULL_M_ASN1_terminal_identifier_present 0x1000
#       define      KULL_M_ASN1_private_domain_name_present 0x0800
#       define      KULL_M_ASN1_organization_name_present 0x0400
#       define      KULL_M_ASN1_numeric_user_identifier_present 0x0200
#       define      KULL_M_ASN1_personal_name_present 0x0100
#       define      KULL_M_ASN1_organizational_unit_names_present 0x0080
    KULL_M_ASN1_CountryName country_name;  /* optional; set in bit_mask
                                            * KULL_M_ASN1_country_name_present
                                            * if present */
    KULL_M_ASN1_AdministrationDomainName administration_domain_name;  
                                  /* optional; set in bit_mask
                            * KULL_M_ASN1_administration_domain_name_present if
                            * present */
    KULL_M_ASN1_NetworkAddress network_address;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_network_address_present if
                                       * present */
     /* see also extended-network-address */
    KULL_M_ASN1_TerminalIdentifier terminal_identifier;  /* optional; set in
                                   * bit_mask
                                   * KULL_M_ASN1_terminal_identifier_present if
                                   * present */
    KULL_M_ASN1_PrivateDomainName private_domain_name;  /* optional; set in
                                   * bit_mask
                                   * KULL_M_ASN1_private_domain_name_present if
                                   * present */
    KULL_M_ASN1_OrganizationName organization_name;  /* optional; set in
                                   * bit_mask
                                   * KULL_M_ASN1_organization_name_present if
                                   * present */
     /* see also teletex-organization-name */
    KULL_M_ASN1_NumericUserIdentifier numeric_user_identifier;  /* optional; set
                                   * in bit_mask
                                   * KULL_M_ASN1_numeric_user_identifier_present
                                   * if present */
    KULL_M_ASN1_PersonalName personal_name;  /* optional; set in bit_mask
                                         * KULL_M_ASN1_personal_name_present if
                                         * present */
     /* see also teletex-personal-name */
    struct KULL_M_ASN1_OrganizationalUnitNames *organizational_unit_names;  
                                        /* optional; set in bit_mask
                             * KULL_M_ASN1_organizational_unit_names_present if
                             * present */
} KULL_M_ASN1_BuiltInStandardAttributes;

                                /* contains a value of the type */
                                /* registered for use with the */
                                /* algorithm object identifier value */
/* X.400 address syntax starts here */
typedef struct KULL_M_ASN1_ORAddress {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_built_in_domain_defined_attributes_present 0x80
#       define      KULL_M_ASN1_extension_attributes_present 0x40
    KULL_M_ASN1_BuiltInStandardAttributes built_in_standard_attributes;
    struct KULL_M_ASN1_BuiltInDomainDefinedAttributes *built_in_domain_defined_attributes;                              /* optional; set in bit_mask
                    * KULL_M_ASN1_built_in_domain_defined_attributes_present if
                    * present */
    struct KULL_M_ASN1_ExtensionAttributes *extension_attributes;  /* optional;
                                   * set in bit_mask
                                   * KULL_M_ASN1_extension_attributes_present if
                                   * present */
   /* see also teletex-domain-defined-attributes */
} KULL_M_ASN1_ORAddress;

  /* see also teletex-organizational-unit-names */
typedef char            KULL_M_ASN1_OrganizationalUnitName[33];

  /* see also teletex-personal-name */
typedef struct KULL_M_ASN1_OrganizationalUnitNames {
    struct KULL_M_ASN1_OrganizationalUnitNames *next;
    KULL_M_ASN1_OrganizationalUnitName value;
} *KULL_M_ASN1_OrganizationalUnitNames;

typedef struct KULL_M_ASN1_BuiltInDomainDefinedAttribute {
    char            type[9];
    char            value[129];
} KULL_M_ASN1_BuiltInDomainDefinedAttribute;

/* Built-in Domain-defined Attributes */
typedef struct KULL_M_ASN1_BuiltInDomainDefinedAttributes {
    struct KULL_M_ASN1_BuiltInDomainDefinedAttributes *next;
    KULL_M_ASN1_BuiltInDomainDefinedAttribute value;
} *KULL_M_ASN1_BuiltInDomainDefinedAttributes;

typedef struct KULL_M_ASN1_ExtensionAttribute {
    unsigned short  extension_attribute_type;
    KULL_M_ASN1__Any extension_attribute_value;
} KULL_M_ASN1_ExtensionAttribute;

/* Extension Attributes */
typedef struct KULL_M_ASN1_ExtensionAttributes {
    struct KULL_M_ASN1_ExtensionAttributes *next;
    KULL_M_ASN1_ExtensionAttribute value;
} *KULL_M_ASN1_ExtensionAttributes;

typedef char            KULL_M_ASN1_CommonName[65];

typedef char            KULL_M_ASN1_TeletexCommonName[65];

typedef char            KULL_M_ASN1_TeletexOrganizationName[65];

typedef struct KULL_M_ASN1_TeletexPersonalName {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_TeletexPersonalName_given_name_present 0x80
#       define      KULL_M_ASN1_TeletexPersonalName_initials_present 0x40
#       define      KULL_M_ASN1_TeletexPersonalName_generation_qualifier_present 0x20
    char            surname[41];
    char            given_name[17];  /* optional; set in bit_mask
                        * KULL_M_ASN1_TeletexPersonalName_given_name_present if
                        * present */
    char            initials[6];  /* optional; set in bit_mask
                          * KULL_M_ASN1_TeletexPersonalName_initials_present if
                          * present */
    char            generation_qualifier[4];  /* optional; set in bit_mask
              * KULL_M_ASN1_TeletexPersonalName_generation_qualifier_present if
              * present */
} KULL_M_ASN1_TeletexPersonalName;

typedef char            KULL_M_ASN1_TeletexOrganizationalUnitName[33];

typedef struct KULL_M_ASN1_TeletexOrganizationalUnitNames {
    struct KULL_M_ASN1_TeletexOrganizationalUnitNames *next;
    KULL_M_ASN1_TeletexOrganizationalUnitName value;
} *KULL_M_ASN1_TeletexOrganizationalUnitNames;

typedef char            KULL_M_ASN1_PDSName[17];

typedef struct KULL_M_ASN1_PhysicalDeliveryCountryName {
    unsigned short  choice;
#       define      KULL_M_ASN1_PhysicalDeliveryCountryName_x121_dcc_code_chosen 1
#       define      KULL_M_ASN1_PhysicalDeliveryCountryName_iso_3166_alpha2_code_chosen 2
    union {
        char            x121_dcc_code[4];  /* to choose, set choice to
              * KULL_M_ASN1_PhysicalDeliveryCountryName_x121_dcc_code_chosen */
        char            iso_3166_alpha2_code[3];  /* to choose, set choice to
       * KULL_M_ASN1_PhysicalDeliveryCountryName_iso_3166_alpha2_code_chosen */
    } u;
} KULL_M_ASN1_PhysicalDeliveryCountryName;

typedef struct KULL_M_ASN1_PostalCode {
    unsigned short  choice;
#       define      KULL_M_ASN1_numeric_code_chosen 1
#       define      KULL_M_ASN1_printable_code_chosen 2
    union {
        char            numeric_code[17];  /* to choose, set choice to
                                           * KULL_M_ASN1_numeric_code_chosen */
        char            printable_code[17];  /* to choose, set choice to
                                         * KULL_M_ASN1_printable_code_chosen */
    } u;
} KULL_M_ASN1_PostalCode;

typedef struct KULL_M_ASN1_PDSParameter {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_printable_string_present 0x80
#       define      KULL_M_ASN1_PDSParameter_teletex_string_present 0x40
    char            printable_string[31];  /* optional; set in bit_mask
                                      * KULL_M_ASN1_printable_string_present if
                                      * present */
    char            teletex_string[31];  /* optional; set in bit_mask
                           * KULL_M_ASN1_PDSParameter_teletex_string_present if
                           * present */
} KULL_M_ASN1_PDSParameter;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_PhysicalDeliveryOfficeName;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_PhysicalDeliveryOfficeNumber;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_ExtensionORAddressComponents;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_PhysicalDeliveryPersonalName;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_PhysicalDeliveryOrganizationName;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_ExtensionPhysicalDeliveryAddressComponents;

typedef struct KULL_M_ASN1_UnformattedPostalAddress {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_printable_address_present 0x80
#       define      KULL_M_ASN1_UnformattedPostalAddress_teletex_string_present 0x40
    struct KULL_M_ASN1__seqof9 {
        struct KULL_M_ASN1__seqof9 *next;
        char            value[31];
    } *printable_address;  /* optional; set in bit_mask
                            * KULL_M_ASN1_printable_address_present if
                            * present */
    char            teletex_string[181];  /* optional; set in bit_mask
               * KULL_M_ASN1_UnformattedPostalAddress_teletex_string_present if
               * present */
} KULL_M_ASN1_UnformattedPostalAddress;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_StreetAddress;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_PostOfficeBoxAddress;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_PosteRestanteAddress;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_UniquePostalName;

typedef KULL_M_ASN1_PDSParameter KULL_M_ASN1_LocalPostalAttributes;

typedef struct KULL_M_ASN1_PresentationAddress {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_pSelector_present 0x80
#       define      KULL_M_ASN1_sSelector_present 0x40
#       define      KULL_M_ASN1_tSelector_present 0x20
    KULL_M_ASN1__octet1 pSelector;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_pSelector_present if
                                     * present */
    KULL_M_ASN1__octet1 sSelector;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_sSelector_present if
                                     * present */
    KULL_M_ASN1__octet1 tSelector;  /* optional; set in bit_mask
                                     * KULL_M_ASN1_tSelector_present if
                                     * present */
    struct KULL_M_ASN1__setof2 {
        struct KULL_M_ASN1__setof2 *next;
        KULL_M_ASN1__octet1 value;
    } *nAddresses;
} KULL_M_ASN1_PresentationAddress;

typedef struct KULL_M_ASN1_ExtendedNetworkAddress {
    unsigned short  choice;
#       define      KULL_M_ASN1_e163_4_address_chosen 1
#       define      KULL_M_ASN1_psap_address_chosen 2
    union {
        struct KULL_M_ASN1__seq1 {
            unsigned char   bit_mask;
#               define      KULL_M_ASN1_sub_address_present 0x80
            char            number[16];
            char            sub_address[41];  /* optional; set in bit_mask
                                               * KULL_M_ASN1_sub_address_present
                                               * if present */
        } e163_4_address;  /* to choose, set choice to
                            * KULL_M_ASN1_e163_4_address_chosen */
        KULL_M_ASN1_PresentationAddress psap_address;  /* to choose, set choice
                                        * to KULL_M_ASN1_psap_address_chosen */
    } u;
} KULL_M_ASN1_ExtendedNetworkAddress;

typedef unsigned short  KULL_M_ASN1_TerminalType;
#define                     KULL_M_ASN1_telex 3U
#define                     KULL_M_ASN1_teletex 4U
#define                     KULL_M_ASN1_g3_facsimile 5U
#define                     KULL_M_ASN1_g4_facsimile 6U
#define                     KULL_M_ASN1_ia5_terminal 7U
#define                     KULL_M_ASN1_videotex 8U

typedef struct KULL_M_ASN1_TeletexDomainDefinedAttribute {
    char            type[9];
    char            value[129];
} KULL_M_ASN1_TeletexDomainDefinedAttribute;

typedef struct KULL_M_ASN1_TeletexDomainDefinedAttributes {
    struct KULL_M_ASN1_TeletexDomainDefinedAttributes *next;
    KULL_M_ASN1_TeletexDomainDefinedAttribute value;
} *KULL_M_ASN1_TeletexDomainDefinedAttributes;

/**/
/* PK-AUTHENTICATOR - Different from [RFC4556] */
/* Appendix A, PKAuthenticator. */
/**/
typedef struct KULL_M_ASN1_PKAuthenticator_OLD {
    KULL_M_ASN1_PrincipalName kdc_name;
    KULL_M_ASN1_Realm kdc_realm;
/* name and realm of the KDC issuing the ticket */
    int             cusec;
    KULL_M_ASN1_KerberosTime ctime;
    int             nonce;
} KULL_M_ASN1_PKAuthenticator_OLD;

/*EXPORTS ALL*/
/* Different from [RFC4556] Appendix A */
typedef struct KULL_M_ASN1_AuthPack_OLD {
    KULL_M_ASN1_PKAuthenticator_OLD pkAuthenticator;
} KULL_M_ASN1_AuthPack_OLD;

/**/
/* KERB-REPLY-KEY-PACKAGE - Different from [RFC4556] */
/* Appendix A, ReplyKeyPack */
/**/
typedef struct KULL_M_ASN1_KERB_REPLY_KEY_PACKAGE {
    KULL_M_ASN1_EncryptionKey replyKey;
/* Contains the session key used to encrypt the enc-part */
/* field in the AS-REP, for example, the AS reply key. */
    int             nonce;
/* binds response to the request; must be same as the nonce */
/* passed in the PK-AUTHENTICATOR. */
} KULL_M_ASN1_KERB_REPLY_KEY_PACKAGE; /*#public- */

/*EXPORTS ALL*/
typedef struct KULL_M_ASN1_PA_FOR_USER_ENC {
    KULL_M_ASN1_PrincipalName userName;
    KULL_M_ASN1_Realm userRealm;
    KULL_M_ASN1_Checksum cksum;
    KULL_M_ASN1_KerberosString auth_package;
} KULL_M_ASN1_PA_FOR_USER_ENC;

typedef struct KULL_M_ASN1_S4UUserID {
    unsigned char   bit_mask;
#       define      KULL_M_ASN1_S4UUserID_cname_present 0x80
#       define      KULL_M_ASN1_subject_certificate_present 0x40
#       define      KULL_M_ASN1_options_present 0x20
    KULL_M_ASN1_UInt32 nonce; /* the nonce in KDC-REQ-BODY */
    KULL_M_ASN1_PrincipalName cname;  /* optional; set in bit_mask
                                       * KULL_M_ASN1_S4UUserID_cname_present if
                                       * present */
                                      /* Certificate mapping hints */
    KULL_M_ASN1_Realm crealm;
    KULL_M_ASN1__octet1 subject_certificate;  /* optional; set in bit_mask
                                   * KULL_M_ASN1_subject_certificate_present if
                                   * present */
    KULL_M_ASN1__bit1 options;  /* optional; set in bit_mask
                                 * KULL_M_ASN1_options_present if present */
} KULL_M_ASN1_S4UUserID;

typedef struct KULL_M_ASN1_PA_S4U_X509_USER {
    KULL_M_ASN1_S4UUserID user_id;
    KULL_M_ASN1_Checksum checksum;
} KULL_M_ASN1_PA_S4U_X509_USER;

typedef struct KULL_M_ASN1_PA_PAC_OPTIONS {
    KULL_M_ASN1_KerberosFlags kerberosFlags;
		/* Claims (0) */
		/* Branch Aware (1) */
		/* Forward to Full DC (2) */
		/* resource-based constrained delegation (3) */
} KULL_M_ASN1_PA_PAC_OPTIONS;

typedef struct KULL_M_ASN1_KERB_PA_PAC_REQUEST {
    ossBoolean      include_pac; /* if TRUE, and no pac present, */
                               /* include PAC. */
                               /*-If FALSE, and pac */
                               /* PAC present, remove PAC */
} KULL_M_ASN1_KERB_PA_PAC_REQUEST;

typedef struct KULL_M_ASN1_KERB_LOCAL {
    unsigned int    length;
    unsigned char   *value;
} KULL_M_ASN1_KERB_LOCAL;     /* Implementation-specific data which MUST be */

							/* ignored if Kerberos client is not local. */
typedef struct KULL_M_ASN1_KERB_AD_RESTRICTION_ENTRY {
    KULL_M_ASN1_Int32 restriction_type;
    KULL_M_ASN1__octet1 restriction;
} KULL_M_ASN1_KERB_AD_RESTRICTION_ENTRY;

typedef KULL_M_ASN1_Int32 KULL_M_ASN1_PA_SUPPORTED_ENCTYPES; /* Supported Encryption Types Bit Field */

#ifndef _OSSNOVALUES

/* OID arc for KerberosV5 */
/**/
/* This OID may be used to identify Kerberos protocol messages */
/* encapsulated in other protocols. */
/**/
/* This OID also designates the OID arc for KerberosV5-related OIDs. */
/**/
/* NOTE: RFC 1510 had an incorrect value (5) for "dod" in its OID. */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_krb5;

                 /* As defined in RFC 3280. */
                 /* as defined in RFC 4120. */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkinit;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkinit_authData;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkinit_DHKeyData;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkinit_rkeyData;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkinit_KPClientAuth;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkinit_KPKdc;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkinit_san;

extern const int KULL_M_ASN1_pa_pk_as_req;

extern const int KULL_M_ASN1_pa_pk_as_rep;

extern const int KULL_M_ASN1_ad_initial_verified_cas;

extern const int KULL_M_ASN1_td_trusted_certifiers;

extern const int KULL_M_ASN1_td_invalid_certificates;

extern const int KULL_M_ASN1_td_dh_parameters;

/* EXPORTS ALL */

/* IMPORTS NONE */

/* UNIVERSAL Types defined in 1993 and 1998 ASN.1 */
/* and required by this specification */
/* UniversalString is defined in ASN.1:1993 */
/* BMPString is the subtype of UniversalString and models */
/* the Basic Multilingual Plane of ISO/IEC/ITU 10646-1 */
      /* The content of this type conforms to RFC 2279. */

/* PKIX specific OIDs */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pkix;

/* PKIX arcs */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_pe;

        /* arc for private certificate extensions */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_qt;

        /* arc for policy qualifier types */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_kp;

        /* arc for extended key purpose OIDS */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_ad;

        /* arc for access descriptors */
/* policyQualifierIds for Internet policy qualifiers */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_qt_cps;

      /* OID for CPS qualifier */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_qt_unotice;

      /* OID for user notice qualifier */
/* access descriptor definitions */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_ad_ocsp;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_ad_caIssuers;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_ad_timeStamping;

extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_ad_caRepository;

/* suggested naming attributes: Definition of the following */
/*   information object set may be augmented to meet local */
/*   requirements.  Note that deleting members of the set may */
/*   prevent interoperability with conforming implementations. */
/* presented in pairs: the AttributeType followed by the */
/*   type definition for the corresponding AttributeValue */
/*Arc for standard naming attributes */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_id_at;

/* Naming attributes of type X520name */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_name;

extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_surname;

extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_givenName;

extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_initials;

extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_generationQualifier;

/* Naming attributes of type X520CommonName */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_commonName;

/* Naming attributes of type X520LocalityName */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_localityName;

/* Naming attributes of type X520StateOrProvinceName */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_stateOrProvinceName;

/* Naming attributes of type X520OrganizationName */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_organizationName;

/* Naming attributes of type X520OrganizationalUnitName */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_organizationalUnitName;

/* Naming attributes of type X520Title */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_title;

/* Naming attributes of type X520dnQualifier */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_dnQualifier;

/* Naming attributes of type X520countryName (digraph from IS 3166) */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_countryName;

/* Naming attributes of type X520SerialNumber */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_serialNumber;

/* Naming attributes of type X520Pseudonym */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_at_pseudonym;

/* Naming attributes of type DomainComponent (from RFC 2247) */
extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_domainComponent;

/* Legacy attributes */
extern KULL_M_ASN1__ObjectID KULL_M_ASN1_pkcs_9;

extern KULL_M_ASN1_AttributeType KULL_M_ASN1_id_emailAddress;

/* Extension types and attribute values */
extern const int KULL_M_ASN1_common_name;

extern const int KULL_M_ASN1_teletex_common_name;

extern const int KULL_M_ASN1_teletex_organization_name;

extern const int KULL_M_ASN1_teletex_personal_name;

extern const int KULL_M_ASN1_teletex_organizational_unit_names;

extern const int KULL_M_ASN1_pds_name;

extern const int KULL_M_ASN1_physical_delivery_country_name;

extern const int KULL_M_ASN1_postal_code;

extern const int KULL_M_ASN1_physical_delivery_office_name;

extern const int KULL_M_ASN1_physical_delivery_office_number;

extern const int KULL_M_ASN1_extension_OR_address_components;

extern const int KULL_M_ASN1_physical_delivery_personal_name;

extern const int KULL_M_ASN1_physical_delivery_organization_name;

extern const int KULL_M_ASN1_extension_physical_delivery_address_components;

extern const int KULL_M_ASN1_unformatted_postal_address;

extern const int KULL_M_ASN1_street_address;

extern const int KULL_M_ASN1_post_office_box_address;

extern const int KULL_M_ASN1_poste_restante_address;

extern const int KULL_M_ASN1_unique_postal_name;

extern const int KULL_M_ASN1_local_postal_attributes;

extern const int KULL_M_ASN1_extended_network_address;

extern const int KULL_M_ASN1_terminal_type;

/* Extension Domain-defined Attributes */
extern const int KULL_M_ASN1_teletex_domain_defined_attributes;

/*  specifications of Upper Bounds MUST be regarded as mandatory */
/*  from Annex B of ITU-T X.411 Reference Definition of MTS Parameter */
/*  Upper Bounds */

/* Upper Bounds */
extern const int KULL_M_ASN1_ub_name;

extern const int KULL_M_ASN1_ub_common_name;

extern const int KULL_M_ASN1_ub_locality_name;

extern const int KULL_M_ASN1_ub_state_name;

extern const int KULL_M_ASN1_ub_organization_name;

extern const int KULL_M_ASN1_ub_organizational_unit_name;

extern const int KULL_M_ASN1_ub_title;

extern const int KULL_M_ASN1_ub_serial_number;

extern const int KULL_M_ASN1_ub_match;

extern const int KULL_M_ASN1_ub_emailaddress_length;

extern const int KULL_M_ASN1_ub_common_name_length;

extern const int KULL_M_ASN1_ub_country_name_alpha_length;

extern const int KULL_M_ASN1_ub_country_name_numeric_length;

extern const int KULL_M_ASN1_ub_domain_defined_attributes;

extern const int KULL_M_ASN1_ub_domain_defined_attribute_type_length;

extern const int KULL_M_ASN1_ub_domain_defined_attribute_value_length;

extern const int KULL_M_ASN1_ub_domain_name_length;

extern const int KULL_M_ASN1_ub_extension_attributes;

extern const int KULL_M_ASN1_ub_e163_4_number_length;

extern const int KULL_M_ASN1_ub_e163_4_sub_address_length;

extern const int KULL_M_ASN1_ub_generation_qualifier_length;

extern const int KULL_M_ASN1_ub_given_name_length;

extern const int KULL_M_ASN1_ub_initials_length;

extern const int KULL_M_ASN1_ub_integer_options;

extern const int KULL_M_ASN1_ub_numeric_user_id_length;

extern const int KULL_M_ASN1_ub_organization_name_length;

extern const int KULL_M_ASN1_ub_organizational_unit_name_length;

extern const int KULL_M_ASN1_ub_organizational_units;

extern const int KULL_M_ASN1_ub_pds_name_length;

extern const int KULL_M_ASN1_ub_pds_parameter_length;

extern const int KULL_M_ASN1_ub_pds_physical_address_lines;

extern const int KULL_M_ASN1_ub_postal_code_length;

extern const int KULL_M_ASN1_ub_pseudonym;

extern const int KULL_M_ASN1_ub_surname_length;

extern const int KULL_M_ASN1_ub_terminal_id_length;

extern const int KULL_M_ASN1_ub_unformatted_address_length;

extern const int KULL_M_ASN1_ub_x121_address_length;
/* Note - upper bounds on string types, such as TeletexString, are */
/* measured in characters.  Excepting PrintableString or IA5String, a */
/* significantly greater number of octets will be required to hold */
/* such a value.  As a minimum, 16 octets, or twice the specified */
/* upper bound, whichever is the larger, should be allowed for */
/* TeletexString.  For UTF8String or UniversalString at least four */
/* times the upper bound should be allowed. */

#endif  /* #ifndef _OSSNOVALUES */


extern void * const kekeo_asn1;    /* encoder-decoder control table */
#endif /* OSS_kekeo_asn1 */
