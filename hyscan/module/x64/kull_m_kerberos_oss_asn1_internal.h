/*************************************************************/
/* Copyright (C) 2021 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: None (Trial), License 84425Z 84425Z. */
/* Abstract syntax: cbd_asn1 */
/* Created: Wed Dec 15 19:59:52 2021 */
/* ASN.1/C++ compiler version: 7.1 */
/* Code generated for runtime version 7.1 or later */
/* Compiler operating system: Windows X64 */
/* Compiler machine type: Intel 64 or AMD64 */
/* Target operating system: Windows X64 */
/* Target machine type: Intel 64 or AMD64 */
/* C++ compiler options required: -Zp8 (Microsoft) */
/* ASN.1 compiler options and file names specified:
 * -headerfile kull_m_kerberos_oss_asn1_internal.h -output
 * kull_m_kerberos_oss_asn1_internal_x64 -externalname cbd_asn1 -verbose -der
 * -root -noSampleCode -messageFormat msvc -allow universaltags
 * D:\Program Files\OSS Nokalva\asn1cpp\winx64.trial\7.1.0\asn1dflt\asn1dflt.msx64.zp8
 * KerberosV5Spec2.asn KerberosV5-PK-INIT-SPEC.asn PKIX1Explicit88.asn
 * PKINIT.asn MS-SFU-KILE.asn
 */

#ifndef OSS_cbd_asn1
#define OSS_cbd_asn1

#include "oss.h"
#include "asn1.h"

/* Representation types */


const OSS_INT32 v1 = 0;
const OSS_INT32 v2 = 1;
const OSS_INT32 v3 = 2;

const OSS_UINT32 telex = 3;
const OSS_UINT32 teletex = 4;
const OSS_UINT32 g3_facsimile = 5;
const OSS_UINT32 g4_facsimile = 6;
const OSS_UINT32 ia5_terminal = 7;
const OSS_UINT32 videotex = 8;
typedef OSS_INT32 Int32;

typedef OSS_UINT32 UInt32;

typedef OSS_UINT32 Microseconds;

typedef OssString KerberosString;

typedef OssString Realm;

class OSS_PUBLIC __shared1 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OssString component;

    __shared1();
    __shared1(const __shared1 &);
    ~__shared1();

    __shared1 & operator = (const __shared1 &);
    int operator == (const __shared1 &) const;
    int operator != (const __shared1 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared1 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared1 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared1 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC PrincipalName   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 name_type;
    typedef __shared1 name_string;

    PrincipalName();
    PrincipalName(const PrincipalName &);
    PrincipalName(name_type, const name_string &);

    PrincipalName & operator = (const PrincipalName &);
    int operator == (const PrincipalName &) const;
    int operator != (const PrincipalName &) const;

    name_type & get_name_type();
    name_type get_name_type() const;
    void set_name_type(name_type);

    name_string & get_name_string();
    const name_string & get_name_string() const;
    void set_name_string(const name_string &);
private:
    name_type name_type_field;
    name_string name_string_field;
};

typedef OssGeneralizedTime KerberosTime;

class OSS_PUBLIC HostAddress   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 addr_type;
    typedef OssString address;

    HostAddress();
    HostAddress(const HostAddress &);
    HostAddress(addr_type, const address &);

    HostAddress & operator = (const HostAddress &);
    int operator == (const HostAddress &) const;
    int operator != (const HostAddress &) const;

    addr_type & get_addr_type();
    addr_type get_addr_type() const;
    void set_addr_type(addr_type);

    address & get_address();
    const address & get_address() const;
    void set_address(const address &);
private:
    addr_type addr_type_field;
    address address_field;
};

class OSS_PUBLIC HostAddresses : public OssList  /* SEQUENCE OF */
{
public:
    typedef HostAddress component;

    HostAddresses();
    HostAddresses(const HostAddresses &);
    ~HostAddresses();

    HostAddresses & operator = (const HostAddresses &);
    int operator == (const HostAddresses &) const;
    int operator != (const HostAddresses &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(HostAddresses *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, HostAddresses *);

    int remove_front();
    int remove_after(OssIndex);

    HostAddresses *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq1;

class OSS_PUBLIC __shared2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __seq1 component;

    __shared2();
    __shared2(const __shared2 &);
    ~__shared2();

    __shared2 & operator = (const __shared2 &);
    int operator == (const __shared2 &) const;
    int operator != (const __shared2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared2 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared2 *extract_after(OssIndex, OssIndex);
};

typedef __shared2 AuthorizationData;

class OSS_PUBLIC __seq1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 ad_type;
    typedef OssString ad_data;

    __seq1();
    __seq1(const __seq1 &);
    __seq1(ad_type, const ad_data &);

    __seq1 & operator = (const __seq1 &);
    int operator == (const __seq1 &) const;
    int operator != (const __seq1 &) const;

    ad_type & get_ad_type();
    ad_type get_ad_type() const;
    void set_ad_type(ad_type);

    ad_data & get_ad_data();
    const ad_data & get_ad_data() const;
    void set_ad_data(const ad_data &);
private:
    ad_type ad_type_field;
    ad_data ad_data_field;
};

class OSS_PUBLIC PA_DATA   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 padata_type;
    typedef OssString padata_value;

    PA_DATA();
    PA_DATA(const PA_DATA &);
    PA_DATA(padata_type, const padata_value &);

    PA_DATA & operator = (const PA_DATA &);
    int operator == (const PA_DATA &) const;
    int operator != (const PA_DATA &) const;

    padata_type & get_padata_type();
    padata_type get_padata_type() const;
    void set_padata_type(padata_type);

    padata_value & get_padata_value();
    const padata_value & get_padata_value() const;
    void set_padata_value(const padata_value &);
private:
    padata_type padata_type_field;
    padata_value padata_value_field;
};

typedef OssBitString KerberosFlags;

class OSS_PUBLIC __shared3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 etype;
    typedef OSS_UINT32 kvno;
    typedef OssString cipher;

    __shared3();
    __shared3(const __shared3 &);
    __shared3(etype, kvno, const cipher &);
    __shared3(etype, const cipher &);

    __shared3 & operator = (const __shared3 &);
    int operator == (const __shared3 &) const;
    int operator != (const __shared3 &) const;

    etype & get_etype();
    etype get_etype() const;
    void set_etype(etype);

    kvno *get_kvno();
    const kvno *get_kvno() const;
    void set_kvno(kvno);
    int kvno_is_present() const;
    void omit_kvno();

    cipher & get_cipher();
    const cipher & get_cipher() const;
    void set_cipher(const cipher &);
private:
    OSS_UINT32 bit_mask;
    etype etype_field;
    kvno kvno_field;
    cipher cipher_field;
};

typedef __shared3 EncryptedData;

class OSS_PUBLIC EncryptionKey   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 keytype;
    typedef OssString keyvalue;

    EncryptionKey();
    EncryptionKey(const EncryptionKey &);
    EncryptionKey(keytype, const keyvalue &);

    EncryptionKey & operator = (const EncryptionKey &);
    int operator == (const EncryptionKey &) const;
    int operator != (const EncryptionKey &) const;

    keytype & get_keytype();
    keytype get_keytype() const;
    void set_keytype(keytype);

    keyvalue & get_keyvalue();
    const keyvalue & get_keyvalue() const;
    void set_keyvalue(const keyvalue &);
private:
    keytype keytype_field;
    keyvalue keyvalue_field;
};

class OSS_PUBLIC Checksum   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 cksumtype;
    typedef OssString checksum;

    Checksum();
    Checksum(const Checksum &);
    Checksum(cksumtype, const checksum &);

    Checksum & operator = (const Checksum &);
    int operator == (const Checksum &) const;
    int operator != (const Checksum &) const;

    cksumtype & get_cksumtype();
    cksumtype get_cksumtype() const;
    void set_cksumtype(cksumtype);

    checksum & get_checksum();
    const checksum & get_checksum() const;
    void set_checksum(const checksum &);
private:
    cksumtype cksumtype_field;
    checksum checksum_field;
};

class OSS_PUBLIC Ticket   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 tkt_vno;
    typedef OssString realm;
    typedef PrincipalName sname;
    typedef __shared3 enc_part;

    Ticket();
    Ticket(const Ticket &);
    Ticket(tkt_vno, const realm &, const sname &, const enc_part &);

    Ticket & operator = (const Ticket &);
    int operator == (const Ticket &) const;
    int operator != (const Ticket &) const;

    tkt_vno & get_tkt_vno();
    tkt_vno get_tkt_vno() const;
    void set_tkt_vno(tkt_vno);

    realm & get_realm();
    const realm & get_realm() const;
    void set_realm(const realm &);

    sname & get_sname();
    const sname & get_sname() const;
    void set_sname(const sname &);

    enc_part & get_enc_part();
    const enc_part & get_enc_part() const;
    void set_enc_part(const enc_part &);
private:
    tkt_vno tkt_vno_field;
    realm realm_field;
    sname sname_field;
    enc_part enc_part_field;
};

typedef OssBitString TicketFlags;

class OSS_PUBLIC TransitedEncoding   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 tr_type;
    typedef OssString contents;

    TransitedEncoding();
    TransitedEncoding(const TransitedEncoding &);
    TransitedEncoding(tr_type, const contents &);

    TransitedEncoding & operator = (const TransitedEncoding &);
    int operator == (const TransitedEncoding &) const;
    int operator != (const TransitedEncoding &) const;

    tr_type & get_tr_type();
    tr_type get_tr_type() const;
    void set_tr_type(tr_type);

    contents & get_contents();
    const contents & get_contents() const;
    void set_contents(const contents &);
private:
    tr_type tr_type_field;
    contents contents_field;
};

class OSS_PUBLIC EncTicketPart   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString flags;
    typedef EncryptionKey key;
    typedef OssString crealm;
    typedef PrincipalName cname;
    typedef TransitedEncoding transited;
    typedef OssGeneralizedTime authtime;
    typedef OssGeneralizedTime starttime;
    typedef OssGeneralizedTime endtime;
    typedef OssGeneralizedTime renew_till;
    typedef HostAddresses caddr;
    typedef __shared2 authorization_data;

    EncTicketPart();
    EncTicketPart(const EncTicketPart &);
    EncTicketPart(const flags &, const key &, const crealm &, const cname &, const transited &, 
	const authtime &, const starttime &, const endtime &, const renew_till &, const caddr &, 
	const authorization_data &);
    EncTicketPart(const flags &, const key &, const crealm &, const cname &, const transited &, 
	const authtime &, const endtime &);

    EncTicketPart & operator = (const EncTicketPart &);
    int operator == (const EncTicketPart &) const;
    int operator != (const EncTicketPart &) const;

    flags & get_flags();
    const flags & get_flags() const;
    void set_flags(const flags &);

    key & get_key();
    const key & get_key() const;
    void set_key(const key &);

    crealm & get_crealm();
    const crealm & get_crealm() const;
    void set_crealm(const crealm &);

    cname & get_cname();
    const cname & get_cname() const;
    void set_cname(const cname &);

    transited & get_transited();
    const transited & get_transited() const;
    void set_transited(const transited &);

    authtime & get_authtime();
    const authtime & get_authtime() const;
    void set_authtime(const authtime &);

    starttime *get_starttime();
    const starttime *get_starttime() const;
    void set_starttime(const starttime &);
    int starttime_is_present() const;
    void omit_starttime();

    endtime & get_endtime();
    const endtime & get_endtime() const;
    void set_endtime(const endtime &);

    renew_till *get_renew_till();
    const renew_till *get_renew_till() const;
    void set_renew_till(const renew_till &);
    int renew_till_is_present() const;
    void omit_renew_till();

    caddr *get_caddr();
    const caddr *get_caddr() const;
    void set_caddr(const caddr &);
    int caddr_is_present() const;
    void omit_caddr();

    authorization_data *get_authorization_data();
    const authorization_data *get_authorization_data() const;
    void set_authorization_data(const authorization_data &);
    int authorization_data_is_present() const;
    void omit_authorization_data();
private:
    OSS_UINT32 bit_mask;
    flags flags_field;
    key key_field;
    crealm crealm_field;
    cname cname_field;
    transited transited_field;
    authtime authtime_field;
    starttime starttime_field;
    endtime endtime_field;
    renew_till renew_till_field;
    caddr caddr_field;
    authorization_data authorization_data_field;
};

typedef OssBitString KDCOptions;

class OSS_PUBLIC __seqof2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OSS_INT32 component;

    __seqof2();
    __seqof2(const __seqof2 &);
    ~__seqof2();

    __seqof2 & operator = (const __seqof2 &);
    int operator == (const __seqof2 &) const;
    int operator != (const __seqof2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__seqof2 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __seqof2 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof2 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __shared4 : public OssList  /* SEQUENCE OF */
{
public:
    typedef Ticket component;

    __shared4();
    __shared4(const __shared4 &);
    ~__shared4();

    __shared4 & operator = (const __shared4 &);
    int operator == (const __shared4 &) const;
    int operator != (const __shared4 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared4 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared4 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared4 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC KDC_REQ_BODY   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString kdc_options;
    typedef PrincipalName cname;
    typedef OssString realm;
    typedef PrincipalName sname;
    typedef OssGeneralizedTime from;
    typedef OssGeneralizedTime till;
    typedef OssGeneralizedTime rtime;
    typedef OSS_UINT32 nonce;
    typedef __seqof2 etype;
    typedef HostAddresses addresses;
    typedef __shared3 enc_authorization_data;
    typedef __shared4 additional_tickets;

    KDC_REQ_BODY();
    KDC_REQ_BODY(const KDC_REQ_BODY &);
    KDC_REQ_BODY(const kdc_options &, const cname &, const realm &, const sname &, 
	const from &, const till &, const rtime &, nonce, const etype &, const addresses &, 
	const enc_authorization_data &, const additional_tickets &);
    KDC_REQ_BODY(const kdc_options &, const realm &, const till &, nonce, const etype &);

    KDC_REQ_BODY & operator = (const KDC_REQ_BODY &);
    int operator == (const KDC_REQ_BODY &) const;
    int operator != (const KDC_REQ_BODY &) const;

    kdc_options & get_kdc_options();
    const kdc_options & get_kdc_options() const;
    void set_kdc_options(const kdc_options &);

    cname *get_cname();
    const cname *get_cname() const;
    void set_cname(const cname &);
    int cname_is_present() const;
    void omit_cname();

    realm & get_realm();
    const realm & get_realm() const;
    void set_realm(const realm &);

    sname *get_sname();
    const sname *get_sname() const;
    void set_sname(const sname &);
    int sname_is_present() const;
    void omit_sname();

    from *get_from();
    const from *get_from() const;
    void set_from(const from &);
    int from_is_present() const;
    void omit_from();

    till & get_till();
    const till & get_till() const;
    void set_till(const till &);

    rtime *get_rtime();
    const rtime *get_rtime() const;
    void set_rtime(const rtime &);
    int rtime_is_present() const;
    void omit_rtime();

    nonce & get_nonce();
    nonce get_nonce() const;
    void set_nonce(nonce);

    etype & get_etype();
    const etype & get_etype() const;
    void set_etype(const etype &);

    addresses *get_addresses();
    const addresses *get_addresses() const;
    void set_addresses(const addresses &);
    int addresses_is_present() const;
    void omit_addresses();

    enc_authorization_data *get_enc_authorization_data();
    const enc_authorization_data *get_enc_authorization_data() const;
    void set_enc_authorization_data(const enc_authorization_data &);
    int enc_authorization_data_is_present() const;
    void omit_enc_authorization_data();

    additional_tickets *get_additional_tickets();
    const additional_tickets *get_additional_tickets() const;
    void set_additional_tickets(const additional_tickets &);
    int additional_tickets_is_present() const;
    void omit_additional_tickets();
private:
    OSS_UINT32 bit_mask;
    kdc_options kdc_options_field;
    cname cname_field;
    realm realm_field;
    sname sname_field;
    from from_field;
    till till_field;
    rtime rtime_field;
    nonce nonce_field;
    etype etype_field;
    addresses addresses_field;
    enc_authorization_data enc_authorization_data_field;
    additional_tickets additional_tickets_field;
};

class OSS_PUBLIC __shared5 : public OssList  /* SEQUENCE OF */
{
public:
    typedef PA_DATA component;

    __shared5();
    __shared5(const __shared5 &);
    ~__shared5();

    __shared5 & operator = (const __shared5 &);
    int operator == (const __shared5 &) const;
    int operator != (const __shared5 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared5 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared5 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared5 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __shared6   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 pvno;
    typedef OSS_UINT32 msg_type;
    typedef __shared5 padata;
    typedef KDC_REQ_BODY req_body;

    __shared6();
    __shared6(const __shared6 &);
    __shared6(pvno, msg_type, const padata &, const req_body &);
    __shared6(pvno, msg_type, const req_body &);

    __shared6 & operator = (const __shared6 &);
    int operator == (const __shared6 &) const;
    int operator != (const __shared6 &) const;

    pvno & get_pvno();
    pvno get_pvno() const;
    void set_pvno(pvno);

    msg_type & get_msg_type();
    msg_type get_msg_type() const;
    void set_msg_type(msg_type);

    padata *get_padata();
    const padata *get_padata() const;
    void set_padata(const padata &);
    int padata_is_present() const;
    void omit_padata();

    req_body & get_req_body();
    const req_body & get_req_body() const;
    void set_req_body(const req_body &);
private:
    OSS_UINT32 bit_mask;
    pvno pvno_field;
    msg_type msg_type_field;
    padata padata_field;
    req_body req_body_field;
};

typedef __shared6 KDC_REQ;

typedef __shared6 AS_REQ;

typedef __shared6 TGS_REQ;

class OSS_PUBLIC __shared7   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 pvno;
    typedef OSS_UINT32 msg_type;
    typedef __shared5 padata;
    typedef OssString crealm;
    typedef PrincipalName cname;
    typedef Ticket ticket;
    typedef __shared3 enc_part;

    __shared7();
    __shared7(const __shared7 &);
    __shared7(pvno, msg_type, const padata &, const crealm &, const cname &, const ticket &, 
	const enc_part &);
    __shared7(pvno, msg_type, const crealm &, const cname &, const ticket &, const enc_part &);

    __shared7 & operator = (const __shared7 &);
    int operator == (const __shared7 &) const;
    int operator != (const __shared7 &) const;

    pvno & get_pvno();
    pvno get_pvno() const;
    void set_pvno(pvno);

    msg_type & get_msg_type();
    msg_type get_msg_type() const;
    void set_msg_type(msg_type);

    padata *get_padata();
    const padata *get_padata() const;
    void set_padata(const padata &);
    int padata_is_present() const;
    void omit_padata();

    crealm & get_crealm();
    const crealm & get_crealm() const;
    void set_crealm(const crealm &);

    cname & get_cname();
    const cname & get_cname() const;
    void set_cname(const cname &);

    ticket & get_ticket();
    const ticket & get_ticket() const;
    void set_ticket(const ticket &);

    enc_part & get_enc_part();
    const enc_part & get_enc_part() const;
    void set_enc_part(const enc_part &);
private:
    OSS_UINT32 bit_mask;
    pvno pvno_field;
    msg_type msg_type_field;
    padata padata_field;
    crealm crealm_field;
    cname cname_field;
    ticket ticket_field;
    enc_part enc_part_field;
};

typedef __shared7 KDC_REP;

typedef __shared7 AS_REP;

typedef __shared7 TGS_REP;

class OSS_PUBLIC __seq2;

class OSS_PUBLIC LastReq : public OssList  /* SEQUENCE OF */
{
public:
    typedef __seq2 component;

    LastReq();
    LastReq(const LastReq &);
    ~LastReq();

    LastReq & operator = (const LastReq &);
    int operator == (const LastReq &) const;
    int operator != (const LastReq &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(LastReq *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, LastReq *);

    int remove_front();
    int remove_after(OssIndex);

    LastReq *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __shared8   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef EncryptionKey key;
    typedef LastReq last_req;
    typedef OSS_UINT32 nonce;
    typedef OssGeneralizedTime key_expiration;
    typedef OssBitString flags;
    typedef OssGeneralizedTime authtime;
    typedef OssGeneralizedTime starttime;
    typedef OssGeneralizedTime endtime;
    typedef OssGeneralizedTime renew_till;
    typedef OssString srealm;
    typedef PrincipalName sname;
    typedef HostAddresses caddr;
    typedef __shared5 encrypted_pa_data;

    __shared8();
    __shared8(const __shared8 &);
    __shared8(const key &, const last_req &, nonce, const key_expiration &, const flags &, 
	const authtime &, const starttime &, const endtime &, const renew_till &, const srealm &, 
	const sname &, const caddr &, const encrypted_pa_data &);
    __shared8(const key &, const last_req &, nonce, const flags &, const authtime &, 
	const endtime &, const srealm &, const sname &);

    __shared8 & operator = (const __shared8 &);
    int operator == (const __shared8 &) const;
    int operator != (const __shared8 &) const;

    key & get_key();
    const key & get_key() const;
    void set_key(const key &);

    last_req & get_last_req();
    const last_req & get_last_req() const;
    void set_last_req(const last_req &);

    nonce & get_nonce();
    nonce get_nonce() const;
    void set_nonce(nonce);

    key_expiration *get_key_expiration();
    const key_expiration *get_key_expiration() const;
    void set_key_expiration(const key_expiration &);
    int key_expiration_is_present() const;
    void omit_key_expiration();

    flags & get_flags();
    const flags & get_flags() const;
    void set_flags(const flags &);

    authtime & get_authtime();
    const authtime & get_authtime() const;
    void set_authtime(const authtime &);

    starttime *get_starttime();
    const starttime *get_starttime() const;
    void set_starttime(const starttime &);
    int starttime_is_present() const;
    void omit_starttime();

    endtime & get_endtime();
    const endtime & get_endtime() const;
    void set_endtime(const endtime &);

    renew_till *get_renew_till();
    const renew_till *get_renew_till() const;
    void set_renew_till(const renew_till &);
    int renew_till_is_present() const;
    void omit_renew_till();

    srealm & get_srealm();
    const srealm & get_srealm() const;
    void set_srealm(const srealm &);

    sname & get_sname();
    const sname & get_sname() const;
    void set_sname(const sname &);

    caddr *get_caddr();
    const caddr *get_caddr() const;
    void set_caddr(const caddr &);
    int caddr_is_present() const;
    void omit_caddr();

    encrypted_pa_data *get_encrypted_pa_data();
    const encrypted_pa_data *get_encrypted_pa_data() const;
    void set_encrypted_pa_data(const encrypted_pa_data &);
    int encrypted_pa_data_is_present() const;
    void omit_encrypted_pa_data();
private:
    OSS_UINT32 bit_mask;
    key key_field;
    last_req last_req_field;
    nonce nonce_field;
    key_expiration key_expiration_field;
    flags flags_field;
    authtime authtime_field;
    starttime starttime_field;
    endtime endtime_field;
    renew_till renew_till_field;
    srealm srealm_field;
    sname sname_field;
    caddr caddr_field;
    encrypted_pa_data encrypted_pa_data_field;
};

typedef __shared8 EncKDCRepPart;

typedef __shared8 EncASRepPart;

typedef __shared8 EncTGSRepPart;

class OSS_PUBLIC __seq2   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 lr_type;
    typedef OssGeneralizedTime lr_value;

    __seq2();
    __seq2(const __seq2 &);
    __seq2(lr_type, const lr_value &);

    __seq2 & operator = (const __seq2 &);
    int operator == (const __seq2 &) const;
    int operator != (const __seq2 &) const;

    lr_type & get_lr_type();
    lr_type get_lr_type() const;
    void set_lr_type(lr_type);

    lr_value & get_lr_value();
    const lr_value & get_lr_value() const;
    void set_lr_value(const lr_value &);
private:
    lr_type lr_type_field;
    lr_value lr_value_field;
};

typedef OssBitString APOptions;

class OSS_PUBLIC AP_REQ   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 pvno;
    typedef OSS_UINT32 msg_type;
    typedef OssBitString ap_options;
    typedef Ticket ticket;
    typedef __shared3 authenticator;

    AP_REQ();
    AP_REQ(const AP_REQ &);
    AP_REQ(pvno, msg_type, const ap_options &, const ticket &, const authenticator &);

    AP_REQ & operator = (const AP_REQ &);
    int operator == (const AP_REQ &) const;
    int operator != (const AP_REQ &) const;

    pvno & get_pvno();
    pvno get_pvno() const;
    void set_pvno(pvno);

    msg_type & get_msg_type();
    msg_type get_msg_type() const;
    void set_msg_type(msg_type);

    ap_options & get_ap_options();
    const ap_options & get_ap_options() const;
    void set_ap_options(const ap_options &);

    ticket & get_ticket();
    const ticket & get_ticket() const;
    void set_ticket(const ticket &);

    authenticator & get_authenticator();
    const authenticator & get_authenticator() const;
    void set_authenticator(const authenticator &);
private:
    pvno pvno_field;
    msg_type msg_type_field;
    ap_options ap_options_field;
    ticket ticket_field;
    authenticator authenticator_field;
};

class OSS_PUBLIC Authenticator   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 authenticator_vno;
    typedef OssString crealm;
    typedef PrincipalName cname;
    typedef Checksum cksum;
    typedef OSS_UINT32 cusec;
    typedef OssGeneralizedTime ctime;
    typedef EncryptionKey subkey;
    typedef OSS_UINT32 seq_number;
    typedef __shared2 authorization_data;

    Authenticator();
    Authenticator(const Authenticator &);
    Authenticator(authenticator_vno, const crealm &, const cname &, const cksum &, 
	cusec, const ctime &, const subkey &, seq_number, const authorization_data &);
    Authenticator(authenticator_vno, const crealm &, const cname &, cusec, const ctime &);

    Authenticator & operator = (const Authenticator &);
    int operator == (const Authenticator &) const;
    int operator != (const Authenticator &) const;

    authenticator_vno & get_authenticator_vno();
    authenticator_vno get_authenticator_vno() const;
    void set_authenticator_vno(authenticator_vno);

    crealm & get_crealm();
    const crealm & get_crealm() const;
    void set_crealm(const crealm &);

    cname & get_cname();
    const cname & get_cname() const;
    void set_cname(const cname &);

    cksum *get_cksum();
    const cksum *get_cksum() const;
    void set_cksum(const cksum &);
    int cksum_is_present() const;
    void omit_cksum();

    cusec & get_cusec();
    cusec get_cusec() const;
    void set_cusec(cusec);

    ctime & get_ctime();
    const ctime & get_ctime() const;
    void set_ctime(const ctime &);

    subkey *get_subkey();
    const subkey *get_subkey() const;
    void set_subkey(const subkey &);
    int subkey_is_present() const;
    void omit_subkey();

    seq_number *get_seq_number();
    const seq_number *get_seq_number() const;
    void set_seq_number(seq_number);
    int seq_number_is_present() const;
    void omit_seq_number();

    authorization_data *get_authorization_data();
    const authorization_data *get_authorization_data() const;
    void set_authorization_data(const authorization_data &);
    int authorization_data_is_present() const;
    void omit_authorization_data();
private:
    OSS_UINT32 bit_mask;
    authenticator_vno authenticator_vno_field;
    crealm crealm_field;
    cname cname_field;
    cksum cksum_field;
    cusec cusec_field;
    ctime ctime_field;
    subkey subkey_field;
    seq_number seq_number_field;
    authorization_data authorization_data_field;
};

class OSS_PUBLIC __shared9   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 pvno;
    typedef OSS_UINT32 msg_type;
    typedef __shared3 enc_part;

    __shared9();
    __shared9(const __shared9 &);
    __shared9(pvno, msg_type, const enc_part &);

    __shared9 & operator = (const __shared9 &);
    int operator == (const __shared9 &) const;
    int operator != (const __shared9 &) const;

    pvno & get_pvno();
    pvno get_pvno() const;
    void set_pvno(pvno);

    msg_type & get_msg_type();
    msg_type get_msg_type() const;
    void set_msg_type(msg_type);

    enc_part & get_enc_part();
    const enc_part & get_enc_part() const;
    void set_enc_part(const enc_part &);
private:
    pvno pvno_field;
    msg_type msg_type_field;
    enc_part enc_part_field;
};

typedef __shared9 AP_REP;

class OSS_PUBLIC EncAPRepPart   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssGeneralizedTime ctime;
    typedef OSS_UINT32 cusec;
    typedef EncryptionKey subkey;
    typedef OSS_UINT32 seq_number;

    EncAPRepPart();
    EncAPRepPart(const EncAPRepPart &);
    EncAPRepPart(const ctime &, cusec, const subkey &, seq_number);
    EncAPRepPart(const ctime &, cusec);

    EncAPRepPart & operator = (const EncAPRepPart &);
    int operator == (const EncAPRepPart &) const;
    int operator != (const EncAPRepPart &) const;

    ctime & get_ctime();
    const ctime & get_ctime() const;
    void set_ctime(const ctime &);

    cusec & get_cusec();
    cusec get_cusec() const;
    void set_cusec(cusec);

    subkey *get_subkey();
    const subkey *get_subkey() const;
    void set_subkey(const subkey &);
    int subkey_is_present() const;
    void omit_subkey();

    seq_number *get_seq_number();
    const seq_number *get_seq_number() const;
    void set_seq_number(seq_number);
    int seq_number_is_present() const;
    void omit_seq_number();
private:
    OSS_UINT32 bit_mask;
    ctime ctime_field;
    cusec cusec_field;
    subkey subkey_field;
    seq_number seq_number_field;
};

class OSS_PUBLIC __shared10   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString user_data;
    typedef OssGeneralizedTime timestamp;
    typedef OSS_UINT32 usec;
    typedef OSS_UINT32 seq_number;
    typedef HostAddress s_address;
    typedef HostAddress r_address;

    __shared10();
    __shared10(const __shared10 &);
    __shared10(const user_data &, const timestamp &, usec, seq_number, const s_address &, 
	const r_address &);
    __shared10(const user_data &, const s_address &);

    __shared10 & operator = (const __shared10 &);
    int operator == (const __shared10 &) const;
    int operator != (const __shared10 &) const;

    user_data & get_user_data();
    const user_data & get_user_data() const;
    void set_user_data(const user_data &);

    timestamp *get_timestamp();
    const timestamp *get_timestamp() const;
    void set_timestamp(const timestamp &);
    int timestamp_is_present() const;
    void omit_timestamp();

    usec *get_usec();
    const usec *get_usec() const;
    void set_usec(usec);
    int usec_is_present() const;
    void omit_usec();

    seq_number *get_seq_number();
    const seq_number *get_seq_number() const;
    void set_seq_number(seq_number);
    int seq_number_is_present() const;
    void omit_seq_number();

    s_address & get_s_address();
    const s_address & get_s_address() const;
    void set_s_address(const s_address &);

    r_address *get_r_address();
    const r_address *get_r_address() const;
    void set_r_address(const r_address &);
    int r_address_is_present() const;
    void omit_r_address();
private:
    OSS_UINT32 bit_mask;
    user_data user_data_field;
    timestamp timestamp_field;
    usec usec_field;
    seq_number seq_number_field;
    s_address s_address_field;
    r_address r_address_field;
};

typedef __shared10 KRB_SAFE_BODY;

class OSS_PUBLIC KRB_SAFE   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 pvno;
    typedef OSS_UINT32 msg_type;
    typedef __shared10 safe_body;
    typedef Checksum cksum;

    KRB_SAFE();
    KRB_SAFE(const KRB_SAFE &);
    KRB_SAFE(pvno, msg_type, const safe_body &, const cksum &);

    KRB_SAFE & operator = (const KRB_SAFE &);
    int operator == (const KRB_SAFE &) const;
    int operator != (const KRB_SAFE &) const;

    pvno & get_pvno();
    pvno get_pvno() const;
    void set_pvno(pvno);

    msg_type & get_msg_type();
    msg_type get_msg_type() const;
    void set_msg_type(msg_type);

    safe_body & get_safe_body();
    const safe_body & get_safe_body() const;
    void set_safe_body(const safe_body &);

    cksum & get_cksum();
    const cksum & get_cksum() const;
    void set_cksum(const cksum &);
private:
    pvno pvno_field;
    msg_type msg_type_field;
    safe_body safe_body_field;
    cksum cksum_field;
};

typedef __shared9 KRB_PRIV;

typedef __shared10 EncKrbPrivPart;

class OSS_PUBLIC KRB_CRED   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 pvno;
    typedef OSS_UINT32 msg_type;
    typedef __shared4 tickets;
    typedef __shared3 enc_part;

    KRB_CRED();
    KRB_CRED(const KRB_CRED &);
    KRB_CRED(pvno, msg_type, const tickets &, const enc_part &);

    KRB_CRED & operator = (const KRB_CRED &);
    int operator == (const KRB_CRED &) const;
    int operator != (const KRB_CRED &) const;

    pvno & get_pvno();
    pvno get_pvno() const;
    void set_pvno(pvno);

    msg_type & get_msg_type();
    msg_type get_msg_type() const;
    void set_msg_type(msg_type);

    tickets & get_tickets();
    const tickets & get_tickets() const;
    void set_tickets(const tickets &);

    enc_part & get_enc_part();
    const enc_part & get_enc_part() const;
    void set_enc_part(const enc_part &);
private:
    pvno pvno_field;
    msg_type msg_type_field;
    tickets tickets_field;
    enc_part enc_part_field;
};

class OSS_PUBLIC KrbCredInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef EncryptionKey key;
    typedef OssString prealm;
    typedef PrincipalName pname;
    typedef OssBitString flags;
    typedef OssGeneralizedTime authtime;
    typedef OssGeneralizedTime starttime;
    typedef OssGeneralizedTime endtime;
    typedef OssGeneralizedTime renew_till;
    typedef OssString srealm;
    typedef PrincipalName sname;
    typedef HostAddresses caddr;

    KrbCredInfo();
    KrbCredInfo(const KrbCredInfo &);
    KrbCredInfo(const key &, const prealm &, const pname &, const flags &, const authtime &, 
	const starttime &, const endtime &, const renew_till &, const srealm &, const sname &, 
	const caddr &);
    KrbCredInfo(const key &);

    KrbCredInfo & operator = (const KrbCredInfo &);
    int operator == (const KrbCredInfo &) const;
    int operator != (const KrbCredInfo &) const;

    key & get_key();
    const key & get_key() const;
    void set_key(const key &);

    prealm *get_prealm();
    const prealm *get_prealm() const;
    void set_prealm(const prealm &);
    int prealm_is_present() const;
    void omit_prealm();

    pname *get_pname();
    const pname *get_pname() const;
    void set_pname(const pname &);
    int pname_is_present() const;
    void omit_pname();

    flags *get_flags();
    const flags *get_flags() const;
    void set_flags(const flags &);
    int flags_is_present() const;
    void omit_flags();

    authtime *get_authtime();
    const authtime *get_authtime() const;
    void set_authtime(const authtime &);
    int authtime_is_present() const;
    void omit_authtime();

    starttime *get_starttime();
    const starttime *get_starttime() const;
    void set_starttime(const starttime &);
    int starttime_is_present() const;
    void omit_starttime();

    endtime *get_endtime();
    const endtime *get_endtime() const;
    void set_endtime(const endtime &);
    int endtime_is_present() const;
    void omit_endtime();

    renew_till *get_renew_till();
    const renew_till *get_renew_till() const;
    void set_renew_till(const renew_till &);
    int renew_till_is_present() const;
    void omit_renew_till();

    srealm *get_srealm();
    const srealm *get_srealm() const;
    void set_srealm(const srealm &);
    int srealm_is_present() const;
    void omit_srealm();

    sname *get_sname();
    const sname *get_sname() const;
    void set_sname(const sname &);
    int sname_is_present() const;
    void omit_sname();

    caddr *get_caddr();
    const caddr *get_caddr() const;
    void set_caddr(const caddr &);
    int caddr_is_present() const;
    void omit_caddr();
private:
    OSS_UINT32 bit_mask;
    key key_field;
    prealm prealm_field;
    pname pname_field;
    flags flags_field;
    authtime authtime_field;
    starttime starttime_field;
    endtime endtime_field;
    renew_till renew_till_field;
    srealm srealm_field;
    sname sname_field;
    caddr caddr_field;
};

class OSS_PUBLIC __seqof8 : public OssList  /* SEQUENCE OF */
{
public:
    typedef KrbCredInfo component;

    __seqof8();
    __seqof8(const __seqof8 &);
    ~__seqof8();

    __seqof8 & operator = (const __seqof8 &);
    int operator == (const __seqof8 &) const;
    int operator != (const __seqof8 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof8 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof8 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof8 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC EncKrbCredPart   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __seqof8 ticket_info;
    typedef OSS_UINT32 nonce;
    typedef OssGeneralizedTime timestamp;
    typedef OSS_UINT32 usec;
    typedef HostAddress s_address;
    typedef HostAddress r_address;

    EncKrbCredPart();
    EncKrbCredPart(const EncKrbCredPart &);
    EncKrbCredPart(const ticket_info &, nonce, const timestamp &, usec, const s_address &, 
	const r_address &);
    EncKrbCredPart(const ticket_info &);

    EncKrbCredPart & operator = (const EncKrbCredPart &);
    int operator == (const EncKrbCredPart &) const;
    int operator != (const EncKrbCredPart &) const;

    ticket_info & get_ticket_info();
    const ticket_info & get_ticket_info() const;
    void set_ticket_info(const ticket_info &);

    nonce *get_nonce();
    const nonce *get_nonce() const;
    void set_nonce(nonce);
    int nonce_is_present() const;
    void omit_nonce();

    timestamp *get_timestamp();
    const timestamp *get_timestamp() const;
    void set_timestamp(const timestamp &);
    int timestamp_is_present() const;
    void omit_timestamp();

    usec *get_usec();
    const usec *get_usec() const;
    void set_usec(usec);
    int usec_is_present() const;
    void omit_usec();

    s_address *get_s_address();
    const s_address *get_s_address() const;
    void set_s_address(const s_address &);
    int s_address_is_present() const;
    void omit_s_address();

    r_address *get_r_address();
    const r_address *get_r_address() const;
    void set_r_address(const r_address &);
    int r_address_is_present() const;
    void omit_r_address();
private:
    OSS_UINT32 bit_mask;
    ticket_info ticket_info_field;
    nonce nonce_field;
    timestamp timestamp_field;
    usec usec_field;
    s_address s_address_field;
    r_address r_address_field;
};

class OSS_PUBLIC KRB_ERROR   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 pvno;
    typedef OSS_UINT32 msg_type;
    typedef OssGeneralizedTime ctime;
    typedef OSS_UINT32 cusec;
    typedef OssGeneralizedTime stime;
    typedef OSS_UINT32 susec;
    typedef OSS_INT32 error_code;
    typedef OssString crealm;
    typedef PrincipalName cname;
    typedef OssString realm;
    typedef PrincipalName sname;
    typedef OssString e_text;
    typedef OssString e_data;

    KRB_ERROR();
    KRB_ERROR(const KRB_ERROR &);
    KRB_ERROR(pvno, msg_type, const ctime &, cusec, const stime &, susec, error_code, 
	const crealm &, const cname &, const realm &, const sname &, const e_text &, const e_data &);
    KRB_ERROR(pvno, msg_type, const stime &, susec, error_code, const realm &, const sname &);

    KRB_ERROR & operator = (const KRB_ERROR &);
    int operator == (const KRB_ERROR &) const;
    int operator != (const KRB_ERROR &) const;

    pvno & get_pvno();
    pvno get_pvno() const;
    void set_pvno(pvno);

    msg_type & get_msg_type();
    msg_type get_msg_type() const;
    void set_msg_type(msg_type);

    ctime *get_ctime();
    const ctime *get_ctime() const;
    void set_ctime(const ctime &);
    int ctime_is_present() const;
    void omit_ctime();

    cusec *get_cusec();
    const cusec *get_cusec() const;
    void set_cusec(cusec);
    int cusec_is_present() const;
    void omit_cusec();

    stime & get_stime();
    const stime & get_stime() const;
    void set_stime(const stime &);

    susec & get_susec();
    susec get_susec() const;
    void set_susec(susec);

    error_code & get_error_code();
    error_code get_error_code() const;
    void set_error_code(error_code);

    crealm *get_crealm();
    const crealm *get_crealm() const;
    void set_crealm(const crealm &);
    int crealm_is_present() const;
    void omit_crealm();

    cname *get_cname();
    const cname *get_cname() const;
    void set_cname(const cname &);
    int cname_is_present() const;
    void omit_cname();

    realm & get_realm();
    const realm & get_realm() const;
    void set_realm(const realm &);

    sname & get_sname();
    const sname & get_sname() const;
    void set_sname(const sname &);

    e_text *get_e_text();
    const e_text *get_e_text() const;
    void set_e_text(const e_text &);
    int e_text_is_present() const;
    void omit_e_text();

    e_data *get_e_data();
    const e_data *get_e_data() const;
    void set_e_data(const e_data &);
    int e_data_is_present() const;
    void omit_e_data();
private:
    OSS_UINT32 bit_mask;
    pvno pvno_field;
    msg_type msg_type_field;
    ctime ctime_field;
    cusec cusec_field;
    stime stime_field;
    susec susec_field;
    error_code error_code_field;
    crealm crealm_field;
    cname cname_field;
    realm realm_field;
    sname sname_field;
    e_text e_text_field;
    e_data e_data_field;
};

typedef __shared5 METHOD_DATA;

class OSS_PUBLIC __seq3;

class OSS_PUBLIC TYPED_DATA : public OssList  /* SEQUENCE OF */
{
public:
    typedef __seq3 component;

    TYPED_DATA();
    TYPED_DATA(const TYPED_DATA &);
    ~TYPED_DATA();

    TYPED_DATA & operator = (const TYPED_DATA &);
    int operator == (const TYPED_DATA &) const;
    int operator != (const TYPED_DATA &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(TYPED_DATA *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, TYPED_DATA *);

    int remove_front();
    int remove_after(OssIndex);

    TYPED_DATA *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 data_type;
    typedef OssString data_value;

    __seq3();
    __seq3(const __seq3 &);
    __seq3(data_type, const data_value &);
    __seq3(data_type);

    __seq3 & operator = (const __seq3 &);
    int operator == (const __seq3 &) const;
    int operator != (const __seq3 &) const;

    data_type & get_data_type();
    data_type get_data_type() const;
    void set_data_type(data_type);

    data_value *get_data_value();
    const data_value *get_data_value() const;
    void set_data_value(const data_value &);
    int data_value_is_present() const;
    void omit_data_value();
private:
    OSS_UINT32 bit_mask;
    data_type data_type_field;
    data_value data_value_field;
};

typedef __shared3 PA_ENC_TIMESTAMP;

class OSS_PUBLIC PA_ENC_TS_ENC   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssGeneralizedTime patimestamp;
    typedef OSS_UINT32 pausec;

    PA_ENC_TS_ENC();
    PA_ENC_TS_ENC(const PA_ENC_TS_ENC &);
    PA_ENC_TS_ENC(const patimestamp &, pausec);
    PA_ENC_TS_ENC(const patimestamp &);

    PA_ENC_TS_ENC & operator = (const PA_ENC_TS_ENC &);
    int operator == (const PA_ENC_TS_ENC &) const;
    int operator != (const PA_ENC_TS_ENC &) const;

    patimestamp & get_patimestamp();
    const patimestamp & get_patimestamp() const;
    void set_patimestamp(const patimestamp &);

    pausec *get_pausec();
    const pausec *get_pausec() const;
    void set_pausec(pausec);
    int pausec_is_present() const;
    void omit_pausec();
private:
    OSS_UINT32 bit_mask;
    patimestamp patimestamp_field;
    pausec pausec_field;
};

class OSS_PUBLIC ETYPE_INFO_ENTRY   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 etype;
    typedef OssString salt;

    ETYPE_INFO_ENTRY();
    ETYPE_INFO_ENTRY(const ETYPE_INFO_ENTRY &);
    ETYPE_INFO_ENTRY(etype, const salt &);
    ETYPE_INFO_ENTRY(etype);

    ETYPE_INFO_ENTRY & operator = (const ETYPE_INFO_ENTRY &);
    int operator == (const ETYPE_INFO_ENTRY &) const;
    int operator != (const ETYPE_INFO_ENTRY &) const;

    etype & get_etype();
    etype get_etype() const;
    void set_etype(etype);

    salt *get_salt();
    const salt *get_salt() const;
    void set_salt(const salt &);
    int salt_is_present() const;
    void omit_salt();
private:
    OSS_UINT32 bit_mask;
    etype etype_field;
    salt salt_field;
};

class OSS_PUBLIC ETYPE_INFO : public OssList  /* SEQUENCE OF */
{
public:
    typedef ETYPE_INFO_ENTRY component;

    ETYPE_INFO();
    ETYPE_INFO(const ETYPE_INFO &);
    ~ETYPE_INFO();

    ETYPE_INFO & operator = (const ETYPE_INFO &);
    int operator == (const ETYPE_INFO &) const;
    int operator != (const ETYPE_INFO &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(ETYPE_INFO *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, ETYPE_INFO *);

    int remove_front();
    int remove_after(OssIndex);

    ETYPE_INFO *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC ETYPE_INFO2_ENTRY   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 etype;
    typedef OssString salt;
    typedef OssString s2kparams;

    ETYPE_INFO2_ENTRY();
    ETYPE_INFO2_ENTRY(const ETYPE_INFO2_ENTRY &);
    ETYPE_INFO2_ENTRY(etype, const salt &, const s2kparams &);
    ETYPE_INFO2_ENTRY(etype);

    ETYPE_INFO2_ENTRY & operator = (const ETYPE_INFO2_ENTRY &);
    int operator == (const ETYPE_INFO2_ENTRY &) const;
    int operator != (const ETYPE_INFO2_ENTRY &) const;

    etype & get_etype();
    etype get_etype() const;
    void set_etype(etype);

    salt *get_salt();
    const salt *get_salt() const;
    void set_salt(const salt &);
    int salt_is_present() const;
    void omit_salt();

    s2kparams *get_s2kparams();
    const s2kparams *get_s2kparams() const;
    void set_s2kparams(const s2kparams &);
    int s2kparams_is_present() const;
    void omit_s2kparams();
private:
    OSS_UINT32 bit_mask;
    etype etype_field;
    salt salt_field;
    s2kparams s2kparams_field;
};

class OSS_PUBLIC ETYPE_INFO2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef ETYPE_INFO2_ENTRY component;

    ETYPE_INFO2();
    ETYPE_INFO2(const ETYPE_INFO2 &);
    ~ETYPE_INFO2();

    ETYPE_INFO2 & operator = (const ETYPE_INFO2 &);
    int operator == (const ETYPE_INFO2 &) const;
    int operator != (const ETYPE_INFO2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(ETYPE_INFO2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, ETYPE_INFO2 *);

    int remove_front();
    int remove_after(OssIndex);

    ETYPE_INFO2 *extract_after(OssIndex, OssIndex);
};

typedef __shared2 AD_IF_RELEVANT;

class OSS_PUBLIC AD_KDCIssued   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef Checksum ad_checksum;
    typedef OssString i_realm;
    typedef PrincipalName i_sname;
    typedef __shared2 elements;

    AD_KDCIssued();
    AD_KDCIssued(const AD_KDCIssued &);
    AD_KDCIssued(const ad_checksum &, const i_realm &, const i_sname &, const elements &);
    AD_KDCIssued(const ad_checksum &, const elements &);

    AD_KDCIssued & operator = (const AD_KDCIssued &);
    int operator == (const AD_KDCIssued &) const;
    int operator != (const AD_KDCIssued &) const;

    ad_checksum & get_ad_checksum();
    const ad_checksum & get_ad_checksum() const;
    void set_ad_checksum(const ad_checksum &);

    i_realm *get_i_realm();
    const i_realm *get_i_realm() const;
    void set_i_realm(const i_realm &);
    int i_realm_is_present() const;
    void omit_i_realm();

    i_sname *get_i_sname();
    const i_sname *get_i_sname() const;
    void set_i_sname(const i_sname &);
    int i_sname_is_present() const;
    void omit_i_sname();

    elements & get_elements();
    const elements & get_elements() const;
    void set_elements(const elements &);
private:
    OSS_UINT32 bit_mask;
    ad_checksum ad_checksum_field;
    i_realm i_realm_field;
    i_sname i_sname_field;
    elements elements_field;
};

class OSS_PUBLIC AD_AND_OR   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 condition_count;
    typedef __shared2 elements;

    AD_AND_OR();
    AD_AND_OR(const AD_AND_OR &);
    AD_AND_OR(condition_count, const elements &);

    AD_AND_OR & operator = (const AD_AND_OR &);
    int operator == (const AD_AND_OR &) const;
    int operator != (const AD_AND_OR &) const;

    condition_count & get_condition_count();
    condition_count get_condition_count() const;
    void set_condition_count(condition_count);

    elements & get_elements();
    const elements & get_elements() const;
    void set_elements(const elements &);
private:
    condition_count condition_count_field;
    elements elements_field;
};

typedef __shared2 AD_MANDATORY_FOR_KDC;

class OSS_PUBLIC ChangePasswdData   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString newpasswd;
    typedef PrincipalName targname;
    typedef OssString targrealm;

    ChangePasswdData();
    ChangePasswdData(const ChangePasswdData &);
    ChangePasswdData(const newpasswd &, const targname &, const targrealm &);
    ChangePasswdData(const newpasswd &);

    ChangePasswdData & operator = (const ChangePasswdData &);
    int operator == (const ChangePasswdData &) const;
    int operator != (const ChangePasswdData &) const;

    newpasswd & get_newpasswd();
    const newpasswd & get_newpasswd() const;
    void set_newpasswd(const newpasswd &);

    targname *get_targname();
    const targname *get_targname() const;
    void set_targname(const targname &);
    int targname_is_present() const;
    void omit_targname();

    targrealm *get_targrealm();
    const targrealm *get_targrealm() const;
    void set_targrealm(const targrealm &);
    int targrealm_is_present() const;
    void omit_targrealm();
private:
    OSS_UINT32 bit_mask;
    newpasswd newpasswd_field;
    targname targname_field;
    targrealm targrealm_field;
};

class OSS_PUBLIC ExternalPrincipalIdentifier   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString subjectName;
    typedef OssString issuerAndSerialNumber;
    typedef OssString subjectKeyIdentifier;

    ExternalPrincipalIdentifier();
    ExternalPrincipalIdentifier(const ExternalPrincipalIdentifier &);
    ExternalPrincipalIdentifier(const subjectName &, const issuerAndSerialNumber &, 
	const subjectKeyIdentifier &);

    ExternalPrincipalIdentifier & operator = (const ExternalPrincipalIdentifier &);
    int operator == (const ExternalPrincipalIdentifier &) const;
    int operator != (const ExternalPrincipalIdentifier &) const;

    subjectName *get_subjectName();
    const subjectName *get_subjectName() const;
    void set_subjectName(const subjectName &);
    int subjectName_is_present() const;
    void omit_subjectName();

    issuerAndSerialNumber *get_issuerAndSerialNumber();
    const issuerAndSerialNumber *get_issuerAndSerialNumber() const;
    void set_issuerAndSerialNumber(const issuerAndSerialNumber &);
    int issuerAndSerialNumber_is_present() const;
    void omit_issuerAndSerialNumber();

    subjectKeyIdentifier *get_subjectKeyIdentifier();
    const subjectKeyIdentifier *get_subjectKeyIdentifier() const;
    void set_subjectKeyIdentifier(const subjectKeyIdentifier &);
    int subjectKeyIdentifier_is_present() const;
    void omit_subjectKeyIdentifier();
private:
    OSS_UINT32 bit_mask;
    subjectName subjectName_field;
    issuerAndSerialNumber issuerAndSerialNumber_field;
    subjectKeyIdentifier subjectKeyIdentifier_field;
};

class OSS_PUBLIC __shared11 : public OssList  /* SEQUENCE OF */
{
public:
    typedef ExternalPrincipalIdentifier component;

    __shared11();
    __shared11(const __shared11 &);
    ~__shared11();

    __shared11 & operator = (const __shared11 &);
    int operator == (const __shared11 &) const;
    int operator != (const __shared11 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared11 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared11 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared11 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC PA_PK_AS_REQ   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString signedAuthPack;
    typedef __shared11 trustedCertifiers;
    typedef OssString kdcPkId;

    PA_PK_AS_REQ();
    PA_PK_AS_REQ(const PA_PK_AS_REQ &);
    PA_PK_AS_REQ(const signedAuthPack &, const trustedCertifiers &, const kdcPkId &);
    PA_PK_AS_REQ(const signedAuthPack &);

    PA_PK_AS_REQ & operator = (const PA_PK_AS_REQ &);
    int operator == (const PA_PK_AS_REQ &) const;
    int operator != (const PA_PK_AS_REQ &) const;

    signedAuthPack & get_signedAuthPack();
    const signedAuthPack & get_signedAuthPack() const;
    void set_signedAuthPack(const signedAuthPack &);

    trustedCertifiers *get_trustedCertifiers();
    const trustedCertifiers *get_trustedCertifiers() const;
    void set_trustedCertifiers(const trustedCertifiers &);
    int trustedCertifiers_is_present() const;
    void omit_trustedCertifiers();

    kdcPkId *get_kdcPkId();
    const kdcPkId *get_kdcPkId() const;
    void set_kdcPkId(const kdcPkId &);
    int kdcPkId_is_present() const;
    void omit_kdcPkId();
private:
    OSS_UINT32 bit_mask;
    signedAuthPack signedAuthPack_field;
    trustedCertifiers trustedCertifiers_field;
    kdcPkId kdcPkId_field;
};

typedef OssString DHNonce;

class OSS_PUBLIC PKAuthenticator   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 cusec;
    typedef OssGeneralizedTime ctime;
    typedef OSS_UINT32 nonce;
    typedef OssString paChecksum;

    PKAuthenticator();
    PKAuthenticator(const PKAuthenticator &);
    PKAuthenticator(cusec, const ctime &, nonce, const paChecksum &);
    PKAuthenticator(cusec, const ctime &, nonce);

    PKAuthenticator & operator = (const PKAuthenticator &);
    int operator == (const PKAuthenticator &) const;
    int operator != (const PKAuthenticator &) const;

    cusec & get_cusec();
    cusec get_cusec() const;
    void set_cusec(cusec);

    ctime & get_ctime();
    const ctime & get_ctime() const;
    void set_ctime(const ctime &);

    nonce & get_nonce();
    nonce get_nonce() const;
    void set_nonce(nonce);

    paChecksum *get_paChecksum();
    const paChecksum *get_paChecksum() const;
    void set_paChecksum(const paChecksum &);
    int paChecksum_is_present() const;
    void omit_paChecksum();
private:
    OSS_UINT32 bit_mask;
    cusec cusec_field;
    ctime ctime_field;
    nonce nonce_field;
    paChecksum paChecksum_field;
};

class OSS_PUBLIC AlgorithmIdentifier   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID algorithm;
    typedef OssString parameters;

    AlgorithmIdentifier();
    AlgorithmIdentifier(const AlgorithmIdentifier &);
    AlgorithmIdentifier(const algorithm &, const parameters &);
    AlgorithmIdentifier(const algorithm &);

    AlgorithmIdentifier & operator = (const AlgorithmIdentifier &);
    int operator == (const AlgorithmIdentifier &) const;
    int operator != (const AlgorithmIdentifier &) const;

    algorithm & get_algorithm();
    const algorithm & get_algorithm() const;
    void set_algorithm(const algorithm &);

    parameters *get_parameters();
    const parameters *get_parameters() const;
    void set_parameters(const parameters &);
    int parameters_is_present() const;
    void omit_parameters();
private:
    OSS_UINT32 bit_mask;
    algorithm algorithm_field;
    parameters parameters_field;
};

class OSS_PUBLIC SubjectPublicKeyInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef AlgorithmIdentifier algorithm;
    typedef OssBitString subjectPublicKey;

    SubjectPublicKeyInfo();
    SubjectPublicKeyInfo(const SubjectPublicKeyInfo &);
    SubjectPublicKeyInfo(const algorithm &, const subjectPublicKey &);

    SubjectPublicKeyInfo & operator = (const SubjectPublicKeyInfo &);
    int operator == (const SubjectPublicKeyInfo &) const;
    int operator != (const SubjectPublicKeyInfo &) const;

    algorithm & get_algorithm();
    const algorithm & get_algorithm() const;
    void set_algorithm(const algorithm &);

    subjectPublicKey & get_subjectPublicKey();
    const subjectPublicKey & get_subjectPublicKey() const;
    void set_subjectPublicKey(const subjectPublicKey &);
private:
    algorithm algorithm_field;
    subjectPublicKey subjectPublicKey_field;
};

class OSS_PUBLIC __shared12 : public OssList  /* SEQUENCE OF */
{
public:
    typedef AlgorithmIdentifier component;

    __shared12();
    __shared12(const __shared12 &);
    ~__shared12();

    __shared12 & operator = (const __shared12 &);
    int operator == (const __shared12 &) const;
    int operator != (const __shared12 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared12 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared12 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared12 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC AuthPack   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef PKAuthenticator pkAuthenticator;
    typedef SubjectPublicKeyInfo clientPublicValue;
    typedef __shared12 supportedCMSTypes;
    typedef OssString clientDHNonce;

    AuthPack();
    AuthPack(const AuthPack &);
    AuthPack(const pkAuthenticator &, const clientPublicValue &, const supportedCMSTypes &, 
	const clientDHNonce &);
    AuthPack(const pkAuthenticator &);

    AuthPack & operator = (const AuthPack &);
    int operator == (const AuthPack &) const;
    int operator != (const AuthPack &) const;

    pkAuthenticator & get_pkAuthenticator();
    const pkAuthenticator & get_pkAuthenticator() const;
    void set_pkAuthenticator(const pkAuthenticator &);

    clientPublicValue *get_clientPublicValue();
    const clientPublicValue *get_clientPublicValue() const;
    void set_clientPublicValue(const clientPublicValue &);
    int clientPublicValue_is_present() const;
    void omit_clientPublicValue();

    supportedCMSTypes *get_supportedCMSTypes();
    const supportedCMSTypes *get_supportedCMSTypes() const;
    void set_supportedCMSTypes(const supportedCMSTypes &);
    int supportedCMSTypes_is_present() const;
    void omit_supportedCMSTypes();

    clientDHNonce *get_clientDHNonce();
    const clientDHNonce *get_clientDHNonce() const;
    void set_clientDHNonce(const clientDHNonce &);
    int clientDHNonce_is_present() const;
    void omit_clientDHNonce();
private:
    OSS_UINT32 bit_mask;
    pkAuthenticator pkAuthenticator_field;
    clientPublicValue clientPublicValue_field;
    supportedCMSTypes supportedCMSTypes_field;
    clientDHNonce clientDHNonce_field;
};

typedef __shared11 TD_TRUSTED_CERTIFIERS;

typedef __shared11 TD_INVALID_CERTIFICATES;

class OSS_PUBLIC KRB5PrincipalName   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString realm;
    typedef PrincipalName principalName;

    KRB5PrincipalName();
    KRB5PrincipalName(const KRB5PrincipalName &);
    KRB5PrincipalName(const realm &, const principalName &);

    KRB5PrincipalName & operator = (const KRB5PrincipalName &);
    int operator == (const KRB5PrincipalName &) const;
    int operator != (const KRB5PrincipalName &) const;

    realm & get_realm();
    const realm & get_realm() const;
    void set_realm(const realm &);

    principalName & get_principalName();
    const principalName & get_principalName() const;
    void set_principalName(const principalName &);
private:
    realm realm_field;
    principalName principalName_field;
};

typedef __shared11 AD_INITIAL_VERIFIED_CAS;

class OSS_PUBLIC DHRepInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString dhSignedData;
    typedef OssString serverDHNonce;

    DHRepInfo();
    DHRepInfo(const DHRepInfo &);
    DHRepInfo(const dhSignedData &, const serverDHNonce &);
    DHRepInfo(const dhSignedData &);

    DHRepInfo & operator = (const DHRepInfo &);
    int operator == (const DHRepInfo &) const;
    int operator != (const DHRepInfo &) const;

    dhSignedData & get_dhSignedData();
    const dhSignedData & get_dhSignedData() const;
    void set_dhSignedData(const dhSignedData &);

    serverDHNonce *get_serverDHNonce();
    const serverDHNonce *get_serverDHNonce() const;
    void set_serverDHNonce(const serverDHNonce &);
    int serverDHNonce_is_present() const;
    void omit_serverDHNonce();
private:
    OSS_UINT32 bit_mask;
    dhSignedData dhSignedData_field;
    serverDHNonce serverDHNonce_field;
};

class OSS_PUBLIC PA_PK_AS_REP  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	dhInfo_chosen = 1,
	encKeyPack_chosen = 2
    };
    typedef DHRepInfo dhInfo;
    typedef OssString encKeyPack;

    PA_PK_AS_REP();
    PA_PK_AS_REP(const PA_PK_AS_REP &);
    ~PA_PK_AS_REP();

    PA_PK_AS_REP & operator = (const PA_PK_AS_REP &);
    int operator == (const PA_PK_AS_REP &) const;
    int operator != (const PA_PK_AS_REP &) const;

    dhInfo *get_dhInfo();
    const dhInfo *get_dhInfo() const;
    void set_dhInfo(const dhInfo &);

    encKeyPack *get_encKeyPack();
    const encKeyPack *get_encKeyPack() const;
    void set_encKeyPack(const encKeyPack &);
private:
    union {
	dhInfo *dhInfo_field;
	OSSC::COssString encKeyPack_field;
    };
    void cleanup();
};

class OSS_PUBLIC KDCDHKeyInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString subjectPublicKey;
    typedef OSS_UINT32 nonce;
    typedef OssGeneralizedTime dhKeyExpiration;

    KDCDHKeyInfo();
    KDCDHKeyInfo(const KDCDHKeyInfo &);
    KDCDHKeyInfo(const subjectPublicKey &, nonce, const dhKeyExpiration &);
    KDCDHKeyInfo(const subjectPublicKey &, nonce);

    KDCDHKeyInfo & operator = (const KDCDHKeyInfo &);
    int operator == (const KDCDHKeyInfo &) const;
    int operator != (const KDCDHKeyInfo &) const;

    subjectPublicKey & get_subjectPublicKey();
    const subjectPublicKey & get_subjectPublicKey() const;
    void set_subjectPublicKey(const subjectPublicKey &);

    nonce & get_nonce();
    nonce get_nonce() const;
    void set_nonce(nonce);

    dhKeyExpiration *get_dhKeyExpiration();
    const dhKeyExpiration *get_dhKeyExpiration() const;
    void set_dhKeyExpiration(const dhKeyExpiration &);
    int dhKeyExpiration_is_present() const;
    void omit_dhKeyExpiration();
private:
    subjectPublicKey subjectPublicKey_field;
    nonce nonce_field;
    dhKeyExpiration dhKeyExpiration_field;
};

class OSS_PUBLIC ReplyKeyPack   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef EncryptionKey replyKey;
    typedef Checksum asChecksum;

    ReplyKeyPack();
    ReplyKeyPack(const ReplyKeyPack &);
    ReplyKeyPack(const replyKey &, const asChecksum &);

    ReplyKeyPack & operator = (const ReplyKeyPack &);
    int operator == (const ReplyKeyPack &) const;
    int operator != (const ReplyKeyPack &) const;

    replyKey & get_replyKey();
    const replyKey & get_replyKey() const;
    void set_replyKey(const replyKey &);

    asChecksum & get_asChecksum();
    const asChecksum & get_asChecksum() const;
    void set_asChecksum(const asChecksum &);
private:
    replyKey replyKey_field;
    asChecksum asChecksum_field;
};

typedef __shared12 TD_DH_PARAMETERS;

typedef OssEncOID AttributeType;

typedef OssString AttributeValue;

class OSS_PUBLIC Attribute   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type;
    typedef __shared1 values;

    Attribute();
    Attribute(const Attribute &);
    Attribute(const type &, const values &);

    Attribute & operator = (const Attribute &);
    int operator == (const Attribute &) const;
    int operator != (const Attribute &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    values & get_values();
    const values & get_values() const;
    void set_values(const values &);
private:
    type type_field;
    values values_field;
};

class OSS_PUBLIC AttributeTypeAndValue   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type;
    typedef OssString value;

    AttributeTypeAndValue();
    AttributeTypeAndValue(const AttributeTypeAndValue &);
    AttributeTypeAndValue(const type &, const value &);

    AttributeTypeAndValue & operator = (const AttributeTypeAndValue &);
    int operator == (const AttributeTypeAndValue &) const;
    int operator != (const AttributeTypeAndValue &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type type_field;
    value value_field;
};

class OSS_PUBLIC __shared13  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	teletexString_chosen = 1,
	printableString_chosen = 2,
	universalString_chosen = 3,
	utf8String_chosen = 4,
	bmpString_chosen = 5
    };
    typedef OssString teletexString;
    typedef OssString printableString;
    typedef OssUniversalString universalString;
    typedef OssString utf8String;
    typedef OssBMPString bmpString;

    __shared13();
    __shared13(const __shared13 &);
    ~__shared13();

    __shared13 & operator = (const __shared13 &);
    int operator == (const __shared13 &) const;
    int operator != (const __shared13 &) const;

    teletexString *get_teletexString();
    const teletexString *get_teletexString() const;
    void set_teletexString(const teletexString &);

    printableString *get_printableString();
    const printableString *get_printableString() const;
    void set_printableString(const printableString &);

    universalString *get_universalString();
    const universalString *get_universalString() const;
    void set_universalString(const universalString &);

    utf8String *get_utf8String();
    const utf8String *get_utf8String() const;
    void set_utf8String(const utf8String &);

    bmpString *get_bmpString();
    const bmpString *get_bmpString() const;
    void set_bmpString(const bmpString &);
private:
    union {
	OSSC::COssString teletexString_field;
	OSSC::COssString printableString_field;
	OSSC::COssUniversalString universalString_field;
	OSSC::COssString utf8String_field;
	OSSC::COssBMPString bmpString_field;
    };
    void cleanup();
};

typedef __shared13 X520name;

typedef __shared13 X520CommonName;

typedef __shared13 X520LocalityName;

typedef __shared13 X520StateOrProvinceName;

typedef __shared13 X520OrganizationName;

typedef __shared13 X520OrganizationalUnitName;

typedef __shared13 X520Title;

typedef OssString X520dnQualifier;

typedef OssString X520countryName;

typedef OssString X520SerialNumber;

typedef __shared13 X520Pseudonym;

typedef OssString DomainComponent;

typedef OssString EmailAddress;

class OSS_PUBLIC RelativeDistinguishedName;

class OSS_PUBLIC __shared14 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RelativeDistinguishedName component;

    __shared14();
    __shared14(const __shared14 &);
    ~__shared14();

    __shared14 & operator = (const __shared14 &);
    int operator == (const __shared14 &) const;
    int operator != (const __shared14 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared14 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared14 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared14 *extract_after(OssIndex, OssIndex);
};

typedef __shared14 RDNSequence;

class OSS_PUBLIC Name  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	rdnSequence_chosen = 1
    };
    typedef __shared14 rdnSequence;

    Name();
    Name(const Name &);
    ~Name();

    Name & operator = (const Name &);
    int operator == (const Name &) const;
    int operator != (const Name &) const;

    rdnSequence *get_rdnSequence();
    const rdnSequence *get_rdnSequence() const;
    void set_rdnSequence(const rdnSequence &);
private:
    union {
	void *rdnSequence_field;
    };
    void cleanup();
};

typedef __shared14 DistinguishedName;

class OSS_PUBLIC RelativeDistinguishedName : public OssList  /* SET OF */
{
public:
    typedef AttributeTypeAndValue component;

    RelativeDistinguishedName();
    RelativeDistinguishedName(const RelativeDistinguishedName &);
    ~RelativeDistinguishedName();

    RelativeDistinguishedName & operator = (const RelativeDistinguishedName &);
    int operator == (const RelativeDistinguishedName &) const;
    int operator != (const RelativeDistinguishedName &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(RelativeDistinguishedName *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, RelativeDistinguishedName *);

    int remove_front();
    int remove_after(OssIndex);

    RelativeDistinguishedName *extract_after(OssIndex, OssIndex);
};

typedef __shared13 DirectoryString;

typedef OSS_INT32 Version;

typedef OSS_INT32 CertificateSerialNumber;

class OSS_PUBLIC Time  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	utcTime_chosen = 1,
	generalTime_chosen = 2
    };
    typedef OssUTCTime utcTime;
    typedef OssGeneralizedTime generalTime;

    Time();
    Time(const Time &);
    ~Time();

    Time & operator = (const Time &);
    int operator == (const Time &) const;
    int operator != (const Time &) const;

    utcTime *get_utcTime();
    const utcTime *get_utcTime() const;
    void set_utcTime(const utcTime &);

    generalTime *get_generalTime();
    const generalTime *get_generalTime() const;
    void set_generalTime(const generalTime &);
private:
    union {
	char *utcTime_field;
	char *generalTime_field;
    };
    void cleanup();
};

class OSS_PUBLIC Validity   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef Time notBefore;
    typedef Time notAfter;

    Validity();
    Validity(const Validity &);
    Validity(const notBefore &, const notAfter &);

    Validity & operator = (const Validity &);
    int operator == (const Validity &) const;
    int operator != (const Validity &) const;

    notBefore & get_notBefore();
    const notBefore & get_notBefore() const;
    void set_notBefore(const notBefore &);

    notAfter & get_notAfter();
    const notAfter & get_notAfter() const;
    void set_notAfter(const notAfter &);
private:
    notBefore notBefore_field;
    notAfter notAfter_field;
};

typedef OssBitString UniqueIdentifier;

class OSS_PUBLIC Extension;

class OSS_PUBLIC __shared15 : public OssList  /* SEQUENCE OF */
{
public:
    typedef Extension component;

    __shared15();
    __shared15(const __shared15 &);
    ~__shared15();

    __shared15 & operator = (const __shared15 &);
    int operator == (const __shared15 &) const;
    int operator != (const __shared15 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared15 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared15 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared15 *extract_after(OssIndex, OssIndex);
};

typedef __shared15 Extensions;

class OSS_PUBLIC TBSCertificate   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 version;
    typedef OSS_INT32 serialNumber;
    typedef AlgorithmIdentifier signature;
    typedef Name issuer;
    typedef Validity validity;
    typedef Name subject;
    typedef SubjectPublicKeyInfo subjectPublicKeyInfo;
    typedef OssBitString issuerUniqueID;
    typedef OssBitString subjectUniqueID;
    typedef __shared15 extensions;

    static const version default_version;

    static version get_default_version();

    TBSCertificate();
    TBSCertificate(const TBSCertificate &);
    TBSCertificate(version, serialNumber, const signature &, const issuer &, const validity &, 
	const subject &, const subjectPublicKeyInfo &, const issuerUniqueID &, const subjectUniqueID &, 
	const extensions &);
    TBSCertificate(serialNumber, const signature &, const issuer &, const validity &, 
	const subject &, const subjectPublicKeyInfo &);

    TBSCertificate & operator = (const TBSCertificate &);
    int operator == (const TBSCertificate &) const;
    int operator != (const TBSCertificate &) const;

    version *get_version();
    const version *get_version() const;
    void set_version(version);
    int version_is_default() const;
    void set_default_version();

    serialNumber & get_serialNumber();
    serialNumber get_serialNumber() const;
    void set_serialNumber(serialNumber);

    signature & get_signature();
    const signature & get_signature() const;
    void set_signature(const signature &);

    issuer & get_issuer();
    const issuer & get_issuer() const;
    void set_issuer(const issuer &);

    validity & get_validity();
    const validity & get_validity() const;
    void set_validity(const validity &);

    subject & get_subject();
    const subject & get_subject() const;
    void set_subject(const subject &);

    subjectPublicKeyInfo & get_subjectPublicKeyInfo();
    const subjectPublicKeyInfo & get_subjectPublicKeyInfo() const;
    void set_subjectPublicKeyInfo(const subjectPublicKeyInfo &);

    issuerUniqueID *get_issuerUniqueID();
    const issuerUniqueID *get_issuerUniqueID() const;
    void set_issuerUniqueID(const issuerUniqueID &);
    int issuerUniqueID_is_present() const;
    void omit_issuerUniqueID();

    subjectUniqueID *get_subjectUniqueID();
    const subjectUniqueID *get_subjectUniqueID() const;
    void set_subjectUniqueID(const subjectUniqueID &);
    int subjectUniqueID_is_present() const;
    void omit_subjectUniqueID();

    extensions *get_extensions();
    const extensions *get_extensions() const;
    void set_extensions(const extensions &);
    int extensions_is_present() const;
    void omit_extensions();
private:
    OSS_UINT32 bit_mask;
    version version_field;
    serialNumber serialNumber_field;
    signature signature_field;
    issuer issuer_field;
    validity validity_field;
    subject subject_field;
    subjectPublicKeyInfo subjectPublicKeyInfo_field;
    issuerUniqueID issuerUniqueID_field;
    subjectUniqueID subjectUniqueID_field;
    extensions extensions_field;
};

class OSS_PUBLIC Certificate   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef TBSCertificate tbsCertificate;
    typedef AlgorithmIdentifier signatureAlgorithm;
    typedef OssBitString signature;

    Certificate();
    Certificate(const Certificate &);
    Certificate(const tbsCertificate &, const signatureAlgorithm &, const signature &);

    Certificate & operator = (const Certificate &);
    int operator == (const Certificate &) const;
    int operator != (const Certificate &) const;

    tbsCertificate & get_tbsCertificate();
    const tbsCertificate & get_tbsCertificate() const;
    void set_tbsCertificate(const tbsCertificate &);

    signatureAlgorithm & get_signatureAlgorithm();
    const signatureAlgorithm & get_signatureAlgorithm() const;
    void set_signatureAlgorithm(const signatureAlgorithm &);

    signature & get_signature();
    const signature & get_signature() const;
    void set_signature(const signature &);
private:
    tbsCertificate tbsCertificate_field;
    signatureAlgorithm signatureAlgorithm_field;
    signature signature_field;
};

class OSS_PUBLIC Extension   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID extnID;
    typedef ossBoolean critical;
    typedef OssString extnValue;

    static const critical default_critical;

    static critical get_default_critical();

    Extension();
    Extension(const Extension &);
    Extension(const extnID &, critical, const extnValue &);
    Extension(const extnID &, const extnValue &);

    Extension & operator = (const Extension &);
    int operator == (const Extension &) const;
    int operator != (const Extension &) const;

    extnID & get_extnID();
    const extnID & get_extnID() const;
    void set_extnID(const extnID &);

    critical *get_critical();
    const critical *get_critical() const;
    void set_critical(critical);
    int critical_is_default() const;
    void set_default_critical();

    extnValue & get_extnValue();
    const extnValue & get_extnValue() const;
    void set_extnValue(const extnValue &);
private:
    OSS_UINT32 bit_mask;
    extnID extnID_field;
    critical critical_field;
    extnValue extnValue_field;
};

class OSS_PUBLIC __seq4;

class OSS_PUBLIC __seqof11 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __seq4 component;

    __seqof11();
    __seqof11(const __seqof11 &);
    ~__seqof11();

    __seqof11 & operator = (const __seqof11 &);
    int operator == (const __seqof11 &) const;
    int operator != (const __seqof11 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof11 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof11 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof11 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC TBSCertList   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 version;
    typedef AlgorithmIdentifier signature;
    typedef Name issuer;
    typedef Time thisUpdate;
    typedef Time nextUpdate;
    typedef __seqof11 revokedCertificates;
    typedef __shared15 crlExtensions;

    TBSCertList();
    TBSCertList(const TBSCertList &);
    TBSCertList(version, const signature &, const issuer &, const thisUpdate &, const nextUpdate &, 
	const revokedCertificates &, const crlExtensions &);
    TBSCertList(const signature &, const issuer &, const thisUpdate &);

    TBSCertList & operator = (const TBSCertList &);
    int operator == (const TBSCertList &) const;
    int operator != (const TBSCertList &) const;

    version *get_version();
    const version *get_version() const;
    void set_version(version);
    int version_is_present() const;
    void omit_version();

    signature & get_signature();
    const signature & get_signature() const;
    void set_signature(const signature &);

    issuer & get_issuer();
    const issuer & get_issuer() const;
    void set_issuer(const issuer &);

    thisUpdate & get_thisUpdate();
    const thisUpdate & get_thisUpdate() const;
    void set_thisUpdate(const thisUpdate &);

    nextUpdate *get_nextUpdate();
    const nextUpdate *get_nextUpdate() const;
    void set_nextUpdate(const nextUpdate &);
    int nextUpdate_is_present() const;
    void omit_nextUpdate();

    revokedCertificates *get_revokedCertificates();
    const revokedCertificates *get_revokedCertificates() const;
    void set_revokedCertificates(const revokedCertificates &);
    int revokedCertificates_is_present() const;
    void omit_revokedCertificates();

    crlExtensions *get_crlExtensions();
    const crlExtensions *get_crlExtensions() const;
    void set_crlExtensions(const crlExtensions &);
    int crlExtensions_is_present() const;
    void omit_crlExtensions();
private:
    OSS_UINT32 bit_mask;
    version version_field;
    signature signature_field;
    issuer issuer_field;
    thisUpdate thisUpdate_field;
    nextUpdate nextUpdate_field;
    revokedCertificates revokedCertificates_field;
    crlExtensions crlExtensions_field;
};

class OSS_PUBLIC __seq4   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 userCertificate;
    typedef Time revocationDate;
    typedef __shared15 crlEntryExtensions;

    __seq4();
    __seq4(const __seq4 &);
    __seq4(userCertificate, const revocationDate &, const crlEntryExtensions &);
    __seq4(userCertificate, const revocationDate &);

    __seq4 & operator = (const __seq4 &);
    int operator == (const __seq4 &) const;
    int operator != (const __seq4 &) const;

    userCertificate & get_userCertificate();
    userCertificate get_userCertificate() const;
    void set_userCertificate(userCertificate);

    revocationDate & get_revocationDate();
    const revocationDate & get_revocationDate() const;
    void set_revocationDate(const revocationDate &);

    crlEntryExtensions *get_crlEntryExtensions();
    const crlEntryExtensions *get_crlEntryExtensions() const;
    void set_crlEntryExtensions(const crlEntryExtensions &);
    int crlEntryExtensions_is_present() const;
    void omit_crlEntryExtensions();
private:
    OSS_UINT32 bit_mask;
    userCertificate userCertificate_field;
    revocationDate revocationDate_field;
    crlEntryExtensions crlEntryExtensions_field;
};

class OSS_PUBLIC CertificateList   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef TBSCertList tbsCertList;
    typedef AlgorithmIdentifier signatureAlgorithm;
    typedef OssBitString signature;

    CertificateList();
    CertificateList(const CertificateList &);
    CertificateList(const tbsCertList &, const signatureAlgorithm &, const signature &);

    CertificateList & operator = (const CertificateList &);
    int operator == (const CertificateList &) const;
    int operator != (const CertificateList &) const;

    tbsCertList & get_tbsCertList();
    const tbsCertList & get_tbsCertList() const;
    void set_tbsCertList(const tbsCertList &);

    signatureAlgorithm & get_signatureAlgorithm();
    const signatureAlgorithm & get_signatureAlgorithm() const;
    void set_signatureAlgorithm(const signatureAlgorithm &);

    signature & get_signature();
    const signature & get_signature() const;
    void set_signature(const signature &);
private:
    tbsCertList tbsCertList_field;
    signatureAlgorithm signatureAlgorithm_field;
    signature signature_field;
};

class OSS_PUBLIC __shared16  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	x121_dcc_code_chosen = 1,
	iso_3166_alpha2_code_chosen = 2
    };
    typedef OssString x121_dcc_code;
    typedef OssString iso_3166_alpha2_code;

    __shared16();
    __shared16(const __shared16 &);
    ~__shared16();

    __shared16 & operator = (const __shared16 &);
    int operator == (const __shared16 &) const;
    int operator != (const __shared16 &) const;

    x121_dcc_code *get_x121_dcc_code();
    const x121_dcc_code *get_x121_dcc_code() const;
    void set_x121_dcc_code(const x121_dcc_code &);

    iso_3166_alpha2_code *get_iso_3166_alpha2_code();
    const iso_3166_alpha2_code *get_iso_3166_alpha2_code() const;
    void set_iso_3166_alpha2_code(const iso_3166_alpha2_code &);
private:
    union {
	OSSC::COssString x121_dcc_code_field;
	OSSC::COssString iso_3166_alpha2_code_field;
    };
    void cleanup();
};

typedef __shared16 CountryName;

class OSS_PUBLIC __shared17  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	numeric_chosen = 1,
	printable_chosen = 2
    };
    typedef OssString numeric;
    typedef OssString printable;

    __shared17();
    __shared17(const __shared17 &);
    ~__shared17();

    __shared17 & operator = (const __shared17 &);
    int operator == (const __shared17 &) const;
    int operator != (const __shared17 &) const;

    numeric *get_numeric();
    const numeric *get_numeric() const;
    void set_numeric(const numeric &);

    printable *get_printable();
    const printable *get_printable() const;
    void set_printable(const printable &);
private:
    union {
	OSSC::COssString numeric_field;
	OSSC::COssString printable_field;
    };
    void cleanup();
};

typedef __shared17 AdministrationDomainName;

typedef OssString X121Address;

typedef OssString NetworkAddress;

typedef OssString TerminalIdentifier;

typedef __shared17 PrivateDomainName;

typedef OssString OrganizationName;

typedef OssString NumericUserIdentifier;

class OSS_PUBLIC __shared18   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString surname;
    typedef OssString given_name;
    typedef OssString initials;
    typedef OssString generation_qualifier;

    __shared18();
    __shared18(const __shared18 &);
    __shared18(const surname &, const given_name &, const initials &, const generation_qualifier &);
    __shared18(const surname &);

    __shared18 & operator = (const __shared18 &);
    int operator == (const __shared18 &) const;
    int operator != (const __shared18 &) const;

    surname & get_surname();
    const surname & get_surname() const;
    void set_surname(const surname &);

    given_name *get_given_name();
    const given_name *get_given_name() const;
    void set_given_name(const given_name &);
    int given_name_is_present() const;
    void omit_given_name();

    initials *get_initials();
    const initials *get_initials() const;
    void set_initials(const initials &);
    int initials_is_present() const;
    void omit_initials();

    generation_qualifier *get_generation_qualifier();
    const generation_qualifier *get_generation_qualifier() const;
    void set_generation_qualifier(const generation_qualifier &);
    int generation_qualifier_is_present() const;
    void omit_generation_qualifier();
private:
    OSS_UINT32 bit_mask;
    surname surname_field;
    given_name given_name_field;
    initials initials_field;
    generation_qualifier generation_qualifier_field;
};

typedef __shared18 PersonalName;

typedef __shared1 OrganizationalUnitNames;

class OSS_PUBLIC BuiltInStandardAttributes   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared16 country_name;
    typedef __shared17 administration_domain_name;
    typedef OssString network_address;
    typedef OssString terminal_identifier;
    typedef __shared17 private_domain_name;
    typedef OssString organization_name;
    typedef OssString numeric_user_identifier;
    typedef __shared18 personal_name;
    typedef __shared1 organizational_unit_names;

    BuiltInStandardAttributes();
    BuiltInStandardAttributes(const BuiltInStandardAttributes &);
    BuiltInStandardAttributes(const country_name &, const administration_domain_name &, 
	const network_address &, const terminal_identifier &, const private_domain_name &, 
	const organization_name &, const numeric_user_identifier &, const personal_name &, 
	const organizational_unit_names &);

    BuiltInStandardAttributes & operator = (const BuiltInStandardAttributes &);
    int operator == (const BuiltInStandardAttributes &) const;
    int operator != (const BuiltInStandardAttributes &) const;

    country_name *get_country_name();
    const country_name *get_country_name() const;
    void set_country_name(const country_name &);
    int country_name_is_present() const;
    void omit_country_name();

    administration_domain_name *get_administration_domain_name();
    const administration_domain_name *get_administration_domain_name() const;
    void set_administration_domain_name(const administration_domain_name &);
    int administration_domain_name_is_present() const;
    void omit_administration_domain_name();

    network_address *get_network_address();
    const network_address *get_network_address() const;
    void set_network_address(const network_address &);
    int network_address_is_present() const;
    void omit_network_address();

    terminal_identifier *get_terminal_identifier();
    const terminal_identifier *get_terminal_identifier() const;
    void set_terminal_identifier(const terminal_identifier &);
    int terminal_identifier_is_present() const;
    void omit_terminal_identifier();

    private_domain_name *get_private_domain_name();
    const private_domain_name *get_private_domain_name() const;
    void set_private_domain_name(const private_domain_name &);
    int private_domain_name_is_present() const;
    void omit_private_domain_name();

    organization_name *get_organization_name();
    const organization_name *get_organization_name() const;
    void set_organization_name(const organization_name &);
    int organization_name_is_present() const;
    void omit_organization_name();

    numeric_user_identifier *get_numeric_user_identifier();
    const numeric_user_identifier *get_numeric_user_identifier() const;
    void set_numeric_user_identifier(const numeric_user_identifier &);
    int numeric_user_identifier_is_present() const;
    void omit_numeric_user_identifier();

    personal_name *get_personal_name();
    const personal_name *get_personal_name() const;
    void set_personal_name(const personal_name &);
    int personal_name_is_present() const;
    void omit_personal_name();

    organizational_unit_names *get_organizational_unit_names();
    const organizational_unit_names *get_organizational_unit_names() const;
    void set_organizational_unit_names(const organizational_unit_names &);
    int organizational_unit_names_is_present() const;
    void omit_organizational_unit_names();
private:
    OSS_UINT32 bit_mask;
    country_name country_name_field;
    administration_domain_name administration_domain_name_field;
    network_address network_address_field;
    terminal_identifier terminal_identifier_field;
    private_domain_name private_domain_name_field;
    organization_name organization_name_field;
    numeric_user_identifier numeric_user_identifier_field;
    personal_name personal_name_field;
    organizational_unit_names organizational_unit_names_field;
};

class OSS_PUBLIC __shared19;

class OSS_PUBLIC __shared20 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __shared19 component;

    __shared20();
    __shared20(const __shared20 &);
    ~__shared20();

    __shared20 & operator = (const __shared20 &);
    int operator == (const __shared20 &) const;
    int operator != (const __shared20 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared20 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared20 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared20 *extract_after(OssIndex, OssIndex);
};

typedef __shared20 BuiltInDomainDefinedAttributes;

class OSS_PUBLIC ExtensionAttribute;

class OSS_PUBLIC ExtensionAttributes : public OssList  /* SET OF */
{
public:
    typedef ExtensionAttribute component;

    ExtensionAttributes();
    ExtensionAttributes(const ExtensionAttributes &);
    ~ExtensionAttributes();

    ExtensionAttributes & operator = (const ExtensionAttributes &);
    int operator == (const ExtensionAttributes &) const;
    int operator != (const ExtensionAttributes &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(ExtensionAttributes *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, ExtensionAttributes *);

    int remove_front();
    int remove_after(OssIndex);

    ExtensionAttributes *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC ORAddress   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef BuiltInStandardAttributes built_in_standard_attributes;
    typedef __shared20 built_in_domain_defined_attributes;
    typedef ExtensionAttributes extension_attributes;

    ORAddress();
    ORAddress(const ORAddress &);
    ORAddress(const built_in_standard_attributes &, const built_in_domain_defined_attributes &, 
	const extension_attributes &);
    ORAddress(const built_in_standard_attributes &);

    ORAddress & operator = (const ORAddress &);
    int operator == (const ORAddress &) const;
    int operator != (const ORAddress &) const;

    built_in_standard_attributes & get_built_in_standard_attributes();
    const built_in_standard_attributes & get_built_in_standard_attributes() const;
    void set_built_in_standard_attributes(const built_in_standard_attributes &);

    built_in_domain_defined_attributes *get_built_in_domain_defined_attributes();
    const built_in_domain_defined_attributes *get_built_in_domain_defined_attributes() const;
    void set_built_in_domain_defined_attributes(const built_in_domain_defined_attributes &);
    int built_in_domain_defined_attributes_is_present() const;
    void omit_built_in_domain_defined_attributes();

    extension_attributes *get_extension_attributes();
    const extension_attributes *get_extension_attributes() const;
    void set_extension_attributes(const extension_attributes &);
    int extension_attributes_is_present() const;
    void omit_extension_attributes();
private:
    OSS_UINT32 bit_mask;
    built_in_standard_attributes built_in_standard_attributes_field;
    built_in_domain_defined_attributes built_in_domain_defined_attributes_field;
    extension_attributes extension_attributes_field;
};

typedef OssString OrganizationalUnitName;

class OSS_PUBLIC __shared19   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString type;
    typedef OssString value;

    __shared19();
    __shared19(const __shared19 &);
    __shared19(const type &, const value &);

    __shared19 & operator = (const __shared19 &);
    int operator == (const __shared19 &) const;
    int operator != (const __shared19 &) const;

    type & get_type();
    const type & get_type() const;
    void set_type(const type &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type type_field;
    value value_field;
};

typedef __shared19 BuiltInDomainDefinedAttribute;

class OSS_PUBLIC ExtensionAttribute   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 extension_attribute_type;
    typedef OssString extension_attribute_value;

    ExtensionAttribute();
    ExtensionAttribute(const ExtensionAttribute &);
    ExtensionAttribute(extension_attribute_type, const extension_attribute_value &);

    ExtensionAttribute & operator = (const ExtensionAttribute &);
    int operator == (const ExtensionAttribute &) const;
    int operator != (const ExtensionAttribute &) const;

    extension_attribute_type & get_extension_attribute_type();
    extension_attribute_type get_extension_attribute_type() const;
    void set_extension_attribute_type(extension_attribute_type);

    extension_attribute_value & get_extension_attribute_value();
    const extension_attribute_value & get_extension_attribute_value() const;
    void set_extension_attribute_value(const extension_attribute_value &);
private:
    extension_attribute_type extension_attribute_type_field;
    extension_attribute_value extension_attribute_value_field;
};

typedef OssString CommonName;

typedef OssString TeletexCommonName;

typedef OssString TeletexOrganizationName;

typedef __shared18 TeletexPersonalName;

typedef OssString TeletexOrganizationalUnitName;

typedef __shared1 TeletexOrganizationalUnitNames;

typedef OssString PDSName;

typedef __shared16 PhysicalDeliveryCountryName;

class OSS_PUBLIC PostalCode  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	numeric_code_chosen = 1,
	printable_code_chosen = 2
    };
    typedef OssString numeric_code;
    typedef OssString printable_code;

    PostalCode();
    PostalCode(const PostalCode &);
    ~PostalCode();

    PostalCode & operator = (const PostalCode &);
    int operator == (const PostalCode &) const;
    int operator != (const PostalCode &) const;

    numeric_code *get_numeric_code();
    const numeric_code *get_numeric_code() const;
    void set_numeric_code(const numeric_code &);

    printable_code *get_printable_code();
    const printable_code *get_printable_code() const;
    void set_printable_code(const printable_code &);
private:
    union {
	OSSC::COssString numeric_code_field;
	OSSC::COssString printable_code_field;
    };
    void cleanup();
};

class OSS_PUBLIC __shared21   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString printable_string;
    typedef OssString teletex_string;

    __shared21();
    __shared21(const __shared21 &);
    __shared21(const printable_string &, const teletex_string &);

    __shared21 & operator = (const __shared21 &);
    int operator == (const __shared21 &) const;
    int operator != (const __shared21 &) const;

    printable_string *get_printable_string();
    const printable_string *get_printable_string() const;
    void set_printable_string(const printable_string &);
    int printable_string_is_present() const;
    void omit_printable_string();

    teletex_string *get_teletex_string();
    const teletex_string *get_teletex_string() const;
    void set_teletex_string(const teletex_string &);
    int teletex_string_is_present() const;
    void omit_teletex_string();
private:
    OSS_UINT32 bit_mask;
    printable_string printable_string_field;
    teletex_string teletex_string_field;
};

typedef __shared21 PDSParameter;

typedef __shared21 PhysicalDeliveryOfficeName;

typedef __shared21 PhysicalDeliveryOfficeNumber;

typedef __shared21 ExtensionORAddressComponents;

typedef __shared21 PhysicalDeliveryPersonalName;

typedef __shared21 PhysicalDeliveryOrganizationName;

typedef __shared21 ExtensionPhysicalDeliveryAddressComponents;

class OSS_PUBLIC UnformattedPostalAddress   /* SET */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 printable_address;
    typedef OssString teletex_string;

    UnformattedPostalAddress();
    UnformattedPostalAddress(const UnformattedPostalAddress &);
    UnformattedPostalAddress(const printable_address &, const teletex_string &);

    UnformattedPostalAddress & operator = (const UnformattedPostalAddress &);
    int operator == (const UnformattedPostalAddress &) const;
    int operator != (const UnformattedPostalAddress &) const;

    printable_address *get_printable_address();
    const printable_address *get_printable_address() const;
    void set_printable_address(const printable_address &);
    int printable_address_is_present() const;
    void omit_printable_address();

    teletex_string *get_teletex_string();
    const teletex_string *get_teletex_string() const;
    void set_teletex_string(const teletex_string &);
    int teletex_string_is_present() const;
    void omit_teletex_string();
private:
    OSS_UINT32 bit_mask;
    printable_address printable_address_field;
    teletex_string teletex_string_field;
};

typedef __shared21 StreetAddress;

typedef __shared21 PostOfficeBoxAddress;

typedef __shared21 PosteRestanteAddress;

typedef __shared21 UniquePostalName;

typedef __shared21 LocalPostalAttributes;

class OSS_PUBLIC __seq5   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString number;
    typedef OssString sub_address;

    __seq5();
    __seq5(const __seq5 &);
    __seq5(const number &, const sub_address &);
    __seq5(const number &);

    __seq5 & operator = (const __seq5 &);
    int operator == (const __seq5 &) const;
    int operator != (const __seq5 &) const;

    number & get_number();
    const number & get_number() const;
    void set_number(const number &);

    sub_address *get_sub_address();
    const sub_address *get_sub_address() const;
    void set_sub_address(const sub_address &);
    int sub_address_is_present() const;
    void omit_sub_address();
private:
    OSS_UINT32 bit_mask;
    number number_field;
    sub_address sub_address_field;
};

class OSS_PUBLIC PresentationAddress   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString pSelector;
    typedef OssString sSelector;
    typedef OssString tSelector;
    typedef __shared1 nAddresses;

    PresentationAddress();
    PresentationAddress(const PresentationAddress &);
    PresentationAddress(const pSelector &, const sSelector &, const tSelector &, 
	const nAddresses &);
    PresentationAddress(const nAddresses &);

    PresentationAddress & operator = (const PresentationAddress &);
    int operator == (const PresentationAddress &) const;
    int operator != (const PresentationAddress &) const;

    pSelector *get_pSelector();
    const pSelector *get_pSelector() const;
    void set_pSelector(const pSelector &);
    int pSelector_is_present() const;
    void omit_pSelector();

    sSelector *get_sSelector();
    const sSelector *get_sSelector() const;
    void set_sSelector(const sSelector &);
    int sSelector_is_present() const;
    void omit_sSelector();

    tSelector *get_tSelector();
    const tSelector *get_tSelector() const;
    void set_tSelector(const tSelector &);
    int tSelector_is_present() const;
    void omit_tSelector();

    nAddresses & get_nAddresses();
    const nAddresses & get_nAddresses() const;
    void set_nAddresses(const nAddresses &);
private:
    OSS_UINT32 bit_mask;
    pSelector pSelector_field;
    sSelector sSelector_field;
    tSelector tSelector_field;
    nAddresses nAddresses_field;
};

class OSS_PUBLIC ExtendedNetworkAddress  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	e163_4_address_chosen = 1,
	psap_address_chosen = 2
    };
    typedef __seq5 e163_4_address;
    typedef PresentationAddress psap_address;

    ExtendedNetworkAddress();
    ExtendedNetworkAddress(const ExtendedNetworkAddress &);
    ~ExtendedNetworkAddress();

    ExtendedNetworkAddress & operator = (const ExtendedNetworkAddress &);
    int operator == (const ExtendedNetworkAddress &) const;
    int operator != (const ExtendedNetworkAddress &) const;

    e163_4_address *get_e163_4_address();
    const e163_4_address *get_e163_4_address() const;
    void set_e163_4_address(const e163_4_address &);

    psap_address *get_psap_address();
    const psap_address *get_psap_address() const;
    void set_psap_address(const psap_address &);
private:
    union {
	e163_4_address *e163_4_address_field;
	psap_address *psap_address_field;
    };
    void cleanup();
};

typedef OSS_UINT32 TerminalType;

typedef __shared19 TeletexDomainDefinedAttribute;

typedef __shared20 TeletexDomainDefinedAttributes;

class OSS_PUBLIC PKAuthenticator_OLD   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef PrincipalName kdc_name;
    typedef OssString kdc_realm;
    typedef OSS_INT32 cusec;
    typedef OssGeneralizedTime ctime;
    typedef OSS_INT32 nonce;

    PKAuthenticator_OLD();
    PKAuthenticator_OLD(const PKAuthenticator_OLD &);
    PKAuthenticator_OLD(const kdc_name &, const kdc_realm &, cusec, const ctime &, 
	nonce);

    PKAuthenticator_OLD & operator = (const PKAuthenticator_OLD &);
    int operator == (const PKAuthenticator_OLD &) const;
    int operator != (const PKAuthenticator_OLD &) const;

    kdc_name & get_kdc_name();
    const kdc_name & get_kdc_name() const;
    void set_kdc_name(const kdc_name &);

    kdc_realm & get_kdc_realm();
    const kdc_realm & get_kdc_realm() const;
    void set_kdc_realm(const kdc_realm &);

    cusec & get_cusec();
    cusec get_cusec() const;
    void set_cusec(cusec);

    ctime & get_ctime();
    const ctime & get_ctime() const;
    void set_ctime(const ctime &);

    nonce & get_nonce();
    nonce get_nonce() const;
    void set_nonce(nonce);
private:
    kdc_name kdc_name_field;
    kdc_realm kdc_realm_field;
    cusec cusec_field;
    ctime ctime_field;
    nonce nonce_field;
};

class OSS_PUBLIC AuthPack_OLD   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef PKAuthenticator_OLD pkAuthenticator;

    AuthPack_OLD();
    AuthPack_OLD(const AuthPack_OLD &);
    AuthPack_OLD(const pkAuthenticator &);

    AuthPack_OLD & operator = (const AuthPack_OLD &);
    int operator == (const AuthPack_OLD &) const;
    int operator != (const AuthPack_OLD &) const;

    pkAuthenticator & get_pkAuthenticator();
    const pkAuthenticator & get_pkAuthenticator() const;
    void set_pkAuthenticator(const pkAuthenticator &);
private:
    pkAuthenticator pkAuthenticator_field;
};

class OSS_PUBLIC KERB_REPLY_KEY_PACKAGE   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef EncryptionKey replyKey;
    typedef OSS_INT32 nonce;

    KERB_REPLY_KEY_PACKAGE();
    KERB_REPLY_KEY_PACKAGE(const KERB_REPLY_KEY_PACKAGE &);
    KERB_REPLY_KEY_PACKAGE(const replyKey &, nonce);

    KERB_REPLY_KEY_PACKAGE & operator = (const KERB_REPLY_KEY_PACKAGE &);
    int operator == (const KERB_REPLY_KEY_PACKAGE &) const;
    int operator != (const KERB_REPLY_KEY_PACKAGE &) const;

    replyKey & get_replyKey();
    const replyKey & get_replyKey() const;
    void set_replyKey(const replyKey &);

    nonce & get_nonce();
    nonce get_nonce() const;
    void set_nonce(nonce);
private:
    replyKey replyKey_field;
    nonce nonce_field;
};

class OSS_PUBLIC PA_FOR_USER_ENC   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef PrincipalName userName;
    typedef OssString userRealm;
    typedef Checksum cksum;
    typedef OssString auth_package;

    PA_FOR_USER_ENC();
    PA_FOR_USER_ENC(const PA_FOR_USER_ENC &);
    PA_FOR_USER_ENC(const userName &, const userRealm &, const cksum &, const auth_package &);

    PA_FOR_USER_ENC & operator = (const PA_FOR_USER_ENC &);
    int operator == (const PA_FOR_USER_ENC &) const;
    int operator != (const PA_FOR_USER_ENC &) const;

    userName & get_userName();
    const userName & get_userName() const;
    void set_userName(const userName &);

    userRealm & get_userRealm();
    const userRealm & get_userRealm() const;
    void set_userRealm(const userRealm &);

    cksum & get_cksum();
    const cksum & get_cksum() const;
    void set_cksum(const cksum &);

    auth_package & get_auth_package();
    const auth_package & get_auth_package() const;
    void set_auth_package(const auth_package &);
private:
    userName userName_field;
    userRealm userRealm_field;
    cksum cksum_field;
    auth_package auth_package_field;
};

class OSS_PUBLIC S4UUserID   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 nonce;
    typedef PrincipalName cname;
    typedef OssString crealm;
    typedef OssString subject_certificate;
    typedef OssBitString options;

    S4UUserID();
    S4UUserID(const S4UUserID &);
    S4UUserID(nonce, const cname &, const crealm &, const subject_certificate &, 
	const options &);
    S4UUserID(nonce, const crealm &);

    S4UUserID & operator = (const S4UUserID &);
    int operator == (const S4UUserID &) const;
    int operator != (const S4UUserID &) const;

    nonce & get_nonce();
    nonce get_nonce() const;
    void set_nonce(nonce);

    cname *get_cname();
    const cname *get_cname() const;
    void set_cname(const cname &);
    int cname_is_present() const;
    void omit_cname();

    crealm & get_crealm();
    const crealm & get_crealm() const;
    void set_crealm(const crealm &);

    subject_certificate *get_subject_certificate();
    const subject_certificate *get_subject_certificate() const;
    void set_subject_certificate(const subject_certificate &);
    int subject_certificate_is_present() const;
    void omit_subject_certificate();

    options *get_options();
    const options *get_options() const;
    void set_options(const options &);
    int options_is_present() const;
    void omit_options();
private:
    OSS_UINT32 bit_mask;
    nonce nonce_field;
    cname cname_field;
    crealm crealm_field;
    subject_certificate subject_certificate_field;
    options options_field;
};

class OSS_PUBLIC PA_S4U_X509_USER   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef S4UUserID user_id;
    typedef Checksum checksum;

    PA_S4U_X509_USER();
    PA_S4U_X509_USER(const PA_S4U_X509_USER &);
    PA_S4U_X509_USER(const user_id &, const checksum &);

    PA_S4U_X509_USER & operator = (const PA_S4U_X509_USER &);
    int operator == (const PA_S4U_X509_USER &) const;
    int operator != (const PA_S4U_X509_USER &) const;

    user_id & get_user_id();
    const user_id & get_user_id() const;
    void set_user_id(const user_id &);

    checksum & get_checksum();
    const checksum & get_checksum() const;
    void set_checksum(const checksum &);
private:
    user_id user_id_field;
    checksum checksum_field;
};

class OSS_PUBLIC PA_PAC_OPTIONS   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString kerberosFlags;

    PA_PAC_OPTIONS();
    PA_PAC_OPTIONS(const PA_PAC_OPTIONS &);
    PA_PAC_OPTIONS(const kerberosFlags &);

    PA_PAC_OPTIONS & operator = (const PA_PAC_OPTIONS &);
    int operator == (const PA_PAC_OPTIONS &) const;
    int operator != (const PA_PAC_OPTIONS &) const;

    kerberosFlags & get_kerberosFlags();
    const kerberosFlags & get_kerberosFlags() const;
    void set_kerberosFlags(const kerberosFlags &);
private:
    kerberosFlags kerberosFlags_field;
};

class OSS_PUBLIC KERB_PA_PAC_REQUEST   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef ossBoolean include_pac;

    KERB_PA_PAC_REQUEST();
    KERB_PA_PAC_REQUEST(const KERB_PA_PAC_REQUEST &);
    KERB_PA_PAC_REQUEST(include_pac);

    KERB_PA_PAC_REQUEST & operator = (const KERB_PA_PAC_REQUEST &);
    int operator == (const KERB_PA_PAC_REQUEST &) const;
    int operator != (const KERB_PA_PAC_REQUEST &) const;

    include_pac & get_include_pac();
    include_pac get_include_pac() const;
    void set_include_pac(include_pac);
private:
    include_pac include_pac_field;
};

typedef OssString KERB_LOCAL;

class OSS_PUBLIC KERB_AD_RESTRICTION_ENTRY   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 restriction_type;
    typedef OssString restriction;

    KERB_AD_RESTRICTION_ENTRY();
    KERB_AD_RESTRICTION_ENTRY(const KERB_AD_RESTRICTION_ENTRY &);
    KERB_AD_RESTRICTION_ENTRY(restriction_type, const restriction &);

    KERB_AD_RESTRICTION_ENTRY & operator = (const KERB_AD_RESTRICTION_ENTRY &);
    int operator == (const KERB_AD_RESTRICTION_ENTRY &) const;
    int operator != (const KERB_AD_RESTRICTION_ENTRY &) const;

    restriction_type & get_restriction_type();
    restriction_type get_restriction_type() const;
    void set_restriction_type(restriction_type);

    restriction & get_restriction();
    const restriction & get_restriction() const;
    void set_restriction(const restriction &);
private:
    restriction_type restriction_type_field;
    restriction restriction_field;
};

typedef OSS_INT32 PA_SUPPORTED_ENCTYPES;

/* Universal PDU class */

class OSS_PUBLIC cbd_asn1_PDU : public UniversalPDU {
public:
    cbd_asn1_PDU();
    void set_Ticket(Ticket &);
    Ticket *get_Ticket() const;
    void set_EncTicketPart(EncTicketPart &);
    EncTicketPart *get_EncTicketPart() const;
    void set_AS_REQ(AS_REQ &);
    AS_REQ *get_AS_REQ() const;
    void set_TGS_REQ(TGS_REQ &);
    TGS_REQ *get_TGS_REQ() const;
    void set_KDC_REQ_BODY(KDC_REQ_BODY &);
    KDC_REQ_BODY *get_KDC_REQ_BODY() const;
    void set_AS_REP(AS_REP &);
    AS_REP *get_AS_REP() const;
    void set_TGS_REP(TGS_REP &);
    TGS_REP *get_TGS_REP() const;
    void set_EncASRepPart(EncASRepPart &);
    EncASRepPart *get_EncASRepPart() const;
    void set_EncTGSRepPart(EncTGSRepPart &);
    EncTGSRepPart *get_EncTGSRepPart() const;
    void set_AP_REQ(AP_REQ &);
    AP_REQ *get_AP_REQ() const;
    void set_Authenticator(Authenticator &);
    Authenticator *get_Authenticator() const;
    void set_AP_REP(AP_REP &);
    AP_REP *get_AP_REP() const;
    void set_EncAPRepPart(EncAPRepPart &);
    EncAPRepPart *get_EncAPRepPart() const;
    void set_KRB_SAFE(KRB_SAFE &);
    KRB_SAFE *get_KRB_SAFE() const;
    void set_KRB_PRIV(KRB_PRIV &);
    KRB_PRIV *get_KRB_PRIV() const;
    void set_EncKrbPrivPart(EncKrbPrivPart &);
    EncKrbPrivPart *get_EncKrbPrivPart() const;
    void set_KRB_CRED(KRB_CRED &);
    KRB_CRED *get_KRB_CRED() const;
    void set_EncKrbCredPart(EncKrbCredPart &);
    EncKrbCredPart *get_EncKrbCredPart() const;
    void set_KRB_ERROR(KRB_ERROR &);
    KRB_ERROR *get_KRB_ERROR() const;
    void set_METHOD_DATA(METHOD_DATA &);
    METHOD_DATA *get_METHOD_DATA() const;
    void set_TYPED_DATA(TYPED_DATA &);
    TYPED_DATA *get_TYPED_DATA() const;
    void set_PA_ENC_TIMESTAMP(PA_ENC_TIMESTAMP &);
    PA_ENC_TIMESTAMP *get_PA_ENC_TIMESTAMP() const;
    void set_PA_ENC_TS_ENC(PA_ENC_TS_ENC &);
    PA_ENC_TS_ENC *get_PA_ENC_TS_ENC() const;
    void set_ETYPE_INFO(ETYPE_INFO &);
    ETYPE_INFO *get_ETYPE_INFO() const;
    void set_ETYPE_INFO2(ETYPE_INFO2 &);
    ETYPE_INFO2 *get_ETYPE_INFO2() const;
    void set_AD_IF_RELEVANT(AD_IF_RELEVANT &);
    AD_IF_RELEVANT *get_AD_IF_RELEVANT() const;
    void set_AD_KDCIssued(AD_KDCIssued &);
    AD_KDCIssued *get_AD_KDCIssued() const;
    void set_AD_AND_OR(AD_AND_OR &);
    AD_AND_OR *get_AD_AND_OR() const;
    void set_AD_MANDATORY_FOR_KDC(AD_MANDATORY_FOR_KDC &);
    AD_MANDATORY_FOR_KDC *get_AD_MANDATORY_FOR_KDC() const;
    void set_ChangePasswdData(ChangePasswdData &);
    ChangePasswdData *get_ChangePasswdData() const;
    void set_PA_PK_AS_REQ(PA_PK_AS_REQ &);
    PA_PK_AS_REQ *get_PA_PK_AS_REQ() const;
    void set_AuthPack(AuthPack &);
    AuthPack *get_AuthPack() const;
    void set_TD_TRUSTED_CERTIFIERS(TD_TRUSTED_CERTIFIERS &);
    TD_TRUSTED_CERTIFIERS *get_TD_TRUSTED_CERTIFIERS() const;
    void set_TD_INVALID_CERTIFICATES(TD_INVALID_CERTIFICATES &);
    TD_INVALID_CERTIFICATES *get_TD_INVALID_CERTIFICATES() const;
    void set_KRB5PrincipalName(KRB5PrincipalName &);
    KRB5PrincipalName *get_KRB5PrincipalName() const;
    void set_AD_INITIAL_VERIFIED_CAS(AD_INITIAL_VERIFIED_CAS &);
    AD_INITIAL_VERIFIED_CAS *get_AD_INITIAL_VERIFIED_CAS() const;
    void set_PA_PK_AS_REP(PA_PK_AS_REP &);
    PA_PK_AS_REP *get_PA_PK_AS_REP() const;
    void set_KDCDHKeyInfo(KDCDHKeyInfo &);
    KDCDHKeyInfo *get_KDCDHKeyInfo() const;
    void set_ReplyKeyPack(ReplyKeyPack &);
    ReplyKeyPack *get_ReplyKeyPack() const;
    void set_TD_DH_PARAMETERS(TD_DH_PARAMETERS &);
    TD_DH_PARAMETERS *get_TD_DH_PARAMETERS() const;
    void set_Attribute(Attribute &);
    Attribute *get_Attribute() const;
    void set_X520name(X520name &);
    X520name *get_X520name() const;
    void set_X520CommonName(X520CommonName &);
    X520CommonName *get_X520CommonName() const;
    void set_X520LocalityName(X520LocalityName &);
    X520LocalityName *get_X520LocalityName() const;
    void set_X520StateOrProvinceName(X520StateOrProvinceName &);
    X520StateOrProvinceName *get_X520StateOrProvinceName() const;
    void set_X520OrganizationName(X520OrganizationName &);
    X520OrganizationName *get_X520OrganizationName() const;
    void set_X520OrganizationalUnitName(X520OrganizationalUnitName &);
    X520OrganizationalUnitName *get_X520OrganizationalUnitName() const;
    void set_X520Title(X520Title &);
    X520Title *get_X520Title() const;
    void set_X520dnQualifier(X520dnQualifier &);
    X520dnQualifier *get_X520dnQualifier() const;
    void set_X520countryName(X520countryName &);
    X520countryName *get_X520countryName() const;
    void set_X520SerialNumber(X520SerialNumber &);
    X520SerialNumber *get_X520SerialNumber() const;
    void set_X520Pseudonym(X520Pseudonym &);
    X520Pseudonym *get_X520Pseudonym() const;
    void set_DomainComponent(DomainComponent &);
    DomainComponent *get_DomainComponent() const;
    void set_EmailAddress(EmailAddress &);
    EmailAddress *get_EmailAddress() const;
    void set_DistinguishedName(DistinguishedName &);
    DistinguishedName *get_DistinguishedName() const;
    void set_DirectoryString(DirectoryString &);
    DirectoryString *get_DirectoryString() const;
    void set_Certificate(Certificate &);
    Certificate *get_Certificate() const;
    void set_CertificateList(CertificateList &);
    CertificateList *get_CertificateList() const;
    void set_ORAddress(ORAddress &);
    ORAddress *get_ORAddress() const;
    void set_CommonName(CommonName &);
    CommonName *get_CommonName() const;
    void set_TeletexCommonName(TeletexCommonName &);
    TeletexCommonName *get_TeletexCommonName() const;
    void set_TeletexOrganizationName(TeletexOrganizationName &);
    TeletexOrganizationName *get_TeletexOrganizationName() const;
    void set_TeletexPersonalName(TeletexPersonalName &);
    TeletexPersonalName *get_TeletexPersonalName() const;
    void set_TeletexOrganizationalUnitNames(TeletexOrganizationalUnitNames &);
    TeletexOrganizationalUnitNames *get_TeletexOrganizationalUnitNames() const;
    void set_PDSName(PDSName &);
    PDSName *get_PDSName() const;
    void set_PhysicalDeliveryCountryName(PhysicalDeliveryCountryName &);
    PhysicalDeliveryCountryName *get_PhysicalDeliveryCountryName() const;
    void set_PostalCode(PostalCode &);
    PostalCode *get_PostalCode() const;
    void set_PhysicalDeliveryOfficeName(PhysicalDeliveryOfficeName &);
    PhysicalDeliveryOfficeName *get_PhysicalDeliveryOfficeName() const;
    void set_PhysicalDeliveryOfficeNumber(PhysicalDeliveryOfficeNumber &);
    PhysicalDeliveryOfficeNumber *get_PhysicalDeliveryOfficeNumber() const;
    void set_ExtensionORAddressComponents(ExtensionORAddressComponents &);
    ExtensionORAddressComponents *get_ExtensionORAddressComponents() const;
    void set_PhysicalDeliveryPersonalName(PhysicalDeliveryPersonalName &);
    PhysicalDeliveryPersonalName *get_PhysicalDeliveryPersonalName() const;
    void set_PhysicalDeliveryOrganizationName(PhysicalDeliveryOrganizationName &);
    PhysicalDeliveryOrganizationName *get_PhysicalDeliveryOrganizationName() const;
    void set_ExtensionPhysicalDeliveryAddressComponents(ExtensionPhysicalDeliveryAddressComponents &);
    ExtensionPhysicalDeliveryAddressComponents *get_ExtensionPhysicalDeliveryAddressComponents() const;
    void set_UnformattedPostalAddress(UnformattedPostalAddress &);
    UnformattedPostalAddress *get_UnformattedPostalAddress() const;
    void set_StreetAddress(StreetAddress &);
    StreetAddress *get_StreetAddress() const;
    void set_PostOfficeBoxAddress(PostOfficeBoxAddress &);
    PostOfficeBoxAddress *get_PostOfficeBoxAddress() const;
    void set_PosteRestanteAddress(PosteRestanteAddress &);
    PosteRestanteAddress *get_PosteRestanteAddress() const;
    void set_UniquePostalName(UniquePostalName &);
    UniquePostalName *get_UniquePostalName() const;
    void set_LocalPostalAttributes(LocalPostalAttributes &);
    LocalPostalAttributes *get_LocalPostalAttributes() const;
    void set_ExtendedNetworkAddress(ExtendedNetworkAddress &);
    ExtendedNetworkAddress *get_ExtendedNetworkAddress() const;
    void set_TerminalType(TerminalType &);
    TerminalType *get_TerminalType() const;
    void set_TeletexDomainDefinedAttributes(TeletexDomainDefinedAttributes &);
    TeletexDomainDefinedAttributes *get_TeletexDomainDefinedAttributes() const;
    void set_AuthPack_OLD(AuthPack_OLD &);
    AuthPack_OLD *get_AuthPack_OLD() const;
    void set_KERB_REPLY_KEY_PACKAGE(KERB_REPLY_KEY_PACKAGE &);
    KERB_REPLY_KEY_PACKAGE *get_KERB_REPLY_KEY_PACKAGE() const;
    void set_PA_FOR_USER_ENC(PA_FOR_USER_ENC &);
    PA_FOR_USER_ENC *get_PA_FOR_USER_ENC() const;
    void set_PA_S4U_X509_USER(PA_S4U_X509_USER &);
    PA_S4U_X509_USER *get_PA_S4U_X509_USER() const;
    void set_PA_PAC_OPTIONS(PA_PAC_OPTIONS &);
    PA_PAC_OPTIONS *get_PA_PAC_OPTIONS() const;
    void set_KERB_PA_PAC_REQUEST(KERB_PA_PAC_REQUEST &);
    KERB_PA_PAC_REQUEST *get_KERB_PA_PAC_REQUEST() const;
    void set_KERB_LOCAL(KERB_LOCAL &);
    KERB_LOCAL *get_KERB_LOCAL() const;
    void set_KERB_AD_RESTRICTION_ENTRY(KERB_AD_RESTRICTION_ENTRY &);
    KERB_AD_RESTRICTION_ENTRY *get_KERB_AD_RESTRICTION_ENTRY() const;
    void set_PA_SUPPORTED_ENCTYPES(PA_SUPPORTED_ENCTYPES &);
    PA_SUPPORTED_ENCTYPES *get_PA_SUPPORTED_ENCTYPES() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_Ticket(const Ticket &);
    const Ticket *get_const_Ticket() const;
    void set_const_EncTicketPart(const EncTicketPart &);
    const EncTicketPart *get_const_EncTicketPart() const;
    void set_const_AS_REQ(const AS_REQ &);
    const AS_REQ *get_const_AS_REQ() const;
    void set_const_TGS_REQ(const TGS_REQ &);
    const TGS_REQ *get_const_TGS_REQ() const;
    void set_const_KDC_REQ_BODY(const KDC_REQ_BODY &);
    const KDC_REQ_BODY *get_const_KDC_REQ_BODY() const;
    void set_const_AS_REP(const AS_REP &);
    const AS_REP *get_const_AS_REP() const;
    void set_const_TGS_REP(const TGS_REP &);
    const TGS_REP *get_const_TGS_REP() const;
    void set_const_EncASRepPart(const EncASRepPart &);
    const EncASRepPart *get_const_EncASRepPart() const;
    void set_const_EncTGSRepPart(const EncTGSRepPart &);
    const EncTGSRepPart *get_const_EncTGSRepPart() const;
    void set_const_AP_REQ(const AP_REQ &);
    const AP_REQ *get_const_AP_REQ() const;
    void set_const_Authenticator(const Authenticator &);
    const Authenticator *get_const_Authenticator() const;
    void set_const_AP_REP(const AP_REP &);
    const AP_REP *get_const_AP_REP() const;
    void set_const_EncAPRepPart(const EncAPRepPart &);
    const EncAPRepPart *get_const_EncAPRepPart() const;
    void set_const_KRB_SAFE(const KRB_SAFE &);
    const KRB_SAFE *get_const_KRB_SAFE() const;
    void set_const_KRB_PRIV(const KRB_PRIV &);
    const KRB_PRIV *get_const_KRB_PRIV() const;
    void set_const_EncKrbPrivPart(const EncKrbPrivPart &);
    const EncKrbPrivPart *get_const_EncKrbPrivPart() const;
    void set_const_KRB_CRED(const KRB_CRED &);
    const KRB_CRED *get_const_KRB_CRED() const;
    void set_const_EncKrbCredPart(const EncKrbCredPart &);
    const EncKrbCredPart *get_const_EncKrbCredPart() const;
    void set_const_KRB_ERROR(const KRB_ERROR &);
    const KRB_ERROR *get_const_KRB_ERROR() const;
    void set_const_METHOD_DATA(const METHOD_DATA &);
    const METHOD_DATA *get_const_METHOD_DATA() const;
    void set_const_TYPED_DATA(const TYPED_DATA &);
    const TYPED_DATA *get_const_TYPED_DATA() const;
    void set_const_PA_ENC_TIMESTAMP(const PA_ENC_TIMESTAMP &);
    const PA_ENC_TIMESTAMP *get_const_PA_ENC_TIMESTAMP() const;
    void set_const_PA_ENC_TS_ENC(const PA_ENC_TS_ENC &);
    const PA_ENC_TS_ENC *get_const_PA_ENC_TS_ENC() const;
    void set_const_ETYPE_INFO(const ETYPE_INFO &);
    const ETYPE_INFO *get_const_ETYPE_INFO() const;
    void set_const_ETYPE_INFO2(const ETYPE_INFO2 &);
    const ETYPE_INFO2 *get_const_ETYPE_INFO2() const;
    void set_const_AD_IF_RELEVANT(const AD_IF_RELEVANT &);
    const AD_IF_RELEVANT *get_const_AD_IF_RELEVANT() const;
    void set_const_AD_KDCIssued(const AD_KDCIssued &);
    const AD_KDCIssued *get_const_AD_KDCIssued() const;
    void set_const_AD_AND_OR(const AD_AND_OR &);
    const AD_AND_OR *get_const_AD_AND_OR() const;
    void set_const_AD_MANDATORY_FOR_KDC(const AD_MANDATORY_FOR_KDC &);
    const AD_MANDATORY_FOR_KDC *get_const_AD_MANDATORY_FOR_KDC() const;
    void set_const_ChangePasswdData(const ChangePasswdData &);
    const ChangePasswdData *get_const_ChangePasswdData() const;
    void set_const_PA_PK_AS_REQ(const PA_PK_AS_REQ &);
    const PA_PK_AS_REQ *get_const_PA_PK_AS_REQ() const;
    void set_const_AuthPack(const AuthPack &);
    const AuthPack *get_const_AuthPack() const;
    void set_const_TD_TRUSTED_CERTIFIERS(const TD_TRUSTED_CERTIFIERS &);
    const TD_TRUSTED_CERTIFIERS *get_const_TD_TRUSTED_CERTIFIERS() const;
    void set_const_TD_INVALID_CERTIFICATES(const TD_INVALID_CERTIFICATES &);
    const TD_INVALID_CERTIFICATES *get_const_TD_INVALID_CERTIFICATES() const;
    void set_const_KRB5PrincipalName(const KRB5PrincipalName &);
    const KRB5PrincipalName *get_const_KRB5PrincipalName() const;
    void set_const_AD_INITIAL_VERIFIED_CAS(const AD_INITIAL_VERIFIED_CAS &);
    const AD_INITIAL_VERIFIED_CAS *get_const_AD_INITIAL_VERIFIED_CAS() const;
    void set_const_PA_PK_AS_REP(const PA_PK_AS_REP &);
    const PA_PK_AS_REP *get_const_PA_PK_AS_REP() const;
    void set_const_KDCDHKeyInfo(const KDCDHKeyInfo &);
    const KDCDHKeyInfo *get_const_KDCDHKeyInfo() const;
    void set_const_ReplyKeyPack(const ReplyKeyPack &);
    const ReplyKeyPack *get_const_ReplyKeyPack() const;
    void set_const_TD_DH_PARAMETERS(const TD_DH_PARAMETERS &);
    const TD_DH_PARAMETERS *get_const_TD_DH_PARAMETERS() const;
    void set_const_Attribute(const Attribute &);
    const Attribute *get_const_Attribute() const;
    void set_const_X520name(const X520name &);
    const X520name *get_const_X520name() const;
    void set_const_X520CommonName(const X520CommonName &);
    const X520CommonName *get_const_X520CommonName() const;
    void set_const_X520LocalityName(const X520LocalityName &);
    const X520LocalityName *get_const_X520LocalityName() const;
    void set_const_X520StateOrProvinceName(const X520StateOrProvinceName &);
    const X520StateOrProvinceName *get_const_X520StateOrProvinceName() const;
    void set_const_X520OrganizationName(const X520OrganizationName &);
    const X520OrganizationName *get_const_X520OrganizationName() const;
    void set_const_X520OrganizationalUnitName(const X520OrganizationalUnitName &);
    const X520OrganizationalUnitName *get_const_X520OrganizationalUnitName() const;
    void set_const_X520Title(const X520Title &);
    const X520Title *get_const_X520Title() const;
    void set_const_X520dnQualifier(const X520dnQualifier &);
    const X520dnQualifier *get_const_X520dnQualifier() const;
    void set_const_X520countryName(const X520countryName &);
    const X520countryName *get_const_X520countryName() const;
    void set_const_X520SerialNumber(const X520SerialNumber &);
    const X520SerialNumber *get_const_X520SerialNumber() const;
    void set_const_X520Pseudonym(const X520Pseudonym &);
    const X520Pseudonym *get_const_X520Pseudonym() const;
    void set_const_DomainComponent(const DomainComponent &);
    const DomainComponent *get_const_DomainComponent() const;
    void set_const_EmailAddress(const EmailAddress &);
    const EmailAddress *get_const_EmailAddress() const;
    void set_const_DistinguishedName(const DistinguishedName &);
    const DistinguishedName *get_const_DistinguishedName() const;
    void set_const_DirectoryString(const DirectoryString &);
    const DirectoryString *get_const_DirectoryString() const;
    void set_const_Certificate(const Certificate &);
    const Certificate *get_const_Certificate() const;
    void set_const_CertificateList(const CertificateList &);
    const CertificateList *get_const_CertificateList() const;
    void set_const_ORAddress(const ORAddress &);
    const ORAddress *get_const_ORAddress() const;
    void set_const_CommonName(const CommonName &);
    const CommonName *get_const_CommonName() const;
    void set_const_TeletexCommonName(const TeletexCommonName &);
    const TeletexCommonName *get_const_TeletexCommonName() const;
    void set_const_TeletexOrganizationName(const TeletexOrganizationName &);
    const TeletexOrganizationName *get_const_TeletexOrganizationName() const;
    void set_const_TeletexPersonalName(const TeletexPersonalName &);
    const TeletexPersonalName *get_const_TeletexPersonalName() const;
    void set_const_TeletexOrganizationalUnitNames(const TeletexOrganizationalUnitNames &);
    const TeletexOrganizationalUnitNames *get_const_TeletexOrganizationalUnitNames() const;
    void set_const_PDSName(const PDSName &);
    const PDSName *get_const_PDSName() const;
    void set_const_PhysicalDeliveryCountryName(const PhysicalDeliveryCountryName &);
    const PhysicalDeliveryCountryName *get_const_PhysicalDeliveryCountryName() const;
    void set_const_PostalCode(const PostalCode &);
    const PostalCode *get_const_PostalCode() const;
    void set_const_PhysicalDeliveryOfficeName(const PhysicalDeliveryOfficeName &);
    const PhysicalDeliveryOfficeName *get_const_PhysicalDeliveryOfficeName() const;
    void set_const_PhysicalDeliveryOfficeNumber(const PhysicalDeliveryOfficeNumber &);
    const PhysicalDeliveryOfficeNumber *get_const_PhysicalDeliveryOfficeNumber() const;
    void set_const_ExtensionORAddressComponents(const ExtensionORAddressComponents &);
    const ExtensionORAddressComponents *get_const_ExtensionORAddressComponents() const;
    void set_const_PhysicalDeliveryPersonalName(const PhysicalDeliveryPersonalName &);
    const PhysicalDeliveryPersonalName *get_const_PhysicalDeliveryPersonalName() const;
    void set_const_PhysicalDeliveryOrganizationName(const PhysicalDeliveryOrganizationName &);
    const PhysicalDeliveryOrganizationName *get_const_PhysicalDeliveryOrganizationName() const;
    void set_const_ExtensionPhysicalDeliveryAddressComponents(const ExtensionPhysicalDeliveryAddressComponents &);
    const ExtensionPhysicalDeliveryAddressComponents *get_const_ExtensionPhysicalDeliveryAddressComponents() const;
    void set_const_UnformattedPostalAddress(const UnformattedPostalAddress &);
    const UnformattedPostalAddress *get_const_UnformattedPostalAddress() const;
    void set_const_StreetAddress(const StreetAddress &);
    const StreetAddress *get_const_StreetAddress() const;
    void set_const_PostOfficeBoxAddress(const PostOfficeBoxAddress &);
    const PostOfficeBoxAddress *get_const_PostOfficeBoxAddress() const;
    void set_const_PosteRestanteAddress(const PosteRestanteAddress &);
    const PosteRestanteAddress *get_const_PosteRestanteAddress() const;
    void set_const_UniquePostalName(const UniquePostalName &);
    const UniquePostalName *get_const_UniquePostalName() const;
    void set_const_LocalPostalAttributes(const LocalPostalAttributes &);
    const LocalPostalAttributes *get_const_LocalPostalAttributes() const;
    void set_const_ExtendedNetworkAddress(const ExtendedNetworkAddress &);
    const ExtendedNetworkAddress *get_const_ExtendedNetworkAddress() const;
    void set_const_TerminalType(const TerminalType &);
    const TerminalType *get_const_TerminalType() const;
    void set_const_TeletexDomainDefinedAttributes(const TeletexDomainDefinedAttributes &);
    const TeletexDomainDefinedAttributes *get_const_TeletexDomainDefinedAttributes() const;
    void set_const_AuthPack_OLD(const AuthPack_OLD &);
    const AuthPack_OLD *get_const_AuthPack_OLD() const;
    void set_const_KERB_REPLY_KEY_PACKAGE(const KERB_REPLY_KEY_PACKAGE &);
    const KERB_REPLY_KEY_PACKAGE *get_const_KERB_REPLY_KEY_PACKAGE() const;
    void set_const_PA_FOR_USER_ENC(const PA_FOR_USER_ENC &);
    const PA_FOR_USER_ENC *get_const_PA_FOR_USER_ENC() const;
    void set_const_PA_S4U_X509_USER(const PA_S4U_X509_USER &);
    const PA_S4U_X509_USER *get_const_PA_S4U_X509_USER() const;
    void set_const_PA_PAC_OPTIONS(const PA_PAC_OPTIONS &);
    const PA_PAC_OPTIONS *get_const_PA_PAC_OPTIONS() const;
    void set_const_KERB_PA_PAC_REQUEST(const KERB_PA_PAC_REQUEST &);
    const KERB_PA_PAC_REQUEST *get_const_KERB_PA_PAC_REQUEST() const;
    void set_const_KERB_LOCAL(const KERB_LOCAL &);
    const KERB_LOCAL *get_const_KERB_LOCAL() const;
    void set_const_KERB_AD_RESTRICTION_ENTRY(const KERB_AD_RESTRICTION_ENTRY &);
    const KERB_AD_RESTRICTION_ENTRY *get_const_KERB_AD_RESTRICTION_ENTRY() const;
    void set_const_PA_SUPPORTED_ENCTYPES(const PA_SUPPORTED_ENCTYPES &);
    const PA_SUPPORTED_ENCTYPES *get_const_PA_SUPPORTED_ENCTYPES() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC Ticket_PDU : public ConcretePDU {
public:
    Ticket_PDU();
    void set_data(Ticket &);
    Ticket *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Ticket & d);
    const Ticket *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EncTicketPart_PDU : public ConcretePDU {
public:
    EncTicketPart_PDU();
    void set_data(EncTicketPart &);
    EncTicketPart *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EncTicketPart & d);
    const EncTicketPart *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AS_REQ_PDU : public ConcretePDU {
public:
    AS_REQ_PDU();
    void set_data(AS_REQ &);
    AS_REQ *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AS_REQ & d);
    const AS_REQ *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TGS_REQ_PDU : public ConcretePDU {
public:
    TGS_REQ_PDU();
    void set_data(TGS_REQ &);
    TGS_REQ *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TGS_REQ & d);
    const TGS_REQ *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KDC_REQ_BODY_PDU : public ConcretePDU {
public:
    KDC_REQ_BODY_PDU();
    void set_data(KDC_REQ_BODY &);
    KDC_REQ_BODY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KDC_REQ_BODY & d);
    const KDC_REQ_BODY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AS_REP_PDU : public ConcretePDU {
public:
    AS_REP_PDU();
    void set_data(AS_REP &);
    AS_REP *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AS_REP & d);
    const AS_REP *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TGS_REP_PDU : public ConcretePDU {
public:
    TGS_REP_PDU();
    void set_data(TGS_REP &);
    TGS_REP *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TGS_REP & d);
    const TGS_REP *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EncASRepPart_PDU : public ConcretePDU {
public:
    EncASRepPart_PDU();
    void set_data(EncASRepPart &);
    EncASRepPart *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EncASRepPart & d);
    const EncASRepPart *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EncTGSRepPart_PDU : public ConcretePDU {
public:
    EncTGSRepPart_PDU();
    void set_data(EncTGSRepPart &);
    EncTGSRepPart *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EncTGSRepPart & d);
    const EncTGSRepPart *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AP_REQ_PDU : public ConcretePDU {
public:
    AP_REQ_PDU();
    void set_data(AP_REQ &);
    AP_REQ *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AP_REQ & d);
    const AP_REQ *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Authenticator_PDU : public ConcretePDU {
public:
    Authenticator_PDU();
    void set_data(Authenticator &);
    Authenticator *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Authenticator & d);
    const Authenticator *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AP_REP_PDU : public ConcretePDU {
public:
    AP_REP_PDU();
    void set_data(AP_REP &);
    AP_REP *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AP_REP & d);
    const AP_REP *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EncAPRepPart_PDU : public ConcretePDU {
public:
    EncAPRepPart_PDU();
    void set_data(EncAPRepPart &);
    EncAPRepPart *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EncAPRepPart & d);
    const EncAPRepPart *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KRB_SAFE_PDU : public ConcretePDU {
public:
    KRB_SAFE_PDU();
    void set_data(KRB_SAFE &);
    KRB_SAFE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KRB_SAFE & d);
    const KRB_SAFE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KRB_PRIV_PDU : public ConcretePDU {
public:
    KRB_PRIV_PDU();
    void set_data(KRB_PRIV &);
    KRB_PRIV *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KRB_PRIV & d);
    const KRB_PRIV *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EncKrbPrivPart_PDU : public ConcretePDU {
public:
    EncKrbPrivPart_PDU();
    void set_data(EncKrbPrivPart &);
    EncKrbPrivPart *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EncKrbPrivPart & d);
    const EncKrbPrivPart *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KRB_CRED_PDU : public ConcretePDU {
public:
    KRB_CRED_PDU();
    void set_data(KRB_CRED &);
    KRB_CRED *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KRB_CRED & d);
    const KRB_CRED *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EncKrbCredPart_PDU : public ConcretePDU {
public:
    EncKrbCredPart_PDU();
    void set_data(EncKrbCredPart &);
    EncKrbCredPart *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EncKrbCredPart & d);
    const EncKrbCredPart *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KRB_ERROR_PDU : public ConcretePDU {
public:
    KRB_ERROR_PDU();
    void set_data(KRB_ERROR &);
    KRB_ERROR *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KRB_ERROR & d);
    const KRB_ERROR *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC METHOD_DATA_PDU : public ConcretePDU {
public:
    METHOD_DATA_PDU();
    void set_data(METHOD_DATA &);
    METHOD_DATA *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const METHOD_DATA & d);
    const METHOD_DATA *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TYPED_DATA_PDU : public ConcretePDU {
public:
    TYPED_DATA_PDU();
    void set_data(TYPED_DATA &);
    TYPED_DATA *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TYPED_DATA & d);
    const TYPED_DATA *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_ENC_TIMESTAMP_PDU : public ConcretePDU {
public:
    PA_ENC_TIMESTAMP_PDU();
    void set_data(PA_ENC_TIMESTAMP &);
    PA_ENC_TIMESTAMP *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_ENC_TIMESTAMP & d);
    const PA_ENC_TIMESTAMP *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_ENC_TS_ENC_PDU : public ConcretePDU {
public:
    PA_ENC_TS_ENC_PDU();
    void set_data(PA_ENC_TS_ENC &);
    PA_ENC_TS_ENC *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_ENC_TS_ENC & d);
    const PA_ENC_TS_ENC *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ETYPE_INFO_PDU : public ConcretePDU {
public:
    ETYPE_INFO_PDU();
    void set_data(ETYPE_INFO &);
    ETYPE_INFO *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ETYPE_INFO & d);
    const ETYPE_INFO *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ETYPE_INFO2_PDU : public ConcretePDU {
public:
    ETYPE_INFO2_PDU();
    void set_data(ETYPE_INFO2 &);
    ETYPE_INFO2 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ETYPE_INFO2 & d);
    const ETYPE_INFO2 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AD_IF_RELEVANT_PDU : public ConcretePDU {
public:
    AD_IF_RELEVANT_PDU();
    void set_data(AD_IF_RELEVANT &);
    AD_IF_RELEVANT *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AD_IF_RELEVANT & d);
    const AD_IF_RELEVANT *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AD_KDCIssued_PDU : public ConcretePDU {
public:
    AD_KDCIssued_PDU();
    void set_data(AD_KDCIssued &);
    AD_KDCIssued *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AD_KDCIssued & d);
    const AD_KDCIssued *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AD_AND_OR_PDU : public ConcretePDU {
public:
    AD_AND_OR_PDU();
    void set_data(AD_AND_OR &);
    AD_AND_OR *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AD_AND_OR & d);
    const AD_AND_OR *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AD_MANDATORY_FOR_KDC_PDU : public ConcretePDU {
public:
    AD_MANDATORY_FOR_KDC_PDU();
    void set_data(AD_MANDATORY_FOR_KDC &);
    AD_MANDATORY_FOR_KDC *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AD_MANDATORY_FOR_KDC & d);
    const AD_MANDATORY_FOR_KDC *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ChangePasswdData_PDU : public ConcretePDU {
public:
    ChangePasswdData_PDU();
    void set_data(ChangePasswdData &);
    ChangePasswdData *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ChangePasswdData & d);
    const ChangePasswdData *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_PK_AS_REQ_PDU : public ConcretePDU {
public:
    PA_PK_AS_REQ_PDU();
    void set_data(PA_PK_AS_REQ &);
    PA_PK_AS_REQ *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_PK_AS_REQ & d);
    const PA_PK_AS_REQ *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AuthPack_PDU : public ConcretePDU {
public:
    AuthPack_PDU();
    void set_data(AuthPack &);
    AuthPack *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AuthPack & d);
    const AuthPack *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TD_TRUSTED_CERTIFIERS_PDU : public ConcretePDU {
public:
    TD_TRUSTED_CERTIFIERS_PDU();
    void set_data(TD_TRUSTED_CERTIFIERS &);
    TD_TRUSTED_CERTIFIERS *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TD_TRUSTED_CERTIFIERS & d);
    const TD_TRUSTED_CERTIFIERS *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TD_INVALID_CERTIFICATES_PDU : public ConcretePDU {
public:
    TD_INVALID_CERTIFICATES_PDU();
    void set_data(TD_INVALID_CERTIFICATES &);
    TD_INVALID_CERTIFICATES *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TD_INVALID_CERTIFICATES & d);
    const TD_INVALID_CERTIFICATES *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KRB5PrincipalName_PDU : public ConcretePDU {
public:
    KRB5PrincipalName_PDU();
    void set_data(KRB5PrincipalName &);
    KRB5PrincipalName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KRB5PrincipalName & d);
    const KRB5PrincipalName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AD_INITIAL_VERIFIED_CAS_PDU : public ConcretePDU {
public:
    AD_INITIAL_VERIFIED_CAS_PDU();
    void set_data(AD_INITIAL_VERIFIED_CAS &);
    AD_INITIAL_VERIFIED_CAS *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AD_INITIAL_VERIFIED_CAS & d);
    const AD_INITIAL_VERIFIED_CAS *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_PK_AS_REP_PDU : public ConcretePDU {
public:
    PA_PK_AS_REP_PDU();
    void set_data(PA_PK_AS_REP &);
    PA_PK_AS_REP *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_PK_AS_REP & d);
    const PA_PK_AS_REP *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KDCDHKeyInfo_PDU : public ConcretePDU {
public:
    KDCDHKeyInfo_PDU();
    void set_data(KDCDHKeyInfo &);
    KDCDHKeyInfo *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KDCDHKeyInfo & d);
    const KDCDHKeyInfo *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ReplyKeyPack_PDU : public ConcretePDU {
public:
    ReplyKeyPack_PDU();
    void set_data(ReplyKeyPack &);
    ReplyKeyPack *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ReplyKeyPack & d);
    const ReplyKeyPack *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TD_DH_PARAMETERS_PDU : public ConcretePDU {
public:
    TD_DH_PARAMETERS_PDU();
    void set_data(TD_DH_PARAMETERS &);
    TD_DH_PARAMETERS *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TD_DH_PARAMETERS & d);
    const TD_DH_PARAMETERS *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Attribute_PDU : public ConcretePDU {
public:
    Attribute_PDU();
    void set_data(Attribute &);
    Attribute *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Attribute & d);
    const Attribute *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520name_PDU : public ConcretePDU {
public:
    X520name_PDU();
    void set_data(X520name &);
    X520name *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520name & d);
    const X520name *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520CommonName_PDU : public ConcretePDU {
public:
    X520CommonName_PDU();
    void set_data(X520CommonName &);
    X520CommonName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520CommonName & d);
    const X520CommonName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520LocalityName_PDU : public ConcretePDU {
public:
    X520LocalityName_PDU();
    void set_data(X520LocalityName &);
    X520LocalityName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520LocalityName & d);
    const X520LocalityName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520StateOrProvinceName_PDU : public ConcretePDU {
public:
    X520StateOrProvinceName_PDU();
    void set_data(X520StateOrProvinceName &);
    X520StateOrProvinceName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520StateOrProvinceName & d);
    const X520StateOrProvinceName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520OrganizationName_PDU : public ConcretePDU {
public:
    X520OrganizationName_PDU();
    void set_data(X520OrganizationName &);
    X520OrganizationName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520OrganizationName & d);
    const X520OrganizationName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520OrganizationalUnitName_PDU : public ConcretePDU {
public:
    X520OrganizationalUnitName_PDU();
    void set_data(X520OrganizationalUnitName &);
    X520OrganizationalUnitName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520OrganizationalUnitName & d);
    const X520OrganizationalUnitName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520Title_PDU : public ConcretePDU {
public:
    X520Title_PDU();
    void set_data(X520Title &);
    X520Title *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520Title & d);
    const X520Title *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520dnQualifier_PDU : public ConcretePDU {
public:
    X520dnQualifier_PDU();
    void set_data(X520dnQualifier &);
    X520dnQualifier *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520dnQualifier & d);
    const X520dnQualifier *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520countryName_PDU : public ConcretePDU {
public:
    X520countryName_PDU();
    void set_data(X520countryName &);
    X520countryName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520countryName & d);
    const X520countryName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520SerialNumber_PDU : public ConcretePDU {
public:
    X520SerialNumber_PDU();
    void set_data(X520SerialNumber &);
    X520SerialNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520SerialNumber & d);
    const X520SerialNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC X520Pseudonym_PDU : public ConcretePDU {
public:
    X520Pseudonym_PDU();
    void set_data(X520Pseudonym &);
    X520Pseudonym *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const X520Pseudonym & d);
    const X520Pseudonym *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DomainComponent_PDU : public ConcretePDU {
public:
    DomainComponent_PDU();
    void set_data(DomainComponent &);
    DomainComponent *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DomainComponent & d);
    const DomainComponent *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EmailAddress_PDU : public ConcretePDU {
public:
    EmailAddress_PDU();
    void set_data(EmailAddress &);
    EmailAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EmailAddress & d);
    const EmailAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DistinguishedName_PDU : public ConcretePDU {
public:
    DistinguishedName_PDU();
    void set_data(DistinguishedName &);
    DistinguishedName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DistinguishedName & d);
    const DistinguishedName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DirectoryString_PDU : public ConcretePDU {
public:
    DirectoryString_PDU();
    void set_data(DirectoryString &);
    DirectoryString *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DirectoryString & d);
    const DirectoryString *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Certificate_PDU : public ConcretePDU {
public:
    Certificate_PDU();
    void set_data(Certificate &);
    Certificate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Certificate & d);
    const Certificate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CertificateList_PDU : public ConcretePDU {
public:
    CertificateList_PDU();
    void set_data(CertificateList &);
    CertificateList *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CertificateList & d);
    const CertificateList *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ORAddress_PDU : public ConcretePDU {
public:
    ORAddress_PDU();
    void set_data(ORAddress &);
    ORAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ORAddress & d);
    const ORAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CommonName_PDU : public ConcretePDU {
public:
    CommonName_PDU();
    void set_data(CommonName &);
    CommonName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CommonName & d);
    const CommonName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TeletexCommonName_PDU : public ConcretePDU {
public:
    TeletexCommonName_PDU();
    void set_data(TeletexCommonName &);
    TeletexCommonName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TeletexCommonName & d);
    const TeletexCommonName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TeletexOrganizationName_PDU : public ConcretePDU {
public:
    TeletexOrganizationName_PDU();
    void set_data(TeletexOrganizationName &);
    TeletexOrganizationName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TeletexOrganizationName & d);
    const TeletexOrganizationName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TeletexPersonalName_PDU : public ConcretePDU {
public:
    TeletexPersonalName_PDU();
    void set_data(TeletexPersonalName &);
    TeletexPersonalName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TeletexPersonalName & d);
    const TeletexPersonalName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TeletexOrganizationalUnitNames_PDU : public ConcretePDU {
public:
    TeletexOrganizationalUnitNames_PDU();
    void set_data(TeletexOrganizationalUnitNames &);
    TeletexOrganizationalUnitNames *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TeletexOrganizationalUnitNames & d);
    const TeletexOrganizationalUnitNames *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PDSName_PDU : public ConcretePDU {
public:
    PDSName_PDU();
    void set_data(PDSName &);
    PDSName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PDSName & d);
    const PDSName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PhysicalDeliveryCountryName_PDU : public ConcretePDU {
public:
    PhysicalDeliveryCountryName_PDU();
    void set_data(PhysicalDeliveryCountryName &);
    PhysicalDeliveryCountryName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PhysicalDeliveryCountryName & d);
    const PhysicalDeliveryCountryName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PostalCode_PDU : public ConcretePDU {
public:
    PostalCode_PDU();
    void set_data(PostalCode &);
    PostalCode *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PostalCode & d);
    const PostalCode *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PhysicalDeliveryOfficeName_PDU : public ConcretePDU {
public:
    PhysicalDeliveryOfficeName_PDU();
    void set_data(PhysicalDeliveryOfficeName &);
    PhysicalDeliveryOfficeName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PhysicalDeliveryOfficeName & d);
    const PhysicalDeliveryOfficeName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PhysicalDeliveryOfficeNumber_PDU : public ConcretePDU {
public:
    PhysicalDeliveryOfficeNumber_PDU();
    void set_data(PhysicalDeliveryOfficeNumber &);
    PhysicalDeliveryOfficeNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PhysicalDeliveryOfficeNumber & d);
    const PhysicalDeliveryOfficeNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ExtensionORAddressComponents_PDU : public ConcretePDU {
public:
    ExtensionORAddressComponents_PDU();
    void set_data(ExtensionORAddressComponents &);
    ExtensionORAddressComponents *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ExtensionORAddressComponents & d);
    const ExtensionORAddressComponents *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PhysicalDeliveryPersonalName_PDU : public ConcretePDU {
public:
    PhysicalDeliveryPersonalName_PDU();
    void set_data(PhysicalDeliveryPersonalName &);
    PhysicalDeliveryPersonalName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PhysicalDeliveryPersonalName & d);
    const PhysicalDeliveryPersonalName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PhysicalDeliveryOrganizationName_PDU : public ConcretePDU {
public:
    PhysicalDeliveryOrganizationName_PDU();
    void set_data(PhysicalDeliveryOrganizationName &);
    PhysicalDeliveryOrganizationName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PhysicalDeliveryOrganizationName & d);
    const PhysicalDeliveryOrganizationName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ExtensionPhysicalDeliveryAddressComponents_PDU : public ConcretePDU {
public:
    ExtensionPhysicalDeliveryAddressComponents_PDU();
    void set_data(ExtensionPhysicalDeliveryAddressComponents &);
    ExtensionPhysicalDeliveryAddressComponents *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ExtensionPhysicalDeliveryAddressComponents & d);
    const ExtensionPhysicalDeliveryAddressComponents *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UnformattedPostalAddress_PDU : public ConcretePDU {
public:
    UnformattedPostalAddress_PDU();
    void set_data(UnformattedPostalAddress &);
    UnformattedPostalAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UnformattedPostalAddress & d);
    const UnformattedPostalAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC StreetAddress_PDU : public ConcretePDU {
public:
    StreetAddress_PDU();
    void set_data(StreetAddress &);
    StreetAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const StreetAddress & d);
    const StreetAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PostOfficeBoxAddress_PDU : public ConcretePDU {
public:
    PostOfficeBoxAddress_PDU();
    void set_data(PostOfficeBoxAddress &);
    PostOfficeBoxAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PostOfficeBoxAddress & d);
    const PostOfficeBoxAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PosteRestanteAddress_PDU : public ConcretePDU {
public:
    PosteRestanteAddress_PDU();
    void set_data(PosteRestanteAddress &);
    PosteRestanteAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PosteRestanteAddress & d);
    const PosteRestanteAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UniquePostalName_PDU : public ConcretePDU {
public:
    UniquePostalName_PDU();
    void set_data(UniquePostalName &);
    UniquePostalName *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UniquePostalName & d);
    const UniquePostalName *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LocalPostalAttributes_PDU : public ConcretePDU {
public:
    LocalPostalAttributes_PDU();
    void set_data(LocalPostalAttributes &);
    LocalPostalAttributes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LocalPostalAttributes & d);
    const LocalPostalAttributes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ExtendedNetworkAddress_PDU : public ConcretePDU {
public:
    ExtendedNetworkAddress_PDU();
    void set_data(ExtendedNetworkAddress &);
    ExtendedNetworkAddress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ExtendedNetworkAddress & d);
    const ExtendedNetworkAddress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TerminalType_PDU : public ConcretePDU {
public:
    TerminalType_PDU();
    void set_data(TerminalType &);
    TerminalType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TerminalType & d);
    const TerminalType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TeletexDomainDefinedAttributes_PDU : public ConcretePDU {
public:
    TeletexDomainDefinedAttributes_PDU();
    void set_data(TeletexDomainDefinedAttributes &);
    TeletexDomainDefinedAttributes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TeletexDomainDefinedAttributes & d);
    const TeletexDomainDefinedAttributes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AuthPack_OLD_PDU : public ConcretePDU {
public:
    AuthPack_OLD_PDU();
    void set_data(AuthPack_OLD &);
    AuthPack_OLD *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AuthPack_OLD & d);
    const AuthPack_OLD *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KERB_REPLY_KEY_PACKAGE_PDU : public ConcretePDU {
public:
    KERB_REPLY_KEY_PACKAGE_PDU();
    void set_data(KERB_REPLY_KEY_PACKAGE &);
    KERB_REPLY_KEY_PACKAGE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KERB_REPLY_KEY_PACKAGE & d);
    const KERB_REPLY_KEY_PACKAGE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_FOR_USER_ENC_PDU : public ConcretePDU {
public:
    PA_FOR_USER_ENC_PDU();
    void set_data(PA_FOR_USER_ENC &);
    PA_FOR_USER_ENC *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_FOR_USER_ENC & d);
    const PA_FOR_USER_ENC *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_S4U_X509_USER_PDU : public ConcretePDU {
public:
    PA_S4U_X509_USER_PDU();
    void set_data(PA_S4U_X509_USER &);
    PA_S4U_X509_USER *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_S4U_X509_USER & d);
    const PA_S4U_X509_USER *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_PAC_OPTIONS_PDU : public ConcretePDU {
public:
    PA_PAC_OPTIONS_PDU();
    void set_data(PA_PAC_OPTIONS &);
    PA_PAC_OPTIONS *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_PAC_OPTIONS & d);
    const PA_PAC_OPTIONS *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KERB_PA_PAC_REQUEST_PDU : public ConcretePDU {
public:
    KERB_PA_PAC_REQUEST_PDU();
    void set_data(KERB_PA_PAC_REQUEST &);
    KERB_PA_PAC_REQUEST *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KERB_PA_PAC_REQUEST & d);
    const KERB_PA_PAC_REQUEST *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KERB_LOCAL_PDU : public ConcretePDU {
public:
    KERB_LOCAL_PDU();
    void set_data(KERB_LOCAL &);
    KERB_LOCAL *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KERB_LOCAL & d);
    const KERB_LOCAL *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KERB_AD_RESTRICTION_ENTRY_PDU : public ConcretePDU {
public:
    KERB_AD_RESTRICTION_ENTRY_PDU();
    void set_data(KERB_AD_RESTRICTION_ENTRY &);
    KERB_AD_RESTRICTION_ENTRY *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KERB_AD_RESTRICTION_ENTRY & d);
    const KERB_AD_RESTRICTION_ENTRY *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PA_SUPPORTED_ENCTYPES_PDU : public ConcretePDU {
public:
    PA_SUPPORTED_ENCTYPES_PDU();
    void set_data(PA_SUPPORTED_ENCTYPES &);
    PA_SUPPORTED_ENCTYPES *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PA_SUPPORTED_ENCTYPES & d);
    const PA_SUPPORTED_ENCTYPES *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC cbd_asn1_Control : public OssControl {
public:
    cbd_asn1_Control();
    cbd_asn1_Control(const cbd_asn1_Control &);
};


/* External definitions for named values */

extern OSS_PUBLIC const OssEncOID& id_krb5;

extern OSS_PUBLIC const OssEncOID& id_pkinit;

extern OSS_PUBLIC const OssEncOID& id_pkinit_authData;

extern OSS_PUBLIC const OssEncOID& id_pkinit_DHKeyData;

extern OSS_PUBLIC const OssEncOID& id_pkinit_rkeyData;

extern OSS_PUBLIC const OssEncOID& id_pkinit_KPClientAuth;

extern OSS_PUBLIC const OssEncOID& id_pkinit_KPKdc;

extern OSS_PUBLIC const OssEncOID& id_pkinit_san;

const OSS_INT32 pa_pk_as_req = 16;

const OSS_INT32 pa_pk_as_rep = 17;

const OSS_INT32 ad_initial_verified_cas = 9;

const OSS_INT32 td_trusted_certifiers = 104;

const OSS_INT32 td_invalid_certificates = 105;

const OSS_INT32 td_dh_parameters = 109;

extern OSS_PUBLIC const OssEncOID& id_pkix;

extern OSS_PUBLIC const OssEncOID& id_pe;

extern OSS_PUBLIC const OssEncOID& id_qt;

extern OSS_PUBLIC const OssEncOID& id_kp;

extern OSS_PUBLIC const OssEncOID& id_ad;

extern OSS_PUBLIC const OssEncOID& id_qt_cps;

extern OSS_PUBLIC const OssEncOID& id_qt_unotice;

extern OSS_PUBLIC const OssEncOID& id_ad_ocsp;

extern OSS_PUBLIC const OssEncOID& id_ad_caIssuers;

extern OSS_PUBLIC const OssEncOID& id_ad_timeStamping;

extern OSS_PUBLIC const OssEncOID& id_ad_caRepository;

extern OSS_PUBLIC const OssEncOID& id_at;

extern OSS_PUBLIC const OssEncOID& id_at_name;

extern OSS_PUBLIC const OssEncOID& id_at_surname;

extern OSS_PUBLIC const OssEncOID& id_at_givenName;

extern OSS_PUBLIC const OssEncOID& id_at_initials;

extern OSS_PUBLIC const OssEncOID& id_at_generationQualifier;

extern OSS_PUBLIC const OssEncOID& id_at_commonName;

extern OSS_PUBLIC const OssEncOID& id_at_localityName;

extern OSS_PUBLIC const OssEncOID& id_at_stateOrProvinceName;

extern OSS_PUBLIC const OssEncOID& id_at_organizationName;

extern OSS_PUBLIC const OssEncOID& id_at_organizationalUnitName;

extern OSS_PUBLIC const OssEncOID& id_at_title;

extern OSS_PUBLIC const OssEncOID& id_at_dnQualifier;

extern OSS_PUBLIC const OssEncOID& id_at_countryName;

extern OSS_PUBLIC const OssEncOID& id_at_serialNumber;

extern OSS_PUBLIC const OssEncOID& id_at_pseudonym;

extern OSS_PUBLIC const OssEncOID& id_domainComponent;

extern OSS_PUBLIC const OssEncOID& pkcs_9;

extern OSS_PUBLIC const OssEncOID& id_emailAddress;

const OSS_INT32 common_name = 1;

const OSS_INT32 teletex_common_name = 2;

const OSS_INT32 teletex_organization_name = 3;

const OSS_INT32 teletex_personal_name = 4;

const OSS_INT32 teletex_organizational_unit_names = 5;

const OSS_INT32 pds_name = 7;

const OSS_INT32 physical_delivery_country_name = 8;

const OSS_INT32 postal_code = 9;

const OSS_INT32 physical_delivery_office_name = 10;

const OSS_INT32 physical_delivery_office_number = 11;

const OSS_INT32 extension_OR_address_components = 12;

const OSS_INT32 physical_delivery_personal_name = 13;

const OSS_INT32 physical_delivery_organization_name = 14;

const OSS_INT32 extension_physical_delivery_address_components = 15;

const OSS_INT32 unformatted_postal_address = 16;

const OSS_INT32 street_address = 17;

const OSS_INT32 post_office_box_address = 18;

const OSS_INT32 poste_restante_address = 19;

const OSS_INT32 unique_postal_name = 20;

const OSS_INT32 local_postal_attributes = 21;

const OSS_INT32 extended_network_address = 22;

const OSS_INT32 terminal_type = 23;

const OSS_INT32 teletex_domain_defined_attributes = 6;

const OSS_INT32 ub_name = 32768;

const OSS_INT32 ub_common_name = 64;

const OSS_INT32 ub_locality_name = 128;

const OSS_INT32 ub_state_name = 128;

const OSS_INT32 ub_organization_name = 64;

const OSS_INT32 ub_organizational_unit_name = 64;

const OSS_INT32 ub_title = 64;

const OSS_INT32 ub_serial_number = 64;

const OSS_INT32 ub_match = 128;

const OSS_INT32 ub_emailaddress_length = 128;

const OSS_INT32 ub_common_name_length = 64;

const OSS_INT32 ub_country_name_alpha_length = 2;

const OSS_INT32 ub_country_name_numeric_length = 3;

const OSS_INT32 ub_domain_defined_attributes = 4;

const OSS_INT32 ub_domain_defined_attribute_type_length = 8;

const OSS_INT32 ub_domain_defined_attribute_value_length = 128;

const OSS_INT32 ub_domain_name_length = 16;

const OSS_INT32 ub_extension_attributes = 256;

const OSS_INT32 ub_e163_4_number_length = 15;

const OSS_INT32 ub_e163_4_sub_address_length = 40;

const OSS_INT32 ub_generation_qualifier_length = 3;

const OSS_INT32 ub_given_name_length = 16;

const OSS_INT32 ub_initials_length = 5;

const OSS_INT32 ub_integer_options = 256;

const OSS_INT32 ub_numeric_user_id_length = 32;

const OSS_INT32 ub_organization_name_length = 64;

const OSS_INT32 ub_organizational_unit_name_length = 32;

const OSS_INT32 ub_organizational_units = 4;

const OSS_INT32 ub_pds_name_length = 16;

const OSS_INT32 ub_pds_parameter_length = 30;

const OSS_INT32 ub_pds_physical_address_lines = 6;

const OSS_INT32 ub_postal_code_length = 16;

const OSS_INT32 ub_pseudonym = 128;

const OSS_INT32 ub_surname_length = 40;

const OSS_INT32 ub_terminal_id_length = 24;

const OSS_INT32 ub_unformatted_address_length = 180;

const OSS_INT32 ub_x121_address_length = 16;

#endif // OSS_cbd_asn1
